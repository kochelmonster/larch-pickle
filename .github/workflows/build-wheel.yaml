name: Build Wheel

on: workflow_dispatch

jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-all-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython wheel setuptools

      - name: Build Wheel
        run: |
          python setup.py bdist_wheel

      - name: Find first wheel file
        id: find_wheel
        run: |
          first_wheel=$(ls dist/*.whl | head -n 1)
          echo "wheel=$first_wheel" >> $GITHUB_ENV
          echo "wheel_base=$(basename $first_wheel)" >> $GITHUB_ENV

      - name: Get latest release draft
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const draftRelease = releases.data.find(release => release.draft);
            if (!draftRelease) {
              throw new Error('No draft release found');
            }
            core.setOutput('upload_url', draftRelease.upload_url);

      - name: Upload to release draft
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_UPLOAD }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ env.wheel }}
          asset_name: ${{ env.wheel_base }}
          asset_content_type: application/zip
          
  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          brew install boost
          brew install gcc

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython wheel setuptools

      - name: Build Wheel
        run: |
          BOOST_DIR=$(brew --prefix boost)
          export BOOST_DIR
          python setup.py bdist_wheel

      - name: Find first wheel file
        id: find_wheel
        run: |
          first_wheel=$(ls dist/*.whl | head -n 1)
          echo "wheel=$first_wheel" >> $GITHUB_ENV
          echo "wheel_base=$(basename $first_wheel)" >> $GITHUB_ENV

       - name: Get latest release draft
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const draftRelease = releases.data.find(release => release.draft);
            if (!draftRelease) {
              throw new Error('No draft release found');
            }
            core.setOutput('upload_url', draftRelease.upload_url);

      - name: Upload to release draft
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_UPLOAD }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ env.wheel }}
          asset_name: ${{ env.wheel_base }}
          asset_content_type: application/zip
 
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          choco install visualstudio2022buildtools -y
          curl -L -o boost.zip https://boostorg.jfrog.io/artifactory/main/release/1.75.0/source/boost_1_75_0.zip
          mkdir -p C:\local
          tar -xf boost.zip -C C:\local
          setx BOOST_ROOT C:\local\boost_1_75_0
          setx PATH "%PATH%;C:\local\boost_1_75_0"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cython wheel setuptools

      - name: Build Wheel
        run: |
          python setup.py bdist_wheel

      - name: Find first wheel file
        id: find_wheel
        run: |
          first_wheel=$(dir dist\*.whl | select -first 1)
          echo "wheel=$first_wheel" >> $env:GITHUB_ENV
          echo "wheel_base=$(Split-Path -Leaf $first_wheel)" >> $env:GITHUB_ENV

      - name: Get latest release draft
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const draftRelease = releases.data.find(release => release.draft);
            if (!draftRelease) {
              throw new Error('No draft release found');
            }
            core.setOutput('upload_url', draftRelease.upload_url);

      - name: Upload to release draft
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_UPLOAD }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ env.wheel }}
          asset_name: ${{ env.wheel_base }}
          asset_content_type: application/zip
 
