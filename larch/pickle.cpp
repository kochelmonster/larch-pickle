/* Generated by Cython 0.20 on Mon Jan 20 22:22:33 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#define __Pyx_PyUnicode_Concat(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
    PyNumber_Add(a, b) : PyUnicode_Concat(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__larch__pickle
#define __PYX_HAVE_API__larch__pickle
#include "string.h"
#include "structmember.h"
#include "pickle.hpp"
#include "pack.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "unpack.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pickle.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_5larch_6pickle_Pickler;
struct __pyx_obj_5larch_6pickle__FileLike;
struct __pyx_obj_5larch_6pickle__BufferContainer;
struct __pyx_obj_5larch_6pickle_OutputBuffer;
struct __pyx_obj_5larch_6pickle_ExternFileLike;
struct __pyx_obj_5larch_6pickle_Unpickler;
struct __pyx_opt_args_5larch_6pickle__register_unpickle;
struct __pyx_opt_args_5larch_6pickle_dumps;
struct __pyx_opt_args_5larch_6pickle_dump;

/* "larch\pickle.pyx":246
 * 
 * 
 * ctypedef int (*write_file_t)(object file, void *data, size_t size)             # <<<<<<<<<<<<<<
 * """writes data to file"""
 * 
 */
typedef int (*__pyx_t_5larch_6pickle_write_file_t)(PyObject *, void *, size_t);

/* "larch\pickle.pyx":249
 * """writes data to file"""
 * 
 * ctypedef int (*read_file_t)(object file, void *data, size_t size)             # <<<<<<<<<<<<<<
 * """reads data from file"""
 * 
 */
typedef int (*__pyx_t_5larch_6pickle_read_file_t)(PyObject *, void *, size_t);

/* "larch\pickle.pyx":599
 * # -----------------------------------
 * 
 * ctypedef int (*pack_import_names_t)(Packer* p, module, name) except -1             # <<<<<<<<<<<<<<
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:
 */
typedef int (*__pyx_t_5larch_6pickle_pack_import_names_t)(Packer *, PyObject *, PyObject *);

/* "larch\pickle.pyx":818
 * 
 * 
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in codes:
 */
struct __pyx_opt_args_5larch_6pickle__register_unpickle {
  int __pyx_n;
  int offset;
};

/* "larch\pickle.pyx":873
 * cdef class Unpickler
 * 
 * ctypedef object (*find_class_t)(Unpickler unpickler, module, name)             # <<<<<<<<<<<<<<
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):
 */
typedef PyObject *(*__pyx_t_5larch_6pickle_find_class_t)(struct __pyx_obj_5larch_6pickle_Unpickler *, PyObject *, PyObject *);

/* "larch\pickle.pyx":884
 * 
 * 
 * ctypedef object (*default_find_class_t)(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef PyObject *(*__pyx_t_5larch_6pickle_default_find_class_t)(PyObject *, PyObject *);

/* "larch\pickle.pyx":1003
 * 
 * 
 * cpdef dumps(obj, protocol=3):             # <<<<<<<<<<<<<<
 *     return Pickler(protocol=protocol).dump(obj).get_output_string()
 * 
 */
struct __pyx_opt_args_5larch_6pickle_dumps {
  int __pyx_n;
  PyObject *protocol;
};

/* "larch\pickle.pyx":1007
 * 
 * 
 * cpdef dump(obj, file, protocol=3):             # <<<<<<<<<<<<<<
 *     Pickler(file, protocol=protocol).dump(obj)
 * 
 */
struct __pyx_opt_args_5larch_6pickle_dump {
  int __pyx_n;
  PyObject *protocol;
};

/* "larch\pickle.pyx":242
 * 
 * 
 * cdef class Pickler             # <<<<<<<<<<<<<<
 * cdef class Unpickler
 * 
 */
struct __pyx_obj_5larch_6pickle_Pickler {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_Pickler *__pyx_vtab;
  PyObject *file;
  Packer *packer;
  uint8_t protocol;
  __pyx_t_5larch_6pickle_pack_import_names_t pack_import_names;
  PyObject *dispatch_table;
  uint32_t last_refcount;
};


/* "larch\pickle.pyx":293
 * 
 * # Python Filelike
 * cdef class _FileLike:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object write
 */
struct __pyx_obj_5larch_6pickle__FileLike {
  PyObject_HEAD
  PyObject *write;
  PyObject *read;
};


/* "larch\pickle.pyx":278
 * 
 * 
 * cdef class _BufferContainer:             # <<<<<<<<<<<<<<
 *     cdef StringReader sreader
 * 
 */
struct __pyx_obj_5larch_6pickle__BufferContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle__BufferContainer *__pyx_vtab;
  StringReader sreader;
};


/* "larch\pickle.pyx":258
 * 
 * # String Buffer
 * cdef class OutputBuffer:             # <<<<<<<<<<<<<<
 *     cdef StringWriter *writer
 * 
 */
struct __pyx_obj_5larch_6pickle_OutputBuffer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_OutputBuffer *__pyx_vtab;
  StringWriter *writer;
};


/* "larch\pickle.pyx":322
 * # External (cython) filelike
 * 
 * cdef class ExternFileLike:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object file
 */
struct __pyx_obj_5larch_6pickle_ExternFileLike {
  PyObject_HEAD
  PyObject *file;
  __pyx_t_5larch_6pickle_write_file_t write;
  __pyx_t_5larch_6pickle_read_file_t read;
};


/* "larch\pickle.pyx":243
 * 
 * cdef class Pickler
 * cdef class Unpickler             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5larch_6pickle_Unpickler {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_Unpickler *__pyx_vtab;
  PyObject *file;
  Unpacker *unpacker;
  PyObject *_find_class;
  __pyx_t_5larch_6pickle_find_class_t call_find_class;
  __pyx_t_5larch_6pickle_default_find_class_t default_find_class;
  uint32_t last_refcount;
};



/* "larch\pickle.pyx":258
 * 
 * # String Buffer
 * cdef class OutputBuffer:             # <<<<<<<<<<<<<<
 *     cdef StringWriter *writer
 * 
 */

struct __pyx_vtabstruct_5larch_6pickle_OutputBuffer {
  void (*reset)(struct __pyx_obj_5larch_6pickle_OutputBuffer *);
  PyObject *(*result)(struct __pyx_obj_5larch_6pickle_OutputBuffer *);
};
static struct __pyx_vtabstruct_5larch_6pickle_OutputBuffer *__pyx_vtabptr_5larch_6pickle_OutputBuffer;


/* "larch\pickle.pyx":913
 * 
 * 
 * cdef class Unpickler:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object file
 */

struct __pyx_vtabstruct_5larch_6pickle_Unpickler {
  int (*set_protocol)(struct __pyx_obj_5larch_6pickle_Unpickler *, uint8_t);
  PyObject *(*unpack_import)(struct __pyx_obj_5larch_6pickle_Unpickler *, size_t);
  int (*check_init)(struct __pyx_obj_5larch_6pickle_Unpickler *);
};
static struct __pyx_vtabstruct_5larch_6pickle_Unpickler *__pyx_vtabptr_5larch_6pickle_Unpickler;


/* "larch\pickle.pyx":620
 * 
 * 
 * cdef class Pickler:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object file
 */

struct __pyx_vtabstruct_5larch_6pickle_Pickler {
  int (*pack_import1)(struct __pyx_obj_5larch_6pickle_Pickler *, uint8_t, PyObject *);
  int (*pack_import2)(struct __pyx_obj_5larch_6pickle_Pickler *, uint8_t, PyObject *, PyObject *);
  int (*check_init)(struct __pyx_obj_5larch_6pickle_Pickler *);
  PyObject *(*get_output_string)(struct __pyx_obj_5larch_6pickle_Pickler *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5larch_6pickle_Pickler *__pyx_vtabptr_5larch_6pickle_Pickler;


/* "larch\pickle.pyx":278
 * 
 * 
 * cdef class _BufferContainer:             # <<<<<<<<<<<<<<
 *     cdef StringReader sreader
 * 
 */

struct __pyx_vtabstruct_5larch_6pickle__BufferContainer {
  struct __pyx_obj_5larch_6pickle__BufferContainer *(*set)(struct __pyx_obj_5larch_6pickle__BufferContainer *, PyObject *);
};
static struct __pyx_vtabstruct_5larch_6pickle__BufferContainer *__pyx_vtabptr_5larch_6pickle__BufferContainer;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

#include <new>

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value);

static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'larch.pickle' */
static PyTypeObject *__pyx_ptype_5larch_6pickle_Pickler = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle__FileLike = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle__BufferContainer = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_OutputBuffer = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_ExternFileLike = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_Unpickler = 0;
static PyObject *__pyx_v_5larch_6pickle_name_mapping_2to3 = 0;
static PyObject *__pyx_v_5larch_6pickle_import_mapping_2to3 = 0;
static PyObject *__pyx_v_5larch_6pickle_name_mapping_3to2 = 0;
static PyObject *__pyx_v_5larch_6pickle_import_mapping_3to2 = 0;
static PyObject *__pyx_v_5larch_6pickle_dispatch_table = 0;
static PyObject *__pyx_v_5larch_6pickle_extension_registry = 0;
static PyObject *__pyx_v_5larch_6pickle_inverted_registry = 0;
static PyObject *__pyx_v_5larch_6pickle_extension_cache = 0;
static PyObject *__pyx_v_5larch_6pickle_modules = 0;
static PyObject *__pyx_v_5larch_6pickle__end_item = 0;
static PyObject *__pyx_v_5larch_6pickle__string_type = 0;
static int __pyx_f_5larch_6pickle_write_buffer(PyObject *, void *, size_t); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_read_buffer(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_write_file(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_read_file(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_write_external(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_read_external(PyObject *, void *, size_t); /*proto*/
static CYTHON_INLINE void __pyx_f_5larch_6pickle_reraise(void); /*proto*/
static void __pyx_f_5larch_6pickle_save_long(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_global(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_save_global(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle___save_oldstyle(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle__save_oldstyle(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_save_oldstyle(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_5larch_6pickle_save_object_state(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_reduced(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_save_reduced(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_new_object(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_save_new_object(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_object(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_save_object(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_save_impossible(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_register_type(PyObject *, pack_t); /*proto*/
static int __pyx_f_5larch_6pickle_simple_pack(Packer *, PyObject *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_mapped_pack(Packer *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle__load_object(Unpacker *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_object(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_object_new(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_singleton(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_oldstyle(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_initargs(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_end_item(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_ref(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_global(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_version(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load_wrong_code(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle__register_unpickle(unpack_t, PyObject *, struct __pyx_opt_args_5larch_6pickle__register_unpickle *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_call_default_find_class(struct __pyx_obj_5larch_6pickle_Unpickler *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_call_sub_find_class(struct __pyx_obj_5larch_6pickle_Unpickler *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_simple_find_class(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_mapped_find_class(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_dumps(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_dumps *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_dump(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_dump *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_loads(PyObject *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "larch.pickle"
int __pyx_module_is_main_larch__pickle = 0;

/* Implementation of 'larch.pickle' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_EOFError;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_KeyError;
static int __pyx_pf_5larch_6pickle_12OutputBuffer___init__(struct __pyx_obj_5larch_6pickle_OutputBuffer *__pyx_v_self); /* proto */
static void __pyx_pf_5larch_6pickle_12OutputBuffer_2__dealloc__(struct __pyx_obj_5larch_6pickle_OutputBuffer *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_9_FileLike___init__(struct __pyx_obj_5larch_6pickle__FileLike *__pyx_v_self, PyObject *__pyx_v_file_like); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_inner_func(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_5larch_6pickle_7Pickler___init__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol, PyObject *__pyx_v_with_refs); /* proto */
static void __pyx_pf_5larch_6pickle_7Pickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_7Pickler_4dump(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_7Pickler_6dumps(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_7Pickler_8get_output_string(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_7Pickler_14dispatch_table___get__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table_2__set__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table_4__del__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_7Pickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_7Pickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5larch_6pickle_9Unpickler___init__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_file); /* proto */
static void __pyx_pf_5larch_6pickle_9Unpickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_4find_class(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_6load(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_8loads(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_9Unpickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_2dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_protocol); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_4dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_8loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_tp_new_5larch_6pickle_Pickler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle__FileLike(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle__BufferContainer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_OutputBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_ExternFileLike(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_Unpickler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k__3[] = "";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_obj[] = "obj";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_dict[] = "__dict__";
static char __pyx_k_dump[] = "dump";
static char __pyx_k_file[] = "file";
static char __pyx_k_load[] = "load";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "__name__";
static char __pyx_k_read[] = "read";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_class[] = "__class__";
static char __pyx_k_items[] = "items";
static char __pyx_k_range[] = "range";
static char __pyx_k_types[] = "types";
static char __pyx_k_write[] = "write";
static char __pyx_k_append[] = "append";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_name_2[] = "name";
static char __pyx_k_newobj[] = "__newobj__";
static char __pyx_k_object[] = "object";
static char __pyx_k_update[] = "update";
static char __pyx_k_copyreg[] = "copyreg";
static char __pyx_k_modules[] = "modules";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_EOFError[] = "EOFError";
static char __pyx_k_KeyError[] = "KeyError";
static char __pyx_k_c_pickle[] = "c_pickle";
static char __pyx_k_exc_info[] = "exc_info";
static char __pyx_k_module_2[] = "module";
static char __pyx_k_protocol[] = "protocol";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_setstate[] = "__setstate__";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_file_like[] = "file_like";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_reduce_ex[] = "__reduce_ex__";
static char __pyx_k_with_refs[] = "with_refs";
static char __pyx_k_find_class[] = "find_class";
static char __pyx_k_inner_func[] = "inner_func";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_PickleError[] = "PickleError";
static char __pyx_k_getinitargs[] = "__getinitargs__";
static char __pyx_k_FunctionType[] = "FunctionType";
static char __pyx_k_NAME_MAPPING[] = "NAME_MAPPING";
static char __pyx_k_larch_pickle[] = "larch.pickle";
static char __pyx_k_with_version[] = "with_version";
static char __pyx_k_Cannot_save_r[] = "Cannot save {!r}";
static char __pyx_k_GeneratorType[] = "GeneratorType";
static char __pyx_k_OverflowError[] = "OverflowError";
static char __pyx_k_PicklingError[] = "PicklingError";
static char __pyx_k_compat_pickle[] = "_compat_pickle";
static char __pyx_k_AttributeError[] = "AttributeError";
static char __pyx_k_IMPORT_MAPPING[] = "IMPORT_MAPPING";
static char __pyx_k_dispatch_table[] = "dispatch_table";
static char __pyx_k_UnpicklingError[] = "UnpicklingError";
static char __pyx_k_extension_cache[] = "_extension_cache";
static char __pyx_k_BuiltinMethodType[] = "BuiltinMethodType";
static char __pyx_k_Invalid_reference[] = "Invalid reference";
static char __pyx_k_Unknown_load_code[] = "Unknown load code";
static char __pyx_k_get_output_string[] = "get_output_string";
static char __pyx_k_inverted_registry[] = "_inverted_registry";
static char __pyx_k_extension_registry[] = "_extension_registry";
static char __pyx_k_REVERSE_NAME_MAPPING[] = "REVERSE_NAME_MAPPING";
static char __pyx_k_REVERSE_IMPORT_MAPPING[] = "REVERSE_IMPORT_MAPPING";
static char __pyx_k_long_too_large_to_pickle[] = "long too large to pickle";
static char __pyx_k_Difference_to_python_pickle_no[] = "\n\nDifference to python pickle:\n----------------------------\n\n- no memo attribute\n- no clear_memo()\n- no persistent_id interface\n- pickle3 can only load utf8 encoded pickle2 strings\n\n\nDifferences to msg pack protocol:\n--------------------------------\n\next type LIST:\n   the size field is interpreted as item count\n\next type VERSION:\n   the size field is interpreted as version number\n\next type OBJECT:\n   after the extension byte the object state is saved\n\n0xc1:\n   this opcode is interpreted as REF Field\n   +------+------+------+------+------+\n   | 0xcf |XXXXXX|xxxxxx|xxxxxx|xxxxxx|\n   +------+------+------+------+------+\n   XXXX 32bit big-endian ref id\n\n\nPython 2 <-> Python 3 Pickle\n----------------------------\n\nPython 2 pickles strings(bytes) to msg-pack str type and unicode to\nthe extension type UNISTR\n\nPython 3 pickles strings(unicode) to msg-pack str type and bytes to\nmsg-pack byte type\n";
static char __pyx_k_Pickler___init___was_not_called[] = "Pickler.__init__() was not called by {}.__init__()";
static char __pyx_k_Unpickler___init___was_not_calle[] = "Unpickler.__init__() was not called by {}.__init__()";
static char __pyx_k_z_src_larch_dev_pickle_larch_pic[] = "z:\\src\\larch_dev\\pickle\\larch\\pickle.pyx";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_BuiltinMethodType;
static PyObject *__pyx_kp_s_Cannot_save_r;
static PyObject *__pyx_n_s_EOFError;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_FunctionType;
static PyObject *__pyx_n_s_GeneratorType;
static PyObject *__pyx_n_s_IMPORT_MAPPING;
static PyObject *__pyx_kp_s_Invalid_reference;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_NAME_MAPPING;
static PyObject *__pyx_n_s_OverflowError;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Pickler___init___was_not_called;
static PyObject *__pyx_n_s_PicklingError;
static PyObject *__pyx_n_s_REVERSE_IMPORT_MAPPING;
static PyObject *__pyx_n_s_REVERSE_NAME_MAPPING;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_load_code;
static PyObject *__pyx_kp_s_Unpickler___init___was_not_calle;
static PyObject *__pyx_n_s_UnpicklingError;
static PyObject *__pyx_kp_b__3;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_c_pickle;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_compat_pickle;
static PyObject *__pyx_n_s_copyreg;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dispatch_table;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dump;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_s_extension_cache;
static PyObject *__pyx_n_s_extension_registry;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_file_like;
static PyObject *__pyx_n_s_find_class;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get_output_string;
static PyObject *__pyx_n_s_getinitargs;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inner_func;
static PyObject *__pyx_n_s_inverted_registry;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_larch_pickle;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_module_2;
static PyObject *__pyx_n_s_modules;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_newobj;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_protocol;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_with_refs;
static PyObject *__pyx_n_s_with_version;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_kp_s_z_src_larch_dev_pickle_larch_pic;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_160;
static PyObject *__pyx_int_192;
static PyObject *__pyx_int_193;
static PyObject *__pyx_int_194;
static PyObject *__pyx_int_195;
static PyObject *__pyx_int_196;
static PyObject *__pyx_int_197;
static PyObject *__pyx_int_198;
static PyObject *__pyx_int_199;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_201;
static PyObject *__pyx_int_203;
static PyObject *__pyx_int_204;
static PyObject *__pyx_int_205;
static PyObject *__pyx_int_206;
static PyObject *__pyx_int_207;
static PyObject *__pyx_int_208;
static PyObject *__pyx_int_209;
static PyObject *__pyx_int_210;
static PyObject *__pyx_int_211;
static PyObject *__pyx_int_212;
static PyObject *__pyx_int_213;
static PyObject *__pyx_int_214;
static PyObject *__pyx_int_215;
static PyObject *__pyx_int_216;
static PyObject *__pyx_int_217;
static PyObject *__pyx_int_218;
static PyObject *__pyx_int_219;
static PyObject *__pyx_int_220;
static PyObject *__pyx_int_221;
static PyObject *__pyx_int_222;
static PyObject *__pyx_int_223;
static PyObject *__pyx_int_224;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_1L;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_codeobj__4;

/* "larch\pickle.pyx":261
 *     cdef StringWriter *writer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.writer = new StringWriter()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_12OutputBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_12OutputBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5larch_6pickle_12OutputBuffer___init__(((struct __pyx_obj_5larch_6pickle_OutputBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_12OutputBuffer___init__(struct __pyx_obj_5larch_6pickle_OutputBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  StringWriter *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "larch\pickle.pyx":262
 * 
 *     def __init__(self):
 *         self.writer = new StringWriter()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new StringWriter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->writer = __pyx_t_1;

  /* "larch\pickle.pyx":261
 *     cdef StringWriter *writer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.writer = new StringWriter()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.OutputBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":264
 *         self.writer = new StringWriter()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.writer
 * 
 */

/* Python wrapper */
static void __pyx_pw_5larch_6pickle_12OutputBuffer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5larch_6pickle_12OutputBuffer_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5larch_6pickle_12OutputBuffer_2__dealloc__(((struct __pyx_obj_5larch_6pickle_OutputBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5larch_6pickle_12OutputBuffer_2__dealloc__(struct __pyx_obj_5larch_6pickle_OutputBuffer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "larch\pickle.pyx":265
 * 
 *     def __dealloc__(self):
 *         del self.writer             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset(self):
 */
  delete __pyx_v_self->writer;

  /* "larch\pickle.pyx":264
 *         self.writer = new StringWriter()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.writer
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":267
 *         del self.writer
 * 
 *     cdef void reset(self):             # <<<<<<<<<<<<<<
 *         self.writer.reset()
 * 
 */

static void __pyx_f_5larch_6pickle_12OutputBuffer_reset(struct __pyx_obj_5larch_6pickle_OutputBuffer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "larch\pickle.pyx":268
 * 
 *     cdef void reset(self):
 *         self.writer.reset()             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes result(self):
 */
  __pyx_v_self->writer->reset();

  /* "larch\pickle.pyx":267
 *         del self.writer
 * 
 *     cdef void reset(self):             # <<<<<<<<<<<<<<
 *         self.writer.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":270
 *         self.writer.reset()
 * 
 *     cdef bytes result(self):             # <<<<<<<<<<<<<<
 *         return self.writer.result()
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_12OutputBuffer_result(struct __pyx_obj_5larch_6pickle_OutputBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("result", 0);

  /* "larch\pickle.pyx":271
 * 
 *     cdef bytes result(self):
 *         return self.writer.result()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->writer->result(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":270
 *         self.writer.reset()
 * 
 *     cdef bytes result(self):             # <<<<<<<<<<<<<<
 *         return self.writer.result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.OutputBuffer.result", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":274
 * 
 * 
 * cdef int write_buffer(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     return (<OutputBuffer>(<Pickler>pickler).file).writer.write(data, size)
 * 
 */

static int __pyx_f_5larch_6pickle_write_buffer(PyObject *__pyx_v_pickler, void *__pyx_v_data, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_buffer", 0);

  /* "larch\pickle.pyx":275
 * 
 * cdef int write_buffer(object pickler, void* data, size_t size) except -1:
 *     return (<OutputBuffer>(<Pickler>pickler).file).writer.write(data, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((struct __pyx_obj_5larch_6pickle_OutputBuffer *)((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_pickler)->file)->writer->write(__pyx_v_data, __pyx_v_size);
  goto __pyx_L0;

  /* "larch\pickle.pyx":274
 * 
 * 
 * cdef int write_buffer(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     return (<OutputBuffer>(<Pickler>pickler).file).writer.write(data, size)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":281
 *     cdef StringReader sreader
 * 
 *     cdef _BufferContainer set(self, bytes buffer):             # <<<<<<<<<<<<<<
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0
 */

static struct __pyx_obj_5larch_6pickle__BufferContainer *__pyx_f_5larch_6pickle_16_BufferContainer_set(struct __pyx_obj_5larch_6pickle__BufferContainer *__pyx_v_self, PyObject *__pyx_v_buffer) {
  struct __pyx_obj_5larch_6pickle__BufferContainer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 0);

  /* "larch\pickle.pyx":282
 * 
 *     cdef _BufferContainer set(self, bytes buffer):
 *         self.sreader.data = buffer             # <<<<<<<<<<<<<<
 *         self.sreader.pos = 0
 *         self.sreader.size = len(buffer)
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_buffer); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->sreader.data = __pyx_t_1;

  /* "larch\pickle.pyx":283
 *     cdef _BufferContainer set(self, bytes buffer):
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0             # <<<<<<<<<<<<<<
 *         self.sreader.size = len(buffer)
 *         return self
 */
  __pyx_v_self->sreader.pos = 0;

  /* "larch\pickle.pyx":284
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0
 *         self.sreader.size = len(buffer)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (unlikely(__pyx_v_buffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_buffer); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->sreader.size = __pyx_t_2;

  /* "larch\pickle.pyx":285
 *         self.sreader.pos = 0
 *         self.sreader.size = len(buffer)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "larch\pickle.pyx":281
 *     cdef StringReader sreader
 * 
 *     cdef _BufferContainer set(self, bytes buffer):             # <<<<<<<<<<<<<<
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle._BufferContainer.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":288
 * 
 * 
 * cdef inline int read_buffer(object unpickler, void* buffer, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_BufferContainer>(<Unpickler>unpickler).file).sreader.read(buffer, size)
 * 
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_read_buffer(PyObject *__pyx_v_unpickler, void *__pyx_v_buffer, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_buffer", 0);

  /* "larch\pickle.pyx":289
 * 
 * cdef inline int read_buffer(object unpickler, void* buffer, size_t size) except -1:
 *     (<_BufferContainer>(<Unpickler>unpickler).file).sreader.read(buffer, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5larch_6pickle__BufferContainer *)((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_unpickler)->file)->sreader.read(__pyx_v_buffer, __pyx_v_size);

  /* "larch\pickle.pyx":288
 * 
 * 
 * cdef inline int read_buffer(object unpickler, void* buffer, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_BufferContainer>(<Unpickler>unpickler).file).sreader.read(buffer, size)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":298
 *         object read
 * 
 *     def __init__(self, file_like):             # <<<<<<<<<<<<<<
 *         self.write = file_like.write
 *         self.read = file_like.read
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_9_FileLike_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_9_FileLike_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_like,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_like)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_file_like = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle._FileLike.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_9_FileLike___init__(((struct __pyx_obj_5larch_6pickle__FileLike *)__pyx_v_self), __pyx_v_file_like);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_9_FileLike___init__(struct __pyx_obj_5larch_6pickle__FileLike *__pyx_v_self, PyObject *__pyx_v_file_like) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "larch\pickle.pyx":299
 * 
 *     def __init__(self, file_like):
 *         self.write = file_like.write             # <<<<<<<<<<<<<<
 *         self.read = file_like.read
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file_like, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->write);
  __Pyx_DECREF(__pyx_v_self->write);
  __pyx_v_self->write = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":300
 *     def __init__(self, file_like):
 *         self.write = file_like.write
 *         self.read = file_like.read             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file_like, __pyx_n_s_read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->read);
  __Pyx_DECREF(__pyx_v_self->read);
  __pyx_v_self->read = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":298
 *         object read
 * 
 *     def __init__(self, file_like):             # <<<<<<<<<<<<<<
 *         self.write = file_like.write
 *         self.read = file_like.read
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle._FileLike.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":303
 * 
 * 
 * cdef int write_file(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])
 *     return 1
 */

static int __pyx_f_5larch_6pickle_write_file(PyObject *__pyx_v_pickler, void *__pyx_v_data, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_file", 0);

  /* "larch\pickle.pyx":304
 * 
 * cdef int write_file(object pickler, void* data, size_t size) except -1:
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((char *)__pyx_v_data) + 0, __pyx_v_size - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((struct __pyx_obj_5larch_6pickle__FileLike *)((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_pickler)->file)->write, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":305
 * cdef int write_file(object pickler, void* data, size_t size) except -1:
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "larch\pickle.pyx":303
 * 
 * 
 * cdef int write_file(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])
 *     return 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.write_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":308
 * 
 * 
 * cdef int read_file(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file
 */

static int __pyx_f_5larch_6pickle_read_file(PyObject *__pyx_v_unpickler, void *__pyx_v_data, size_t __pyx_v_size) {
  struct __pyx_obj_5larch_6pickle__FileLike *__pyx_v_f = 0;
  PyObject *__pyx_v_b = 0;
  size_t __pyx_v_rsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_file", 0);

  /* "larch\pickle.pyx":310
 * cdef int read_file(object unpickler, void* data, size_t size) except -1:
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file             # <<<<<<<<<<<<<<
 *         bytes b = f.read(size)
 *         size_t rsize = PyBytes_GET_SIZE(b)
 */
  if (!(likely(((((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_unpickler)->file) == Py_None) || likely(__Pyx_TypeTest(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_unpickler)->file, __pyx_ptype_5larch_6pickle__FileLike))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_unpickler)->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_f = ((struct __pyx_obj_5larch_6pickle__FileLike *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":311
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file
 *         bytes b = f.read(size)             # <<<<<<<<<<<<<<
 *         size_t rsize = PyBytes_GET_SIZE(b)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_v_f->read, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_b = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":312
 *         _FileLike f = (<Unpickler>unpickler).file
 *         bytes b = f.read(size)
 *         size_t rsize = PyBytes_GET_SIZE(b)             # <<<<<<<<<<<<<<
 * 
 *     if rsize != size:
 */
  __pyx_v_rsize = PyBytes_GET_SIZE(__pyx_v_b);

  /* "larch\pickle.pyx":314
 *         size_t rsize = PyBytes_GET_SIZE(b)
 * 
 *     if rsize != size:             # <<<<<<<<<<<<<<
 *         raise EOFError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_rsize != __pyx_v_size) != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":315
 * 
 *     if rsize != size:
 *         raise EOFError()             # <<<<<<<<<<<<<<
 * 
 *     memcpy(data, Bytes_AS_STRING(b), rsize)
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_EOFError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "larch\pickle.pyx":317
 *         raise EOFError()
 * 
 *     memcpy(data, Bytes_AS_STRING(b), rsize)             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  memcpy(__pyx_v_data, PyBytes_AS_STRING(__pyx_v_b), __pyx_v_rsize);

  /* "larch\pickle.pyx":318
 * 
 *     memcpy(data, Bytes_AS_STRING(b), rsize)
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * # External (cython) filelike
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "larch\pickle.pyx":308
 * 
 * 
 * cdef int read_file(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.read_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":328
 *         read_file_t read
 * 
 * cdef int write_external(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file
 *     return ef.write(ef.file, data, size)
 */

static int __pyx_f_5larch_6pickle_write_external(PyObject *__pyx_v_pickler, void *__pyx_v_data, size_t __pyx_v_size) {
  struct __pyx_obj_5larch_6pickle_ExternFileLike *__pyx_v_ef = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("write_external", 0);

  /* "larch\pickle.pyx":329
 * 
 * cdef int write_external(object pickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file             # <<<<<<<<<<<<<<
 *     return ef.write(ef.file, data, size)
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_pickler)->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ef = ((struct __pyx_obj_5larch_6pickle_ExternFileLike *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":330
 * cdef int write_external(object pickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file
 *     return ef.write(ef.file, data, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_ef->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_r = __pyx_v_ef->write(__pyx_t_1, __pyx_v_data, __pyx_v_size);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":328
 *         read_file_t read
 * 
 * cdef int write_external(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file
 *     return ef.write(ef.file, data, size)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ef);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":333
 * 
 * 
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file
 *     return ef.read(ef.file, data, size)
 */

static int __pyx_f_5larch_6pickle_read_external(PyObject *__pyx_v_unpickler, void *__pyx_v_data, size_t __pyx_v_size) {
  struct __pyx_obj_5larch_6pickle_ExternFileLike *__pyx_v_ef = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("read_external", 0);

  /* "larch\pickle.pyx":334
 * 
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file             # <<<<<<<<<<<<<<
 *     return ef.read(ef.file, data, size)
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_unpickler)->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ef = ((struct __pyx_obj_5larch_6pickle_ExternFileLike *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":335
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file
 *     return ef.read(ef.file, data, size)             # <<<<<<<<<<<<<<
 * 
 * class PickleError(Exception):
 */
  __pyx_t_1 = __pyx_v_ef->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_r = __pyx_v_ef->read(__pyx_t_1, __pyx_v_data, __pyx_v_size);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":333
 * 
 * 
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file
 *     return ef.read(ef.file, data, size)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ef);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":350
 * # ----------------------------------
 * 
 * cdef inline void reraise():             # <<<<<<<<<<<<<<
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 */

static CYTHON_INLINE void __pyx_f_5larch_6pickle_reraise(void) {
  PyObject *__pyx_v_type_ = NULL;
  PyObject *__pyx_v_exc = NULL;
  PyObject *__pyx_v_traceback = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reraise", 0);

  /* "larch\pickle.pyx":351
 * 
 * cdef inline void reraise():
 *     type_, exc, traceback = sys.exc_info()             # <<<<<<<<<<<<<<
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 *     throw_python_error()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exc_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_type_ = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_exc = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_traceback = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "larch\pickle.pyx":352
 * cdef inline void reraise():
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)             # <<<<<<<<<<<<<<
 *     throw_python_error()
 * 
 */
  PyErr_Restore(((PyObject *)__pyx_v_type_), ((PyObject *)__pyx_v_exc), ((PyObject *)__pyx_v_traceback));

  /* "larch\pickle.pyx":353
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 *     throw_python_error()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  throw_python_error();

  /* "larch\pickle.pyx":350
 * # ----------------------------------
 * 
 * cdef inline void reraise():             # <<<<<<<<<<<<<<
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("larch.pickle.reraise", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XDECREF(__pyx_v_exc);
  __Pyx_XDECREF(__pyx_v_traceback);
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":356
 * 
 * 
 * cdef void save_long(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     # see original _pickle.c
 *     cdef:
 */

static void __pyx_f_5larch_6pickle_save_long(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  size_t __pyx_v_nbytes;
  size_t __pyx_v_nbits;
  int __pyx_v_sign;
  PyObject *__pyx_v_tmp = 0;
  char *__pyx_v_data;
  long __pyx_v_v;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_long", 0);

  /* "larch\pickle.pyx":359
 *     # see original _pickle.c
 *     cdef:
 *         size_t nbytes, nbits = _PyLong_NumBits(o)             # <<<<<<<<<<<<<<
 *         int sign = _PyLong_Sign(o)
 *         bytes tmp
 */
  __pyx_v_nbits = _PyLong_NumBits(__pyx_v_o);

  /* "larch\pickle.pyx":360
 *     cdef:
 *         size_t nbytes, nbits = _PyLong_NumBits(o)
 *         int sign = _PyLong_Sign(o)             # <<<<<<<<<<<<<<
 *         bytes tmp
 *         char* data
 */
  __pyx_v_sign = _PyLong_Sign(__pyx_v_o);

  /* "larch\pickle.pyx":365
 *         long v
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         v = PyLong_AsLong(o)
 *     except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":366
 * 
 *     try:
 *         v = PyLong_AsLong(o)             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
      __pyx_t_4 = PyLong_AsLong(__pyx_v_o); if (unlikely(__pyx_t_4 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_v_v = __pyx_t_4;
    }
    /*else:*/ {

      /* "larch\pickle.pyx":370
 *         pass
 *     else:
 *         p.pack_int(v)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      __pyx_v_p->pack_int(__pyx_v_v);

      /* "larch\pickle.pyx":371
 *     else:
 *         p.pack_int(v)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if p.save_ref(o): return
 */
      goto __pyx_L6_except_return;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "larch\pickle.pyx":367
 *     try:
 *         v = PyLong_AsLong(o)
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 *     else:
 */
    /*except:*/ {
      PyErr_Restore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":373
 *         return
 * 
 *     if p.save_ref(o): return             # <<<<<<<<<<<<<<
 * 
 *     nbytes = (nbits >> 3) + 1
 */
  __pyx_t_5 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_5) {
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":375
 *     if p.save_ref(o): return
 * 
 *     nbytes = (nbits >> 3) + 1             # <<<<<<<<<<<<<<
 *     if nbytes > 0x7fffffffL:
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 */
  __pyx_v_nbytes = ((__pyx_v_nbits >> 3) + 1);

  /* "larch\pickle.pyx":376
 * 
 *     nbytes = (nbits >> 3) + 1
 *     if nbytes > 0x7fffffffL:             # <<<<<<<<<<<<<<
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 *         throw_python_error()
 */
  __pyx_t_5 = ((__pyx_v_nbytes > 0x7fffffffL) != 0);
  if (__pyx_t_5) {

    /* "larch\pickle.pyx":377
 *     nbytes = (nbits >> 3) + 1
 *     if nbytes > 0x7fffffffL:
 *         PyErr_SetString(OverflowError, "long too large to pickle")             # <<<<<<<<<<<<<<
 *         throw_python_error()
 * 
 */
    PyErr_SetString(__pyx_builtin_OverflowError, __pyx_k_long_too_large_to_pickle);

    /* "larch\pickle.pyx":378
 *     if nbytes > 0x7fffffffL:
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 *         throw_python_error()             # <<<<<<<<<<<<<<
 * 
 *     tmp = PyBytes_FromStringAndSize(NULL, nbytes)
 */
    throw_python_error();
    goto __pyx_L12;
  }
  __pyx_L12:;

  /* "larch\pickle.pyx":380
 *         throw_python_error()
 * 
 *     tmp = PyBytes_FromStringAndSize(NULL, nbytes)             # <<<<<<<<<<<<<<
 *     data = Bytes_AS_STRING(tmp)
 * 
 */
  __pyx_t_6 = PyBytes_FromStringAndSize(NULL, __pyx_v_nbytes); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_tmp = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "larch\pickle.pyx":381
 * 
 *     tmp = PyBytes_FromStringAndSize(NULL, nbytes)
 *     data = Bytes_AS_STRING(tmp)             # <<<<<<<<<<<<<<
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:
 */
  __pyx_v_data = PyBytes_AS_STRING(__pyx_v_tmp);

  /* "larch\pickle.pyx":383
 *     data = Bytes_AS_STRING(tmp)
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:             # <<<<<<<<<<<<<<
 *         throw_python_error()
 * 
 */
  __pyx_t_5 = ((_PyLong_AsByteArray(((PyLongObject *)__pyx_v_o), ((unsigned char *)__pyx_v_data), __pyx_v_nbytes, 1, 1) < 0) != 0);
  if (__pyx_t_5) {

    /* "larch\pickle.pyx":384
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:
 *         throw_python_error()             # <<<<<<<<<<<<<<
 * 
 *     if (sign < 0 and nbytes > 1
 */
    throw_python_error();
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "larch\pickle.pyx":386
 *         throw_python_error()
 * 
 *     if (sign < 0 and nbytes > 1             # <<<<<<<<<<<<<<
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):
 *         nbytes -= 1
 */
  __pyx_t_5 = ((__pyx_v_sign < 0) != 0);
  if (__pyx_t_5) {

    /* "larch\pickle.pyx":387
 * 
 *     if (sign < 0 and nbytes > 1
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):             # <<<<<<<<<<<<<<
 *         nbytes -= 1
 * 
 */
    __pyx_t_7 = ((__pyx_v_nbytes > 1) != 0);
    if (__pyx_t_7) {
      __pyx_t_8 = (((__pyx_v_data[(__pyx_v_nbytes - 1)]) == 0xff) != 0);
      if (__pyx_t_8) {
        __pyx_t_9 = ((((__pyx_v_data[(__pyx_v_nbytes - 2)]) & 0x80) != 0) != 0);
        __pyx_t_10 = __pyx_t_9;
      } else {
        __pyx_t_10 = __pyx_t_8;
      }
      __pyx_t_8 = __pyx_t_10;
    } else {
      __pyx_t_8 = __pyx_t_7;
    }
    __pyx_t_7 = __pyx_t_8;
  } else {
    __pyx_t_7 = __pyx_t_5;
  }
  if (__pyx_t_7) {

    /* "larch\pickle.pyx":388
 *     if (sign < 0 and nbytes > 1
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):
 *         nbytes -= 1             # <<<<<<<<<<<<<<
 * 
 *     p.pack_ext(LONG, nbytes)
 */
    __pyx_v_nbytes = (__pyx_v_nbytes - 1);
    goto __pyx_L14;
  }
  __pyx_L14:;

  /* "larch\pickle.pyx":390
 *         nbytes -= 1
 * 
 *     p.pack_ext(LONG, nbytes)             # <<<<<<<<<<<<<<
 *     p.write(<char*>data, nbytes)
 * 
 */
  __pyx_v_p->pack_ext(LONG, __pyx_v_nbytes);

  /* "larch\pickle.pyx":391
 * 
 *     p.pack_ext(LONG, nbytes)
 *     p.write(<char*>data, nbytes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_p->write(((char *)__pyx_v_data), __pyx_v_nbytes);

  /* "larch\pickle.pyx":356
 * 
 * 
 * cdef void save_long(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     # see original _pickle.c
 *     cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("larch.pickle.save_long", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":394
 * 
 * 
 * cdef inline int _save_global(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     (<Pickler>p.pickler).pack_import1(GLOBAL, o)
 * 
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_global(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_global", 0);

  /* "larch\pickle.pyx":395
 * 
 * cdef inline int _save_global(Packer* p, object o) except -1:
 *     (<Pickler>p.pickler).pack_import1(GLOBAL, o)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import1(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler), GLOBAL, __pyx_v_o); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":394
 * 
 * 
 * cdef inline int _save_global(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     (<Pickler>p.pickler).pack_import1(GLOBAL, o)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle._save_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":398
 * 
 * 
 * cdef void save_global(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_global(p, o)
 */

static void __pyx_f_5larch_6pickle_save_global(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_global", 0);

  /* "larch\pickle.pyx":399
 * 
 * cdef void save_global(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_global(p, o)
 *     except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":400
 * cdef void save_global(Packer* p, object o):
 *     try:
 *         _save_global(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle__save_global(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "larch\pickle.pyx":401
 *     try:
 *         _save_global(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.save_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch\pickle.pyx":402
 *         _save_global(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_reraise();
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":398
 * 
 * 
 * cdef void save_global(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_global(p, o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.save_global", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":405
 * 
 * 
 * cdef inline int __save_oldstyle(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         init_args = o.__getinitargs__
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle___save_oldstyle(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_init_args = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__save_oldstyle", 0);

  /* "larch\pickle.pyx":406
 * 
 * cdef inline int __save_oldstyle(Packer* p, object o) except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         init_args = o.__getinitargs__
 *     except AttributeError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":407
 * cdef inline int __save_oldstyle(Packer* p, object o) except -1:
 *     try:
 *         init_args = o.__getinitargs__             # <<<<<<<<<<<<<<
 *     except AttributeError:
 *         (<Pickler>p.pickler).pack_import1(OLD_STYLE, o.__class__)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_getinitargs); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_init_args = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    /*else:*/ {

      /* "larch\pickle.pyx":412
 *         save_dict(p, o.__dict__)
 *     else:
 *         (<Pickler>p.pickler).pack_import1(INIT_ARGS, o.__class__)             # <<<<<<<<<<<<<<
 *         p.dump(init_args())
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_class); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import1(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler), INIT_ARGS, __pyx_t_4); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "larch\pickle.pyx":413
 *     else:
 *         (<Pickler>p.pickler).pack_import1(INIT_ARGS, o.__class__)
 *         p.dump(init_args())             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = PyObject_Call(__pyx_v_init_args, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_p->dump(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "larch\pickle.pyx":408
 *     try:
 *         init_args = o.__getinitargs__
 *     except AttributeError:             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import1(OLD_STYLE, o.__class__)
 *         save_dict(p, o.__dict__)
 */
    __pyx_t_5 = PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("larch.pickle.__save_oldstyle", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch\pickle.pyx":409
 *         init_args = o.__getinitargs__
 *     except AttributeError:
 *         (<Pickler>p.pickler).pack_import1(OLD_STYLE, o.__class__)             # <<<<<<<<<<<<<<
 *         save_dict(p, o.__dict__)
 *     else:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_class); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import1(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler), OLD_STYLE, __pyx_t_8); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "larch\pickle.pyx":410
 *     except AttributeError:
 *         (<Pickler>p.pickler).pack_import1(OLD_STYLE, o.__class__)
 *         save_dict(p, o.__dict__)             # <<<<<<<<<<<<<<
 *     else:
 *         (<Pickler>p.pickler).pack_import1(INIT_ARGS, o.__class__)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      save_dict(__pyx_v_p, __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":405
 * 
 * 
 * cdef inline int __save_oldstyle(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         init_args = o.__getinitargs__
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("larch.pickle.__save_oldstyle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_init_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":416
 * 
 * 
 * cdef void _save_oldstyle(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         __save_oldstyle(p, o)
 */

static void __pyx_f_5larch_6pickle__save_oldstyle(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_oldstyle", 0);

  /* "larch\pickle.pyx":417
 * 
 * cdef void _save_oldstyle(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         __save_oldstyle(p, o)
 *     except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":418
 * cdef void _save_oldstyle(Packer* p, object o):
 *     try:
 *         __save_oldstyle(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle___save_oldstyle(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "larch\pickle.pyx":419
 *     try:
 *         __save_oldstyle(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle._save_oldstyle", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch\pickle.pyx":420
 *         __save_oldstyle(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_reraise();
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":416
 * 
 * 
 * cdef void _save_oldstyle(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         __save_oldstyle(p, o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle._save_oldstyle", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":423
 * 
 * 
 * cdef void save_oldstyle(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return
 *     _save_oldstyle(p, o)
 */

static void __pyx_f_5larch_6pickle_save_oldstyle(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("save_oldstyle", 0);

  /* "larch\pickle.pyx":424
 * 
 * cdef void save_oldstyle(Packer* p, object o):
 *     if p.save_ref(o): return             # <<<<<<<<<<<<<<
 *     _save_oldstyle(p, o)
 * 
 */
  __pyx_t_1 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_1) {
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":425
 * cdef void save_oldstyle(Packer* p, object o):
 *     if p.save_ref(o): return
 *     _save_oldstyle(p, o)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_5larch_6pickle__save_oldstyle(__pyx_v_p, __pyx_v_o);

  /* "larch\pickle.pyx":423
 * 
 * 
 * cdef void save_oldstyle(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return
 *     _save_oldstyle(p, o)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":428
 * 
 * 
 * cdef inline void save_object_state(Packer* p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t size
 */

static CYTHON_INLINE void __pyx_f_5larch_6pickle_save_object_state(Packer *__pyx_v_p, PyObject *__pyx_v_state) {
  size_t __pyx_v_size;
  PyObject *__pyx_v_tmp = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_object_state", 0);

  /* "larch\pickle.pyx":433
 *         object tmp
 * 
 *     size = PyTuple_GET_SIZE(state)             # <<<<<<<<<<<<<<
 *     if size > 2:
 *         tmp = <object>PyTuple_GET_ITEM(state, 2)
 */
  __pyx_v_size = PyTuple_GET_SIZE(__pyx_v_state);

  /* "larch\pickle.pyx":434
 * 
 *     size = PyTuple_GET_SIZE(state)
 *     if size > 2:             # <<<<<<<<<<<<<<
 *         tmp = <object>PyTuple_GET_ITEM(state, 2)
 *         p.dump(tmp)
 */
  __pyx_t_1 = ((__pyx_v_size > 2) != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":435
 *     size = PyTuple_GET_SIZE(state)
 *     if size > 2:
 *         tmp = <object>PyTuple_GET_ITEM(state, 2)             # <<<<<<<<<<<<<<
 *         p.dump(tmp)
 *     else:
 */
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_state, 2);
    __pyx_t_3 = ((PyObject *)__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_tmp = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":436
 *     if size > 2:
 *         tmp = <object>PyTuple_GET_ITEM(state, 2)
 *         p.dump(tmp)             # <<<<<<<<<<<<<<
 *     else:
 *         p.pack_nil()
 */
    __pyx_v_p->dump(__pyx_v_tmp);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "larch\pickle.pyx":438
 *         p.dump(tmp)
 *     else:
 *         p.pack_nil()             # <<<<<<<<<<<<<<
 * 
 *     if size > 3:
 */
    __pyx_v_p->pack_nil();
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":440
 *         p.pack_nil()
 * 
 *     if size > 3:             # <<<<<<<<<<<<<<
 *         tmp = <object>PyTuple_GET_ITEM(state, 3)
 *         if tmp is not None:
 */
  __pyx_t_1 = ((__pyx_v_size > 3) != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":441
 * 
 *     if size > 3:
 *         tmp = <object>PyTuple_GET_ITEM(state, 3)             # <<<<<<<<<<<<<<
 *         if tmp is not None:
 *             for i in tmp:
 */
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_state, 3);
    __pyx_t_3 = ((PyObject *)__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":442
 *     if size > 3:
 *         tmp = <object>PyTuple_GET_ITEM(state, 3)
 *         if tmp is not None:             # <<<<<<<<<<<<<<
 *             for i in tmp:
 *                 p.dump(i)
 */
    __pyx_t_1 = (__pyx_v_tmp != Py_None);
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (__pyx_t_4) {

      /* "larch\pickle.pyx":443
 *         tmp = <object>PyTuple_GET_ITEM(state, 3)
 *         if tmp is not None:
 *             for i in tmp:             # <<<<<<<<<<<<<<
 *                 p.dump(i)
 * 
 */
      if (PyList_CheckExact(__pyx_v_tmp) || PyTuple_CheckExact(__pyx_v_tmp)) {
        __pyx_t_3 = __pyx_v_tmp; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_tmp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
      }
      for (;;) {
        if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_3)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_3)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_3);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "larch\pickle.pyx":444
 *         if tmp is not None:
 *             for i in tmp:
 *                 p.dump(i)             # <<<<<<<<<<<<<<
 * 
 *     p.pack_ext(END_OBJECT_ITEMS, 0)
 */
        __pyx_v_p->dump(__pyx_v_i);
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "larch\pickle.pyx":446
 *                 p.dump(i)
 * 
 *     p.pack_ext(END_OBJECT_ITEMS, 0)             # <<<<<<<<<<<<<<
 * 
 *     if size > 4:
 */
  __pyx_v_p->pack_ext(END_OBJECT_ITEMS, 0);

  /* "larch\pickle.pyx":448
 *     p.pack_ext(END_OBJECT_ITEMS, 0)
 * 
 *     if size > 4:             # <<<<<<<<<<<<<<
 *         tmp = <object>PyTuple_GET_ITEM(state, 4)
 *         if tmp is not None:
 */
  __pyx_t_4 = ((__pyx_v_size > 4) != 0);
  if (__pyx_t_4) {

    /* "larch\pickle.pyx":449
 * 
 *     if size > 4:
 *         tmp = <object>PyTuple_GET_ITEM(state, 4)             # <<<<<<<<<<<<<<
 *         if tmp is not None:
 *             for k, v in tmp:
 */
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_state, 4);
    __pyx_t_3 = ((PyObject *)__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":450
 *     if size > 4:
 *         tmp = <object>PyTuple_GET_ITEM(state, 4)
 *         if tmp is not None:             # <<<<<<<<<<<<<<
 *             for k, v in tmp:
 *                 p.dump(k)
 */
    __pyx_t_4 = (__pyx_v_tmp != Py_None);
    __pyx_t_1 = (__pyx_t_4 != 0);
    if (__pyx_t_1) {

      /* "larch\pickle.pyx":451
 *         tmp = <object>PyTuple_GET_ITEM(state, 4)
 *         if tmp is not None:
 *             for k, v in tmp:             # <<<<<<<<<<<<<<
 *                 p.dump(k)
 *                 p.dump(v)
 */
      if (PyList_CheckExact(__pyx_v_tmp) || PyTuple_CheckExact(__pyx_v_tmp)) {
        __pyx_t_3 = __pyx_v_tmp; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_tmp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
      }
      for (;;) {
        if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_3)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_3)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_3);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
          PyObject* sequence = __pyx_t_7;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          #endif
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L12_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L12_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_9);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L13_unpacking_done;
          __pyx_L12_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_L13_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "larch\pickle.pyx":452
 *         if tmp is not None:
 *             for k, v in tmp:
 *                 p.dump(k)             # <<<<<<<<<<<<<<
 *                 p.dump(v)
 * 
 */
        __pyx_v_p->dump(__pyx_v_k);

        /* "larch\pickle.pyx":453
 *             for k, v in tmp:
 *                 p.dump(k)
 *                 p.dump(v)             # <<<<<<<<<<<<<<
 * 
 *     p.pack_ext(END_OBJECT_ITEMS, 0)
 */
        __pyx_v_p->dump(__pyx_v_v);
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L9;
    }
    __pyx_L9:;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "larch\pickle.pyx":455
 *                 p.dump(v)
 * 
 *     p.pack_ext(END_OBJECT_ITEMS, 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_p->pack_ext(END_OBJECT_ITEMS, 0);

  /* "larch\pickle.pyx":428
 * 
 * 
 * cdef inline void save_object_state(Packer* p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("larch.pickle.save_object_state", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":458
 * 
 * 
 * cdef inline int _save_reduced(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_reduced(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_reduced", 0);

  /* "larch\pickle.pyx":459
 * 
 * cdef inline int _save_reduced(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0             # <<<<<<<<<<<<<<
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 *     p.pack_ext(OBJECT, 1)
 */
  __pyx_t_1 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":460
 * cdef inline int _save_reduced(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)             # <<<<<<<<<<<<<<
 *     p.pack_ext(OBJECT, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->protocol); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_state = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "larch\pickle.pyx":461
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 *     p.pack_ext(OBJECT, 1)             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
  __pyx_v_p->pack_ext(OBJECT, 1);

  /* "larch\pickle.pyx":462
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 *     p.pack_ext(OBJECT, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)
 */
  __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v_state, 0);
  __pyx_v_p->dump(((PyObject *)__pyx_t_5));

  /* "larch\pickle.pyx":463
 *     p.pack_ext(OBJECT, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 *     save_object_state(p, state)
 * 
 */
  __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v_state, 1);
  __pyx_v_p->dump(((PyObject *)__pyx_t_5));

  /* "larch\pickle.pyx":464
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_5larch_6pickle_save_object_state(__pyx_v_p, ((PyObject*)__pyx_v_state));

  /* "larch\pickle.pyx":458
 * 
 * 
 * cdef inline int _save_reduced(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle._save_reduced", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":467
 * 
 * 
 * cdef void save_reduced(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_reduced(p,  o)
 */

static void __pyx_f_5larch_6pickle_save_reduced(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_reduced", 0);

  /* "larch\pickle.pyx":468
 * 
 * cdef void save_reduced(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_reduced(p,  o)
 *     except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":469
 * cdef void save_reduced(Packer* p, object o):
 *     try:
 *         _save_reduced(p,  o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle__save_reduced(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "larch\pickle.pyx":470
 *     try:
 *         _save_reduced(p,  o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.save_reduced", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch\pickle.pyx":471
 *         _save_reduced(p,  o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_reraise();
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":467
 * 
 * 
 * cdef void save_reduced(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_reduced(p,  o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.save_reduced", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":474
 * 
 * 
 * cdef inline int _save_new_object(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_new_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_new_object", 0);

  /* "larch\pickle.pyx":475
 * 
 * cdef inline int _save_new_object(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0             # <<<<<<<<<<<<<<
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 *     p.pack_ext(OBJECT_NEW, 1)
 */
  __pyx_t_1 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":476
 * cdef inline int _save_new_object(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)             # <<<<<<<<<<<<<<
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->protocol); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_state = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "larch\pickle.pyx":477
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 *     p.pack_ext(OBJECT_NEW, 1)             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)
 */
  __pyx_v_p->pack_ext(OBJECT_NEW, 1);

  /* "larch\pickle.pyx":478
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 *     save_object_state(p, state)
 * 
 */
  __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v_state, 1);
  __pyx_v_p->dump(((PyObject *)__pyx_t_5));

  /* "larch\pickle.pyx":479
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_5larch_6pickle_save_object_state(__pyx_v_p, ((PyObject*)__pyx_v_state));

  /* "larch\pickle.pyx":474
 * 
 * 
 * cdef inline int _save_new_object(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__((<Pickler>p.pickler).protocol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle._save_new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":482
 * 
 * 
 * cdef void save_new_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_new_object(p, o)
 */

static void __pyx_f_5larch_6pickle_save_new_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_new_object", 0);

  /* "larch\pickle.pyx":483
 * 
 * cdef void save_new_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_new_object(p, o)
 *     except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":484
 * cdef void save_new_object(Packer* p, object o):
 *     try:
 *         _save_new_object(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle__save_new_object(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "larch\pickle.pyx":485
 *     try:
 *         _save_new_object(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.save_new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch\pickle.pyx":486
 *         _save_new_object(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_reraise();
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":482
 * 
 * 
 * cdef void save_new_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_new_object(p, o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.save_new_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":489
 * 
 * 
 * cdef inline int _save_object(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         PyObject *reduce_func
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle__save_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_reduce_func;
  pack_t __pyx_v_next_save_func;
  PyObject *__pyx_v_do_reduce = NULL;
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_object", 0);

  /* "larch\pickle.pyx":492
 *     cdef:
 *         PyObject *reduce_func
 *         pack_t next_save_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     if p.save_ref(o) > 0: return 0
 */
  __pyx_v_next_save_func = NULL;

  /* "larch\pickle.pyx":494
 *         pack_t next_save_func = NULL
 * 
 *     if p.save_ref(o) > 0: return 0             # <<<<<<<<<<<<<<
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 */
  __pyx_t_1 = ((__pyx_v_p->save_ref(__pyx_v_o) > 0) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":496
 *     if p.save_ref(o) > 0: return 0
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))             # <<<<<<<<<<<<<<
 *     if reduce_func is NULL:
 *         try:
 */
  __pyx_t_2 = ((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->dispatch_table;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_reduce_func = PyDict_GetItem(__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_o)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":497
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 *     if reduce_func is NULL:             # <<<<<<<<<<<<<<
 *         try:
 *             do_reduce = o.__reduce_ex__
 */
  __pyx_t_1 = ((__pyx_v_reduce_func == NULL) != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":498
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 *     if reduce_func is NULL:
 *         try:             # <<<<<<<<<<<<<<
 *             do_reduce = o.__reduce_ex__
 *         except AttributeError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "larch\pickle.pyx":499
 *     if reduce_func is NULL:
 *         try:
 *             do_reduce = o.__reduce_ex__             # <<<<<<<<<<<<<<
 *         except AttributeError:
 *             #an old style class
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_do_reduce = __pyx_t_2;
        __pyx_t_2 = 0;
      }
      /*else:*/ {

        /* "larch\pickle.pyx":506
 *             return 0
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 state = do_reduce((<Pickler>p.pickler).protocol)
 *             except TypeError:
 */
        {
          __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          /*try:*/ {

            /* "larch\pickle.pyx":507
 *         else:
 *             try:
 *                 state = do_reduce((<Pickler>p.pickler).protocol)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 #a meta class
 */
            __pyx_t_2 = __Pyx_PyInt_From_uint8_t(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->protocol); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
            __Pyx_GOTREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = PyObject_Call(__pyx_v_do_reduce, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_v_state = __pyx_t_2;
            __pyx_t_2 = 0;
          }
          /*else:*/ {

            /* "larch\pickle.pyx":513
 *                 return 0
 *             else:
 *                 if not isinstance(state, bytes):             # <<<<<<<<<<<<<<
 *                     next_save_func = save_reduced
 *     else:
 */
            __pyx_t_1 = PyBytes_Check(__pyx_v_state); 
            __pyx_t_10 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_10) {

              /* "larch\pickle.pyx":514
 *             else:
 *                 if not isinstance(state, bytes):
 *                     next_save_func = save_reduced             # <<<<<<<<<<<<<<
 *     else:
 *         state = (<object>reduce_func)(o)
 */
              __pyx_v_next_save_func = __pyx_f_5larch_6pickle_save_reduced;
              goto __pyx_L21;
            }
            __pyx_L21:;
          }
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L20_try_end;
          __pyx_L13_error:;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "larch\pickle.pyx":508
 *             try:
 *                 state = do_reduce((<Pickler>p.pickler).protocol)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 #a meta class
 *                 save_global(p, o);
 */
          __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
          if (__pyx_t_11) {
            __Pyx_AddTraceback("larch.pickle._save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_9, &__pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GOTREF(__pyx_t_12);

            /* "larch\pickle.pyx":510
 *             except TypeError:
 *                 #a meta class
 *                 save_global(p, o);             # <<<<<<<<<<<<<<
 *                 return 0
 *             else:
 */
            __pyx_f_5larch_6pickle_save_global(__pyx_v_p, __pyx_v_o);

            /* "larch\pickle.pyx":511
 *                 #a meta class
 *                 save_global(p, o);
 *                 return 0             # <<<<<<<<<<<<<<
 *             else:
 *                 if not isinstance(state, bytes):
 */
            __pyx_r = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L16_except_return;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L14_exception_handled;
          }
          goto __pyx_L15_except_error;
          __pyx_L15_except_error:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          goto __pyx_L7_except_error;
          __pyx_L16_except_return:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          goto __pyx_L8_except_return;
          __pyx_L14_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          __pyx_L20_try_end:;
        }
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "larch\pickle.pyx":500
 *         try:
 *             do_reduce = o.__reduce_ex__
 *         except AttributeError:             # <<<<<<<<<<<<<<
 *             #an old style class
 *             _save_oldstyle(p, o)
 */
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("larch.pickle._save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_9, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_2);

        /* "larch\pickle.pyx":502
 *         except AttributeError:
 *             #an old style class
 *             _save_oldstyle(p, o)             # <<<<<<<<<<<<<<
 *             register_type(o, save_oldstyle)
 *             return 0
 */
        __pyx_f_5larch_6pickle__save_oldstyle(__pyx_v_p, __pyx_v_o);

        /* "larch\pickle.pyx":503
 *             #an old style class
 *             _save_oldstyle(p, o)
 *             register_type(o, save_oldstyle)             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
 */
        __pyx_f_5larch_6pickle_register_type(__pyx_v_o, __pyx_f_5larch_6pickle_save_oldstyle);

        /* "larch\pickle.pyx":504
 *             _save_oldstyle(p, o)
 *             register_type(o, save_oldstyle)
 *             return 0             # <<<<<<<<<<<<<<
 *         else:
 *             try:
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L8_except_return;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L8_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L12_try_end:;
    }
    goto __pyx_L4;
  }
  /*else*/ {

    /* "larch\pickle.pyx":516
 *                     next_save_func = save_reduced
 *     else:
 *         state = (<object>reduce_func)(o)             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(state, str):
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_o);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_o);
    __Pyx_GIVEREF(__pyx_v_o);
    __pyx_t_9 = PyObject_Call(((PyObject *)__pyx_v_reduce_func), __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_state = __pyx_t_9;
    __pyx_t_9 = 0;
  }
  __pyx_L4:;

  /* "larch\pickle.pyx":518
 *         state = (<object>reduce_func)(o)
 * 
 *     if isinstance(state, str):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  __pyx_t_10 = PyString_Check(__pyx_v_state); 
  __pyx_t_1 = (__pyx_t_10 != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":519
 * 
 *     if isinstance(state, str):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import2(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_p->pickler), SINGLETON, __pyx_t_9, __pyx_v_state); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "larch\pickle.pyx":520
 *     if isinstance(state, str):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     if <str>((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":522
 *         return 0
 * 
 *     if <str>((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":             # <<<<<<<<<<<<<<
 *         p.pack_ext(OBJECT_NEW, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
  __pyx_t_13 = PyTuple_GET_ITEM(__pyx_v_state, 0);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_t_13), __pyx_n_s_name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_newobj, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_10 = (__pyx_t_1 != 0);
  if (__pyx_t_10) {

    /* "larch\pickle.pyx":523
 * 
 *     if <str>((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":
 *         p.pack_ext(OBJECT_NEW, 1)             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *         if next_save_func:
 */
    __pyx_v_p->pack_ext(OBJECT_NEW, 1);

    /* "larch\pickle.pyx":524
 *     if <str>((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":
 *         p.pack_ext(OBJECT_NEW, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 *         if next_save_func:
 *             next_save_func = save_new_object
 */
    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_v_state, 1);
    __pyx_v_p->dump(((PyObject *)__pyx_t_13));

    /* "larch\pickle.pyx":525
 *         p.pack_ext(OBJECT_NEW, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *         if next_save_func:             # <<<<<<<<<<<<<<
 *             next_save_func = save_new_object
 *     else:
 */
    __pyx_t_10 = (__pyx_v_next_save_func != 0);
    if (__pyx_t_10) {

      /* "larch\pickle.pyx":526
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *         if next_save_func:
 *             next_save_func = save_new_object             # <<<<<<<<<<<<<<
 *     else:
 *         p.pack_ext(OBJECT, 1)
 */
      __pyx_v_next_save_func = __pyx_f_5larch_6pickle_save_new_object;
      goto __pyx_L28;
    }
    __pyx_L28:;
    goto __pyx_L27;
  }
  /*else*/ {

    /* "larch\pickle.pyx":528
 *             next_save_func = save_new_object
 *     else:
 *         p.pack_ext(OBJECT, 1)             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
    __pyx_v_p->pack_ext(OBJECT, 1);

    /* "larch\pickle.pyx":529
 *     else:
 *         p.pack_ext(OBJECT, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 0))             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 * 
 */
    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_v_state, 0);
    __pyx_v_p->dump(((PyObject *)__pyx_t_13));

    /* "larch\pickle.pyx":530
 *         p.pack_ext(OBJECT, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 * 
 *     if next_save_func:
 */
    __pyx_t_13 = PyTuple_GET_ITEM(__pyx_v_state, 1);
    __pyx_v_p->dump(((PyObject *)__pyx_t_13));
  }
  __pyx_L27:;

  /* "larch\pickle.pyx":532
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 * 
 *     if next_save_func:             # <<<<<<<<<<<<<<
 *         register_type(o, next_save_func)
 * 
 */
  __pyx_t_10 = (__pyx_v_next_save_func != 0);
  if (__pyx_t_10) {

    /* "larch\pickle.pyx":533
 * 
 *     if next_save_func:
 *         register_type(o, next_save_func)             # <<<<<<<<<<<<<<
 * 
 *     save_object_state(p, state)
 */
    __pyx_f_5larch_6pickle_register_type(__pyx_v_o, __pyx_v_next_save_func);
    goto __pyx_L29;
  }
  __pyx_L29:;

  /* "larch\pickle.pyx":535
 *         register_type(o, next_save_func)
 * 
 *     save_object_state(p, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_f_5larch_6pickle_save_object_state(__pyx_v_p, ((PyObject*)__pyx_v_state));

  /* "larch\pickle.pyx":489
 * 
 * 
 * cdef inline int _save_object(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         PyObject *reduce_func
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("larch.pickle._save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_do_reduce);
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":538
 * 
 * 
 * cdef void save_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_object(p, o)
 */

static void __pyx_f_5larch_6pickle_save_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_object", 0);

  /* "larch\pickle.pyx":539
 * 
 * cdef void save_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_object(p, o)
 *     except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch\pickle.pyx":540
 * cdef void save_object(Packer* p, object o):
 *     try:
 *         _save_object(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle__save_object(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "larch\pickle.pyx":541
 *     try:
 *         _save_object(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch\pickle.pyx":542
 *         _save_object(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * save_object_ptr = save_object
 */
      __pyx_f_5larch_6pickle_reraise();
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "larch\pickle.pyx":538
 * 
 * 
 * cdef void save_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_object(p, o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.save_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":547
 * 
 * 
 * cdef void save_impossible(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     IF PY_MAJOR_VERSION > 2:
 *         cdef:
 */

static void __pyx_f_5larch_6pickle_save_impossible(CYTHON_UNUSED Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_v_bmsg = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_impossible", 0);

  /* "larch\pickle.pyx":550
 *     IF PY_MAJOR_VERSION > 2:
 *         cdef:
 *             unicode msg = "Cannot save {!r}".format(o)             # <<<<<<<<<<<<<<
 *             bytes bmsg = msg.encode()
 *     ELSE:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_save_r, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_msg = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "larch\pickle.pyx":551
 *         cdef:
 *             unicode msg = "Cannot save {!r}".format(o)
 *             bytes bmsg = msg.encode()             # <<<<<<<<<<<<<<
 *     ELSE:
 *         cdef:
 */
  if (unlikely(__pyx_v_msg == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = PyUnicode_AsEncodedString(__pyx_v_msg, NULL, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyBytes_CheckExact(__pyx_t_3))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_bmsg = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "larch\pickle.pyx":556
 *             bytes bmsg = "Cannot save {!r}".format(o)
 * 
 *     PyErr_SetString(PicklingError, bmsg)             # <<<<<<<<<<<<<<
 *     throw_python_error()
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PicklingError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_bmsg); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyErr_SetString(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "larch\pickle.pyx":557
 * 
 *     PyErr_SetString(PicklingError, bmsg)
 *     throw_python_error()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  throw_python_error();

  /* "larch\pickle.pyx":547
 * 
 * 
 * cdef void save_impossible(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     IF PY_MAJOR_VERSION > 2:
 *         cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("larch.pickle.save_impossible", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_bmsg);
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":560
 * 
 * 
 * cdef void register_type(o, pack_t saver):             # <<<<<<<<<<<<<<
 *     pickle_registry.register_type(type(o), saver)
 * 
 */

static void __pyx_f_5larch_6pickle_register_type(PyObject *__pyx_v_o, pack_t __pyx_v_saver) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register_type", 0);

  /* "larch\pickle.pyx":561
 * 
 * cdef void register_type(o, pack_t saver):
 *     pickle_registry.register_type(type(o), saver)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  pickle_registry.register_type(((PyObject *)Py_TYPE(__pyx_v_o)), __pyx_v_saver);

  /* "larch\pickle.pyx":560
 * 
 * 
 * cdef void register_type(o, pack_t saver):             # <<<<<<<<<<<<<<
 *     pickle_registry.register_type(type(o), saver)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":577
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 * 
 * def inner_func(): pass             # <<<<<<<<<<<<<<
 * register_type(inner_func, save_global)
 * del inner_func
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_1inner_func(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5larch_6pickle_1inner_func = {__Pyx_NAMESTR("inner_func"), (PyCFunction)__pyx_pw_5larch_6pickle_1inner_func, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5larch_6pickle_1inner_func(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inner_func (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_inner_func(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_inner_func(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inner_func", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":601
 * ctypedef int (*pack_import_names_t)(Packer* p, module, name) except -1
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *     p.dump(module)
 *     p.dump(name)
 */

static int __pyx_f_5larch_6pickle_simple_pack(Packer *__pyx_v_p, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simple_pack", 0);

  /* "larch\pickle.pyx":602
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:
 *     p.dump(module)             # <<<<<<<<<<<<<<
 *     p.dump(name)
 * 
 */
  __pyx_v_p->dump(__pyx_v_module);

  /* "larch\pickle.pyx":603
 * cdef int simple_pack(Packer* p, module, name) except -1:
 *     p.dump(module)
 *     p.dump(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_p->dump(__pyx_v_name);

  /* "larch\pickle.pyx":601
 * ctypedef int (*pack_import_names_t)(Packer* p, module, name) except -1
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *     p.dump(module)
 *     p.dump(name)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":607
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef int mapped_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 */

static int __pyx_f_5larch_6pickle_mapped_pack(Packer *__pyx_v_p, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mapped_pack", 0);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);

  /* "larch\pickle.pyx":609
 *     cdef int mapped_pack(Packer* p, module, name) except -1:
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module, name = <object>tmp
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_name_mapping_3to2;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":610
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module, name = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":611
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 *         if tmp is not NULL:
 *             module, name = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":613
 *             module, name = <object>tmp
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module = <object>tmp
 */
  __pyx_t_2 = __pyx_v_5larch_6pickle_import_mapping_3to2;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_2, __pyx_v_module);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":614
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":615
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 *         if tmp is not NULL:
 *             module = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         simple_pack(p, module, name)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "larch\pickle.pyx":617
 *             module = <object>tmp
 * 
 *         simple_pack(p, module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_f_5larch_6pickle_simple_pack(__pyx_v_p, __pyx_v_module, __pyx_v_name); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":607
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef int mapped_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.mapped_pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":629
 *         public uint32_t last_refcount
 * 
 *     def __init__(self, file=None, protocol=3, with_refs=True):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION < 3:
 *             self.protocol = 2
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_7Pickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_7Pickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_protocol = 0;
  PyObject *__pyx_v_with_refs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_protocol,&__pyx_n_s_with_refs,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_int_3);
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_protocol);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_with_refs);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_protocol = values[1];
    __pyx_v_with_refs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.Pickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler___init__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self), __pyx_v_file, __pyx_v_protocol, __pyx_v_with_refs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_7Pickler___init__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol, PyObject *__pyx_v_with_refs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_protocol);

  /* "larch\pickle.pyx":634
 *             self.pack_import_names = simple_pack
 *         ELSE:
 *             if protocol < 0: protocol = 3             # <<<<<<<<<<<<<<
 *             self.protocol = protocol
 *             if protocol == 2:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_protocol, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_DECREF_SET(__pyx_v_protocol, __pyx_int_3);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":635
 *         ELSE:
 *             if protocol < 0: protocol = 3
 *             self.protocol = protocol             # <<<<<<<<<<<<<<
 *             if protocol == 2:
 *                 self.pack_import_names = mapped_pack
 */
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_protocol); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->protocol = __pyx_t_3;

  /* "larch\pickle.pyx":636
 *             if protocol < 0: protocol = 3
 *             self.protocol = protocol
 *             if protocol == 2:             # <<<<<<<<<<<<<<
 *                 self.pack_import_names = mapped_pack
 *             else:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_protocol, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":637
 *             self.protocol = protocol
 *             if protocol == 2:
 *                 self.pack_import_names = mapped_pack             # <<<<<<<<<<<<<<
 *             else:
 *                 self.pack_import_names = simple_pack
 */
    __pyx_v_self->pack_import_names = __pyx_f_5larch_6pickle_mapped_pack;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "larch\pickle.pyx":639
 *                 self.pack_import_names = mapped_pack
 *             else:
 *                 self.pack_import_names = simple_pack             # <<<<<<<<<<<<<<
 * 
 *         self.packer = new Packer(self, with_refs)
 */
    __pyx_v_self->pack_import_names = __pyx_f_5larch_6pickle_simple_pack;
  }
  __pyx_L4:;

  /* "larch\pickle.pyx":641
 *                 self.pack_import_names = simple_pack
 * 
 *         self.packer = new Packer(self, with_refs)             # <<<<<<<<<<<<<<
 *         self.dispatch_table = dispatch_table
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_with_refs); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->packer = new Packer(((PyObject *)__pyx_v_self), __pyx_t_4);

  /* "larch\pickle.pyx":642
 * 
 *         self.packer = new Packer(self, with_refs)
 *         self.dispatch_table = dispatch_table             # <<<<<<<<<<<<<<
 * 
 *         if file is None:
 */
  __Pyx_INCREF(__pyx_v_5larch_6pickle_dispatch_table);
  __Pyx_GIVEREF(__pyx_v_5larch_6pickle_dispatch_table);
  __Pyx_GOTREF(__pyx_v_self->dispatch_table);
  __Pyx_DECREF(__pyx_v_self->dispatch_table);
  __pyx_v_self->dispatch_table = __pyx_v_5larch_6pickle_dispatch_table;

  /* "larch\pickle.pyx":644
 *         self.dispatch_table = dispatch_table
 * 
 *         if file is None:             # <<<<<<<<<<<<<<
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer
 */
  __pyx_t_2 = (__pyx_v_file == Py_None);
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (__pyx_t_5) {

    /* "larch\pickle.pyx":645
 * 
 *         if file is None:
 *             self.file = OutputBuffer()             # <<<<<<<<<<<<<<
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):
 */
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle_OutputBuffer)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch\pickle.pyx":646
 *         if file is None:
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer             # <<<<<<<<<<<<<<
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 */
    __pyx_v_self->packer->do_write = __pyx_f_5larch_6pickle_write_buffer;
    goto __pyx_L5;
  }

  /* "larch\pickle.pyx":647
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):             # <<<<<<<<<<<<<<
 *             self.file = file.c_pickle()
 *             self.packer.do_write = write_external
 */
  __pyx_t_5 = PyObject_HasAttr(__pyx_v_file, __pyx_n_s_c_pickle); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_5 != 0);
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":648
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()             # <<<<<<<<<<<<<<
 *             self.packer.do_write = write_external
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_c_pickle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "larch\pickle.pyx":649
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 *             self.packer.do_write = write_external             # <<<<<<<<<<<<<<
 *         else:
 *             self.file = _FileLike(file)
 */
    __pyx_v_self->packer->do_write = __pyx_f_5larch_6pickle_write_external;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "larch\pickle.pyx":651
 *             self.packer.do_write = write_external
 *         else:
 *             self.file = _FileLike(file)             # <<<<<<<<<<<<<<
 *             self.packer.do_write = write_file
 * 
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_file);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_file);
    __Pyx_GIVEREF(__pyx_v_file);
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle__FileLike)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch\pickle.pyx":652
 *         else:
 *             self.file = _FileLike(file)
 *             self.packer.do_write = write_file             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->packer->do_write = __pyx_f_5larch_6pickle_write_file;
  }
  __pyx_L5:;

  /* "larch\pickle.pyx":629
 *         public uint32_t last_refcount
 * 
 *     def __init__(self, file=None, protocol=3, with_refs=True):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION < 3:
 *             self.protocol = 2
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("larch.pickle.Pickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_protocol);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":654
 *             self.packer.do_write = write_file
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.packer
 * 
 */

/* Python wrapper */
static void __pyx_pw_5larch_6pickle_7Pickler_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5larch_6pickle_7Pickler_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5larch_6pickle_7Pickler_2__dealloc__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5larch_6pickle_7Pickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "larch\pickle.pyx":655
 * 
 *     def __dealloc__(self):
 *         del self.packer             # <<<<<<<<<<<<<<
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:
 */
  delete __pyx_v_self->packer;

  /* "larch\pickle.pyx":654
 *             self.packer.do_write = write_file
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.packer
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":657
 *         del self.packer
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:             # <<<<<<<<<<<<<<
 *         self.pack_import2(code, o.__module__, o.__name__)
 * 
 */

static int __pyx_f_5larch_6pickle_7Pickler_pack_import1(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, uint8_t __pyx_v_code, PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_import1", 0);

  /* "larch\pickle.pyx":658
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:
 *         self.pack_import2(code, o.__module__, o.__name__)             # <<<<<<<<<<<<<<
 * 
 *     cdef int pack_import2(self, uint8_t code, module, name) except -1:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->pack_import2(__pyx_v_self, __pyx_v_code, __pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":657
 *         del self.packer
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:             # <<<<<<<<<<<<<<
 *         self.pack_import2(code, o.__module__, o.__name__)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.Pickler.pack_import1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":660
 *         self.pack_import2(code, o.__module__, o.__name__)
 * 
 *     cdef int pack_import2(self, uint8_t code, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *rcode
 * 
 */

static int __pyx_f_5larch_6pickle_7Pickler_pack_import2(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, uint8_t __pyx_v_code, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_rcode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_import2", 0);

  /* "larch\pickle.pyx":663
 *         cdef PyObject *rcode
 * 
 *         rcode = PyDict_GetItem(extension_registry, (module, name))             # <<<<<<<<<<<<<<
 *         if rcode is NULL:
 *             self.packer.pack_ext(code, 1)
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_extension_registry;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_v_rcode = PyDict_GetItem(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":664
 * 
 *         rcode = PyDict_GetItem(extension_registry, (module, name))
 *         if rcode is NULL:             # <<<<<<<<<<<<<<
 *             self.packer.pack_ext(code, 1)
 *             self.pack_import_names(self.packer, module, name)
 */
  __pyx_t_3 = ((__pyx_v_rcode == NULL) != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":665
 *         rcode = PyDict_GetItem(extension_registry, (module, name))
 *         if rcode is NULL:
 *             self.packer.pack_ext(code, 1)             # <<<<<<<<<<<<<<
 *             self.pack_import_names(self.packer, module, name)
 *         else:
 */
    __pyx_v_self->packer->pack_ext(__pyx_v_code, 1);

    /* "larch\pickle.pyx":666
 *         if rcode is NULL:
 *             self.packer.pack_ext(code, 1)
 *             self.pack_import_names(self.packer, module, name)             # <<<<<<<<<<<<<<
 *         else:
 *             self.packer.pack_ext(code, 0)
 */
    __pyx_t_4 = __pyx_v_self->pack_import_names(__pyx_v_self->packer, __pyx_v_module, __pyx_v_name); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "larch\pickle.pyx":668
 *             self.pack_import_names(self.packer, module, name)
 *         else:
 *             self.packer.pack_ext(code, 0)             # <<<<<<<<<<<<<<
 *             self.packer.write_int(<uint32_t><object>rcode)
 * 
 */
    __pyx_v_self->packer->pack_ext(__pyx_v_code, 0);

    /* "larch\pickle.pyx":669
 *         else:
 *             self.packer.pack_ext(code, 0)
 *             self.packer.write_int(<uint32_t><object>rcode)             # <<<<<<<<<<<<<<
 * 
 *     cdef int check_init(self) except -1:
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint32_t(((PyObject *)__pyx_v_rcode)); if (unlikely((__pyx_t_5 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->packer->write_int(((uint32_t)__pyx_t_5));
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":660
 *         self.pack_import2(code, o.__module__, o.__name__)
 * 
 *     cdef int pack_import2(self, uint8_t code, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *rcode
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.Pickler.pack_import2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":671
 *             self.packer.write_int(<uint32_t><object>rcode)
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise PicklingError(
 */

static int __pyx_f_5larch_6pickle_7Pickler_check_init(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_init", 0);

  /* "larch\pickle.pyx":672
 * 
 *     cdef int check_init(self) except -1:
 *         if self.file is None:             # <<<<<<<<<<<<<<
 *             raise PicklingError(
 *                 "Pickler.__init__() was not called by "
 */
  __pyx_t_1 = (__pyx_v_self->file == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":673
 *     cdef int check_init(self) except -1:
 *         if self.file is None:
 *             raise PicklingError(             # <<<<<<<<<<<<<<
 *                 "Pickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PicklingError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "larch\pickle.pyx":675
 *             raise PicklingError(
 *                 "Pickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))             # <<<<<<<<<<<<<<
 * 
 *     def dump(self, obj, bool with_version=True):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Pickler___init___was_not_called, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "larch\pickle.pyx":673
 *     cdef int check_init(self) except -1:
 *         if self.file is None:
 *             raise PicklingError(             # <<<<<<<<<<<<<<
 *                 "Pickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "larch\pickle.pyx":671
 *             self.packer.write_int(<uint32_t><object>rcode)
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise PicklingError(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("larch.pickle.Pickler.check_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":677
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 * 
 *     def dump(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         if with_version:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_5dump(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_5dump(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  bool __pyx_v_with_version;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_with_version,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_with_version);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    if (values[1]) {
      __pyx_v_with_version = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_with_version == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_with_version = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.Pickler.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_4dump(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self), __pyx_v_obj, __pyx_v_with_version);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_7Pickler_4dump(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);

  /* "larch\pickle.pyx":678
 * 
 *     def dump(self, obj, bool with_version=True):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":679
 *     def dump(self, obj, bool with_version=True):
 *         self.check_init()
 *         if with_version:             # <<<<<<<<<<<<<<
 *             self.packer.pack_version(self.protocol)
 *         try:
 */
  __pyx_t_2 = (__pyx_v_with_version != 0);
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":680
 *         self.check_init()
 *         if with_version:
 *             self.packer.pack_version(self.protocol)             # <<<<<<<<<<<<<<
 *         try:
 *             self.packer.first_dump(obj)
 */
    try {
      __pyx_v_self->packer->pack_version(__pyx_v_self->protocol);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":681
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 *         try:             # <<<<<<<<<<<<<<
 *             self.packer.first_dump(obj)
 *         finally:
 */
  /*try:*/ {

    /* "larch\pickle.pyx":682
 *             self.packer.pack_version(self.protocol)
 *         try:
 *             self.packer.first_dump(obj)             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.packer.reset()
 */
    try {
      __pyx_v_self->packer->first_dump(__pyx_v_obj);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
    }
  }

  /* "larch\pickle.pyx":684
 *             self.packer.first_dump(obj)
 *         finally:
 *             self.last_refcount = self.packer.reset()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      goto __pyx_L6;
    }
    /*exception exit:*/{
      __pyx_L5_error:;
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "larch\pickle.pyx":685
 *         finally:
 *             self.last_refcount = self.packer.reset()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def dumps(self, obj, bool with_version=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "larch\pickle.pyx":677
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 * 
 *     def dump(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         if with_version:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.Pickler.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":687
 *         return self
 * 
 *     def dumps(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_7dumps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_7dumps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  bool __pyx_v_with_version;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_with_version,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_with_version);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dumps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    if (values[1]) {
      __pyx_v_with_version = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_with_version == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_with_version = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dumps", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.Pickler.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_6dumps(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self), __pyx_v_obj, __pyx_v_with_version);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_7Pickler_6dumps(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);

  /* "larch\pickle.pyx":688
 * 
 *     def dumps(self, obj, bool with_version=True):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":689
 *     def dumps(self, obj, bool with_version=True):
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()             # <<<<<<<<<<<<<<
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 */
  ((struct __pyx_vtabstruct_5larch_6pickle_OutputBuffer *)((struct __pyx_obj_5larch_6pickle_OutputBuffer *)__pyx_v_self->file)->__pyx_vtab)->reset(((struct __pyx_obj_5larch_6pickle_OutputBuffer *)__pyx_v_self->file));

  /* "larch\pickle.pyx":690
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:             # <<<<<<<<<<<<<<
 *             self.packer.pack_version(self.protocol)
 *         try:
 */
  __pyx_t_2 = (__pyx_v_with_version != 0);
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":691
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:
 *             self.packer.pack_version(self.protocol)             # <<<<<<<<<<<<<<
 *         try:
 *             self.packer.first_dump(obj)
 */
    try {
      __pyx_v_self->packer->pack_version(__pyx_v_self->protocol);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":692
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 *         try:             # <<<<<<<<<<<<<<
 *             self.packer.first_dump(obj)
 *         finally:
 */
  /*try:*/ {

    /* "larch\pickle.pyx":693
 *             self.packer.pack_version(self.protocol)
 *         try:
 *             self.packer.first_dump(obj)             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.packer.reset()
 */
    try {
      __pyx_v_self->packer->first_dump(__pyx_v_obj);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
    }
  }

  /* "larch\pickle.pyx":695
 *             self.packer.first_dump(obj)
 *         finally:
 *             self.last_refcount = self.packer.reset()             # <<<<<<<<<<<<<<
 * 
 *         return self.get_output_string()
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      goto __pyx_L6;
    }
    /*exception exit:*/{
      __pyx_L5_error:;
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "larch\pickle.pyx":697
 *             self.last_refcount = self.packer.reset()
 * 
 *         return self.get_output_string()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes get_output_string(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->get_output_string(__pyx_v_self, 0); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":687
 *         return self
 * 
 *     def dumps(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle.Pickler.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":699
 *         return self.get_output_string()
 * 
 *     cpdef bytes get_output_string(self):             # <<<<<<<<<<<<<<
 *         return (<OutputBuffer>self.file).result()
 * 
 */

static PyObject *__pyx_pw_5larch_6pickle_7Pickler_9get_output_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_7Pickler_get_output_string(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_output_string", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_output_string); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5larch_6pickle_7Pickler_9get_output_string)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "larch\pickle.pyx":700
 * 
 *     cpdef bytes get_output_string(self):
 *         return (<OutputBuffer>self.file).result()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_OutputBuffer *)((struct __pyx_obj_5larch_6pickle_OutputBuffer *)__pyx_v_self->file)->__pyx_vtab)->result(((struct __pyx_obj_5larch_6pickle_OutputBuffer *)__pyx_v_self->file)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":699
 *         return self.get_output_string()
 * 
 *     cpdef bytes get_output_string(self):             # <<<<<<<<<<<<<<
 *         return (<OutputBuffer>self.file).result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.Pickler.get_output_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_9get_output_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_9get_output_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_output_string (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_8get_output_string(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_7Pickler_8get_output_string(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_output_string", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->get_output_string(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.Pickler.get_output_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":626
 *         uint8_t protocol
 *         pack_import_names_t pack_import_names
 *         public dict dispatch_table             # <<<<<<<<<<<<<<
 *         public uint32_t last_refcount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table___get__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_7Pickler_14dispatch_table___get__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->dispatch_table);
  __pyx_r = __pyx_v_self->dispatch_table;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table_2__set__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table_2__set__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dispatch_table);
  __Pyx_DECREF(__pyx_v_self->dispatch_table);
  __pyx_v_self->dispatch_table = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.Pickler.dispatch_table.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table_4__del__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_7Pickler_14dispatch_table_4__del__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dispatch_table);
  __Pyx_DECREF(__pyx_v_self->dispatch_table);
  __pyx_v_self->dispatch_table = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":627
 *         pack_import_names_t pack_import_names
 *         public dict dispatch_table
 *         public uint32_t last_refcount             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, file=None, protocol=3, with_refs=True):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_13last_refcount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_7Pickler_13last_refcount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_13last_refcount___get__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_7Pickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->last_refcount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.Pickler.last_refcount.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_7Pickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_7Pickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_7Pickler_13last_refcount_2__set__(((struct __pyx_obj_5larch_6pickle_Pickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_7Pickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->last_refcount = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.Pickler.last_refcount.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":706
 * # ----------------------------------
 * 
 * cdef object _load_object(Unpacker *p, obj):             # <<<<<<<<<<<<<<
 *     cdef:
 *         PyObject *set_state
 */

static PyObject *__pyx_f_5larch_6pickle__load_object(Unpacker *__pyx_v_p, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_set_state;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_object", 0);

  /* "larch\pickle.pyx":710
 *         PyObject *set_state
 * 
 *     state = p.load_object()             # <<<<<<<<<<<<<<
 *     if state is not None:
 *         if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_state = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":711
 * 
 *     state = p.load_object()
 *     if state is not None:             # <<<<<<<<<<<<<<
 *         if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:
 *             for k, v in (<dict>PyTuple_GET_ITEM(state, 1)).items():
 */
  __pyx_t_2 = (__pyx_v_state != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":712
 *     state = p.load_object()
 *     if state is not None:
 *         if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:             # <<<<<<<<<<<<<<
 *             for k, v in (<dict>PyTuple_GET_ITEM(state, 1)).items():
 *                 setattr(obj, k, v)
 */
    __pyx_t_3 = (PyTuple_Check(__pyx_v_state) != 0);
    if (__pyx_t_3) {
      __pyx_t_2 = ((PyTuple_GET_SIZE(__pyx_v_state) == 2) != 0);
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    if (__pyx_t_4) {

      /* "larch\pickle.pyx":713
 *     if state is not None:
 *         if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:
 *             for k, v in (<dict>PyTuple_GET_ITEM(state, 1)).items():             # <<<<<<<<<<<<<<
 *                 setattr(obj, k, v)
 * 
 */
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v_state, 1);
      if (unlikely(((PyObject *)__pyx_t_5) == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "items");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_PyDict_Items(((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_1 = __pyx_t_8(__pyx_t_6);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
          PyObject* sequence = __pyx_t_1;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          #else
          __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
          index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L7_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_9);
          index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L7_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_12 = NULL;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L8_unpacking_done;
          __pyx_L7_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_12 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_L8_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "larch\pickle.pyx":714
 *         if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:
 *             for k, v in (<dict>PyTuple_GET_ITEM(state, 1)).items():
 *                 setattr(obj, k, v)             # <<<<<<<<<<<<<<
 * 
 *             state = <object>PyTuple_GET_ITEM(state, 0)
 */
        __pyx_t_13 = PyObject_SetAttr(__pyx_v_obj, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "larch\pickle.pyx":716
 *                 setattr(obj, k, v)
 * 
 *             state = <object>PyTuple_GET_ITEM(state, 0)             # <<<<<<<<<<<<<<
 * 
 *         if state is not None:
 */
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v_state, 0);
      __pyx_t_6 = ((PyObject *)__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_state, __pyx_t_6);
      __pyx_t_6 = 0;
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "larch\pickle.pyx":718
 *             state = <object>PyTuple_GET_ITEM(state, 0)
 * 
 *         if state is not None:             # <<<<<<<<<<<<<<
 *             set_state = Object_GetAttrString(obj, "__setstate__")
 *             if set_state is NULL:
 */
    __pyx_t_4 = (__pyx_v_state != Py_None);
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {

      /* "larch\pickle.pyx":719
 * 
 *         if state is not None:
 *             set_state = Object_GetAttrString(obj, "__setstate__")             # <<<<<<<<<<<<<<
 *             if set_state is NULL:
 *                 PyErr_Clear()
 */
      __pyx_v_set_state = PyObject_GetAttrString(__pyx_v_obj, __pyx_k_setstate);

      /* "larch\pickle.pyx":720
 *         if state is not None:
 *             set_state = Object_GetAttrString(obj, "__setstate__")
 *             if set_state is NULL:             # <<<<<<<<<<<<<<
 *                 PyErr_Clear()
 *                 PyDict_Update(obj.__dict__, state)
 */
      __pyx_t_3 = ((__pyx_v_set_state == NULL) != 0);
      if (__pyx_t_3) {

        /* "larch\pickle.pyx":721
 *             set_state = Object_GetAttrString(obj, "__setstate__")
 *             if set_state is NULL:
 *                 PyErr_Clear()             # <<<<<<<<<<<<<<
 *                 PyDict_Update(obj.__dict__, state)
 *             else:
 */
        PyErr_Clear();

        /* "larch\pickle.pyx":722
 *             if set_state is NULL:
 *                 PyErr_Clear()
 *                 PyDict_Update(obj.__dict__, state)             # <<<<<<<<<<<<<<
 *             else:
 *                 (<object>set_state)(state)
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_14 = PyDict_Update(__pyx_t_6, __pyx_v_state); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L10;
      }
      /*else*/ {

        /* "larch\pickle.pyx":724
 *                 PyDict_Update(obj.__dict__, state)
 *             else:
 *                 (<object>set_state)(state)             # <<<<<<<<<<<<<<
 * 
 *     item = p.load_object()
 */
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_state);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_state);
        __Pyx_GIVEREF(__pyx_v_state);
        __pyx_t_1 = PyObject_Call(((PyObject *)__pyx_v_set_state), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L10:;
      goto __pyx_L9;
    }
    __pyx_L9:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":726
 *                 (<object>set_state)(state)
 * 
 *     item = p.load_object()             # <<<<<<<<<<<<<<
 *     if item is not _end_item:
 *         while item is not _end_item:
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":727
 * 
 *     item = p.load_object()
 *     if item is not _end_item:             # <<<<<<<<<<<<<<
 *         while item is not _end_item:
 *             obj.append(item)
 */
  __pyx_t_3 = (__pyx_v_item != __pyx_v_5larch_6pickle__end_item);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "larch\pickle.pyx":728
 *     item = p.load_object()
 *     if item is not _end_item:
 *         while item is not _end_item:             # <<<<<<<<<<<<<<
 *             obj.append(item)
 *             item = p.load_object()
 */
    while (1) {
      __pyx_t_4 = (__pyx_v_item != __pyx_v_5larch_6pickle__end_item);
      __pyx_t_3 = (__pyx_t_4 != 0);
      if (!__pyx_t_3) break;

      /* "larch\pickle.pyx":729
 *     if item is not _end_item:
 *         while item is not _end_item:
 *             obj.append(item)             # <<<<<<<<<<<<<<
 *             item = p.load_object()
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_obj, __pyx_v_item); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "larch\pickle.pyx":730
 *         while item is not _end_item:
 *             obj.append(item)
 *             item = p.load_object()             # <<<<<<<<<<<<<<
 * 
 *     k = p.load_object()
 */
      __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    goto __pyx_L11;
  }
  __pyx_L11:;

  /* "larch\pickle.pyx":732
 *             item = p.load_object()
 * 
 *     k = p.load_object()             # <<<<<<<<<<<<<<
 *     while k is not _end_item:
 *         v = p.load_object()
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":733
 * 
 *     k = p.load_object()
 *     while k is not _end_item:             # <<<<<<<<<<<<<<
 *         v = p.load_object()
 *         obj[k] = v
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_k != __pyx_v_5larch_6pickle__end_item);
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) break;

    /* "larch\pickle.pyx":734
 *     k = p.load_object()
 *     while k is not _end_item:
 *         v = p.load_object()             # <<<<<<<<<<<<<<
 *         obj[k] = v
 *         k = p.load_object()
 */
    __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "larch\pickle.pyx":735
 *     while k is not _end_item:
 *         v = p.load_object()
 *         obj[k] = v             # <<<<<<<<<<<<<<
 *         k = p.load_object()
 * 
 */
    if (unlikely(PyObject_SetItem(__pyx_v_obj, __pyx_v_k, __pyx_v_v) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "larch\pickle.pyx":736
 *         v = p.load_object()
 *         obj[k] = v
 *         k = p.load_object()             # <<<<<<<<<<<<<<
 * 
 *     return obj
 */
    __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_k, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "larch\pickle.pyx":738
 *         k = p.load_object()
 * 
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch\pickle.pyx":706
 * # ----------------------------------
 * 
 * cdef object _load_object(Unpacker *p, obj):             # <<<<<<<<<<<<<<
 *     cdef:
 *         PyObject *set_state
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle._load_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":741
 * 
 * 
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()
 */

static PyObject *__pyx_f_5larch_6pickle_load_object(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_constructor = NULL;
  PyObject *__pyx_v_constructor_arg = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_object", 0);

  /* "larch\pickle.pyx":742
 * 
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     constructor = p.load_object()
 *     constructor_arg = p.load_object()
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch\pickle.pyx":743
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()             # <<<<<<<<<<<<<<
 *     constructor_arg = p.load_object()
 *     obj = constructor(*constructor_arg)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_constructor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":744
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()
 *     constructor_arg = p.load_object()             # <<<<<<<<<<<<<<
 *     obj = constructor(*constructor_arg)
 *     p.stamp(stamp, obj)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_constructor_arg = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":745
 *     constructor = p.load_object()
 *     constructor_arg = p.load_object()
 *     obj = constructor(*constructor_arg)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_constructor_arg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_v_constructor, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_obj = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":746
 *     constructor_arg = p.load_object()
 *     obj = constructor(*constructor_arg)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return _load_object(p, obj)
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch\pickle.pyx":747
 *     obj = constructor(*constructor_arg)
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5larch_6pickle__load_object(__pyx_v_p, __pyx_v_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":741
 * 
 * 
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.load_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_constructor);
  __Pyx_XDECREF(__pyx_v_constructor_arg);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":750
 * 
 * 
 * cdef object load_object_new(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t stamp = p.get_stamp()
 */

static PyObject *__pyx_f_5larch_6pickle_load_object_new(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_cls_args = 0;
  PyObject *__pyx_v_cls = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_object_new", 0);

  /* "larch\pickle.pyx":752
 * cdef object load_object_new(Unpacker *p, uint8_t code, size_t size):
 *     cdef:
 *         uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *         tuple cls_args
 * 
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch\pickle.pyx":755
 *         tuple cls_args
 * 
 *     cls_args = p.load_object()             # <<<<<<<<<<<<<<
 *     cls = cls_args[0]
 *     obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cls_args = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":756
 * 
 *     cls_args = p.load_object()
 *     cls = cls_args[0]             # <<<<<<<<<<<<<<
 *     obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     p.stamp(stamp, obj)
 */
  if (unlikely(__pyx_v_cls_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v_cls_args, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cls = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":757
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)
 */
  if (unlikely(__pyx_v_cls_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyTuple_GetSlice(__pyx_v_cls_args, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = GET_NEW(__pyx_v_cls)(((PyTypeObject *)__pyx_v_cls), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_obj = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":758
 *     cls = cls_args[0]
 *     obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return _load_object(p, obj)
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch\pickle.pyx":759
 *     obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5larch_6pickle__load_object(__pyx_v_p, __pyx_v_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":750
 * 
 * 
 * cdef object load_object_new(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t stamp = p.get_stamp()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.load_object_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cls_args);
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":762
 * 
 * 
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 */

static PyObject *__pyx_f_5larch_6pickle_load_singleton(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_singleton", 0);

  /* "larch\pickle.pyx":763
 * 
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch\pickle.pyx":764
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return obj
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_obj = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":765
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch\pickle.pyx":766
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch\pickle.pyx":762
 * 
 * 
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.load_singleton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":769
 * 
 * 
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 */

static PyObject *__pyx_f_5larch_6pickle_load_oldstyle(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_oldstyle", 0);

  /* "larch\pickle.pyx":770
 * 
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch\pickle.pyx":771
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     obj.__dict__.update(p.load_object())
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_obj = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":772
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     obj.__dict__.update(p.load_object())
 *     return obj
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch\pickle.pyx":773
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)
 *     obj.__dict__.update(p.load_object())             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_update); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_v_p->load(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":774
 *     p.stamp(stamp, obj)
 *     obj.__dict__.update(p.load_object())
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch\pickle.pyx":769
 * 
 * 
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.load_oldstyle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":777
 * 
 * 
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

static PyObject *__pyx_f_5larch_6pickle_load_initargs(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_init_args = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_initargs", 0);

  /* "larch\pickle.pyx":778
 * 
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     init_args = p.load_object()
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch\pickle.pyx":779
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)             # <<<<<<<<<<<<<<
 *     init_args = p.load_object()
 *     obj = obj(*init_args)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":780
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     init_args = p.load_object()             # <<<<<<<<<<<<<<
 *     obj = obj(*init_args)
 *     p.stamp(stamp, obj)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_init_args = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":781
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     init_args = p.load_object()
 *     obj = obj(*init_args)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return obj
 */
  __pyx_t_1 = PySequence_Tuple(__pyx_v_init_args); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_v_obj, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":782
 *     init_args = p.load_object()
 *     obj = obj(*init_args)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch\pickle.pyx":783
 *     obj = obj(*init_args)
 *     p.stamp(stamp, obj)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch\pickle.pyx":777
 * 
 * 
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.load_initargs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_init_args);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":786
 * 
 * 
 * cdef object load_end_item(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return _end_item
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_load_end_item(CYTHON_UNUSED Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_end_item", 0);

  /* "larch\pickle.pyx":787
 * 
 * cdef object load_end_item(Unpacker *p, uint8_t code, size_t size):
 *     return _end_item             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_5larch_6pickle__end_item);
  __pyx_r = __pyx_v_5larch_6pickle__end_item;
  goto __pyx_L0;

  /* "larch\pickle.pyx":786
 * 
 * 
 * cdef object load_end_item(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return _end_item
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":790
 * 
 * 
 * cdef object load_ref(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t ido
 */

static PyObject *__pyx_f_5larch_6pickle_load_ref(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint32_t __pyx_v_ido;
  PyObject *__pyx_v_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_ref", 0);

  /* "larch\pickle.pyx":795
 *         PyObject* obj
 * 
 *     p.read32(&ido)             # <<<<<<<<<<<<<<
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:
 */
  __pyx_v_p->read32((&__pyx_v_ido));

  /* "larch\pickle.pyx":796
 * 
 *     p.read32(&ido)
 *     obj = p.get_stamped_ref(ido)             # <<<<<<<<<<<<<<
 *     if obj is NULL:
 *         raise UnpicklingError("Invalid reference")
 */
  __pyx_v_obj = __pyx_v_p->get_stamped_ref(__pyx_v_ido);

  /* "larch\pickle.pyx":797
 *     p.read32(&ido)
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError("Invalid reference")
 * 
 */
  __pyx_t_1 = ((__pyx_v_obj == NULL) != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":798
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:
 *         raise UnpicklingError("Invalid reference")             # <<<<<<<<<<<<<<
 * 
 *     return <object>obj
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "larch\pickle.pyx":800
 *         raise UnpicklingError("Invalid reference")
 * 
 *     return <object>obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "larch\pickle.pyx":790
 * 
 * 
 * cdef object load_ref(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t ido
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.load_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":803
 * 
 * 
 * cdef object load_global(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return (<Unpickler>p.unpickler).unpack_import(size)
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_load_global(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_global", 0);

  /* "larch\pickle.pyx":804
 * 
 * cdef object load_global(Unpacker* p, uint8_t code, size_t size):
 *     return (<Unpickler>p.unpickler).unpack_import(size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":803
 * 
 * 
 * cdef object load_global(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return (<Unpickler>p.unpickler).unpack_import(size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.load_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":807
 * 
 * 
 * cdef object load_version(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))
 */

static PyObject *__pyx_f_5larch_6pickle_load_version(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint8_t __pyx_v_version;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_version", 0);

  /* "larch\pickle.pyx":809
 * cdef object load_version(Unpacker* p, uint8_t code, size_t size):
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))             # <<<<<<<<<<<<<<
 *     (<Unpickler>p.unpickler).set_protocol(version)
 *     return p.load_object()
 */
  __pyx_v_p->read(((char *)(&__pyx_v_version)), (sizeof(__pyx_v_version)));

  /* "larch\pickle.pyx":810
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))
 *     (<Unpickler>p.unpickler).set_protocol(version)             # <<<<<<<<<<<<<<
 *     return p.load_object()
 * 
 */
  ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->set_protocol(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_version);

  /* "larch\pickle.pyx":811
 *     p.read(<char*>&version, sizeof(version))
 *     (<Unpickler>p.unpickler).set_protocol(version)
 *     return p.load_object()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":807
 * 
 * 
 * cdef object load_version(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.load_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":814
 * 
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     raise UnpicklingError("Unknown load code")
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_load_wrong_code(CYTHON_UNUSED Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_wrong_code", 0);

  /* "larch\pickle.pyx":815
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):
 *     raise UnpicklingError("Unknown load code")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":814
 * 
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     raise UnpicklingError("Unknown load code")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.load_wrong_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":818
 * 
 * 
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in codes:
 */

static PyObject *__pyx_f_5larch_6pickle__register_unpickle(unpack_t __pyx_v_loader, PyObject *__pyx_v_codes, struct __pyx_opt_args_5larch_6pickle__register_unpickle *__pyx_optional_args) {
  int __pyx_v_offset = ((int)0);
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_register_unpickle", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_offset = __pyx_optional_args->offset;
    }
  }

  /* "larch\pickle.pyx":820
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):
 *     cdef size_t i
 *     for i in codes:             # <<<<<<<<<<<<<<
 *         unpickle_registry[i+offset] = loader
 * 
 */
  if (PyList_CheckExact(__pyx_v_codes) || PyTuple_CheckExact(__pyx_v_codes)) {
    __pyx_t_1 = __pyx_v_codes; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_codes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_i = __pyx_t_5;

    /* "larch\pickle.pyx":821
 *     cdef size_t i
 *     for i in codes:
 *         unpickle_registry[i+offset] = loader             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (unpickle_registry[(__pyx_v_i + __pyx_v_offset)]) = __pyx_v_loader;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":818
 * 
 * 
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in codes:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle._register_unpickle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":875
 * ctypedef object (*find_class_t)(Unpickler unpickler, module, name)
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler.default_find_class(module, name)
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_call_default_find_class(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_unpickler, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_default_find_class", 0);

  /* "larch\pickle.pyx":876
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):
 *     return unpickler.default_find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_unpickler->default_find_class(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":875
 * ctypedef object (*find_class_t)(Unpickler unpickler, module, name)
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler.default_find_class(module, name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.call_default_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":879
 * 
 * 
 * cdef object call_sub_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler._find_class(module, name)
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_call_sub_find_class(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_unpickler, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_sub_find_class", 0);

  /* "larch\pickle.pyx":880
 * 
 * cdef object call_sub_find_class(Unpickler unpickler, module, name):
 *     return unpickler._find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_t_2 = PyObject_Call(__pyx_v_unpickler->_find_class, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":879
 * 
 * 
 * cdef object call_sub_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler._find_class(module, name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.call_sub_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":887
 * 
 * 
 * cdef object simple_find_class(module, name):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 */

static PyObject *__pyx_f_5larch_6pickle_simple_find_class(PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("simple_find_class", 0);
  __Pyx_INCREF(__pyx_v_module);

  /* "larch\pickle.pyx":889
 * cdef object simple_find_class(module, name):
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)             # <<<<<<<<<<<<<<
 *     if tmp is NULL:
 *         module= __import__(module)
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_modules;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_1, __pyx_v_module);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":890
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:             # <<<<<<<<<<<<<<
 *         module= __import__(module)
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":891
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:
 *         module= __import__(module)             # <<<<<<<<<<<<<<
 *     else:
 *         module = <object>tmp
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_module);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_module);
    __Pyx_GIVEREF(__pyx_v_module);
    __pyx_t_3 = PyObject_Call(__pyx_builtin___import__, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "larch\pickle.pyx":893
 *         module= __import__(module)
 *     else:
 *         module = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *     return getattr(module, name)
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":895
 *         module = <object>tmp
 * 
 *     return getattr(module, name)             # <<<<<<<<<<<<<<
 * 
 * IF PY_MAJOR_VERSION > 2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetAttr(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":887
 * 
 * 
 * cdef object simple_find_class(module, name):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.simple_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":898
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef object mapped_find_class(module, name):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PyObject* tmp
 */

static PyObject *__pyx_f_5larch_6pickle_mapped_find_class(PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mapped_find_class", 0);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);

  /* "larch\pickle.pyx":902
 *             PyObject* tmp
 * 
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module, name = <object>tmp
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_name_mapping_2to3;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":903
 * 
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module, name = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":904
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))
 *         if tmp is not NULL:
 *             module, name = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":906
 *             module, name = <object>tmp
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module = <object>tmp
 */
  __pyx_t_2 = __pyx_v_5larch_6pickle_import_mapping_2to3;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_2, __pyx_v_module);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":907
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch\pickle.pyx":908
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 *         if tmp is not NULL:
 *             module = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         return simple_find_class(module, name)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "larch\pickle.pyx":910
 *             module = <object>tmp
 * 
 *         return simple_find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5larch_6pickle_simple_find_class(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":898
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef object mapped_find_class(module, name):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PyObject* tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.mapped_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":922
 *         public uint32_t last_refcount
 * 
 *     def __init__(self, file=b""):             # <<<<<<<<<<<<<<
 *         self.unpacker = new Unpacker(self)
 *         #this is complicated but faster than ordinary subclassing
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_9Unpickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_9Unpickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_b__3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.Unpickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_9Unpickler___init__(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self), __pyx_v_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_9Unpickler___init__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_file) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "larch\pickle.pyx":923
 * 
 *     def __init__(self, file=b""):
 *         self.unpacker = new Unpacker(self)             # <<<<<<<<<<<<<<
 *         #this is complicated but faster than ordinary subclassing
 *         if isinstance(self.find_class, types.BuiltinMethodType):
 */
  __pyx_v_self->unpacker = new Unpacker(((PyObject *)__pyx_v_self));

  /* "larch\pickle.pyx":925
 *         self.unpacker = new Unpacker(self)
 *         #this is complicated but faster than ordinary subclassing
 *         if isinstance(self.find_class, types.BuiltinMethodType):             # <<<<<<<<<<<<<<
 *             self.call_find_class = call_default_find_class
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_class); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BuiltinMethodType); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "larch\pickle.pyx":926
 *         #this is complicated but faster than ordinary subclassing
 *         if isinstance(self.find_class, types.BuiltinMethodType):
 *             self.call_find_class = call_default_find_class             # <<<<<<<<<<<<<<
 *         else:
 *             self._find_class = self.find_class
 */
    __pyx_v_self->call_find_class = __pyx_f_5larch_6pickle_call_default_find_class;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "larch\pickle.pyx":928
 *             self.call_find_class = call_default_find_class
 *         else:
 *             self._find_class = self.find_class             # <<<<<<<<<<<<<<
 *             self.call_find_class = call_sub_find_class
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_class); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_find_class);
    __Pyx_DECREF(__pyx_v_self->_find_class);
    __pyx_v_self->_find_class = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":929
 *         else:
 *             self._find_class = self.find_class
 *             self.call_find_class = call_sub_find_class             # <<<<<<<<<<<<<<
 * 
 *         self.default_find_class = simple_find_class
 */
    __pyx_v_self->call_find_class = __pyx_f_5larch_6pickle_call_sub_find_class;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":931
 *             self.call_find_class = call_sub_find_class
 * 
 *         self.default_find_class = simple_find_class             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(file, bytes):
 */
  __pyx_v_self->default_find_class = __pyx_f_5larch_6pickle_simple_find_class;

  /* "larch\pickle.pyx":933
 *         self.default_find_class = simple_find_class
 * 
 *         if isinstance(file, bytes):             # <<<<<<<<<<<<<<
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer
 */
  __pyx_t_5 = PyBytes_Check(__pyx_v_file); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "larch\pickle.pyx":934
 * 
 *         if isinstance(file, bytes):
 *             self.file = _BufferContainer().set(file)             # <<<<<<<<<<<<<<
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):
 */
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle__BufferContainer)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyBytes_CheckExact(__pyx_v_file))||((__pyx_v_file) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_file)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5larch_6pickle__BufferContainer *)((struct __pyx_obj_5larch_6pickle__BufferContainer *)__pyx_t_3)->__pyx_vtab)->set(((struct __pyx_obj_5larch_6pickle__BufferContainer *)__pyx_t_3), ((PyObject*)__pyx_v_file))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch\pickle.pyx":935
 *         if isinstance(file, bytes):
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer             # <<<<<<<<<<<<<<
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 */
    __pyx_v_self->unpacker->do_read = __pyx_f_5larch_6pickle_read_buffer;
    goto __pyx_L4;
  }

  /* "larch\pickle.pyx":936
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):             # <<<<<<<<<<<<<<
 *             self.file = file.c_pickle()
 *             self.unpacker.do_read = read_external
 */
  __pyx_t_4 = PyObject_HasAttr(__pyx_v_file, __pyx_n_s_c_pickle); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "larch\pickle.pyx":937
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()             # <<<<<<<<<<<<<<
 *             self.unpacker.do_read = read_external
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_c_pickle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":938
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 *             self.unpacker.do_read = read_external             # <<<<<<<<<<<<<<
 *         else:
 *             self.file = _FileLike(file)
 */
    __pyx_v_self->unpacker->do_read = __pyx_f_5larch_6pickle_read_external;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "larch\pickle.pyx":940
 *             self.unpacker.do_read = read_external
 *         else:
 *             self.file = _FileLike(file)             # <<<<<<<<<<<<<<
 *             self.unpacker.do_read = read_file
 * 
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_file);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_file);
    __Pyx_GIVEREF(__pyx_v_file);
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle__FileLike)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch\pickle.pyx":941
 *         else:
 *             self.file = _FileLike(file)
 *             self.unpacker.do_read = read_file             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->unpacker->do_read = __pyx_f_5larch_6pickle_read_file;
  }
  __pyx_L4:;

  /* "larch\pickle.pyx":922
 *         public uint32_t last_refcount
 * 
 *     def __init__(self, file=b""):             # <<<<<<<<<<<<<<
 *         self.unpacker = new Unpacker(self)
 *         #this is complicated but faster than ordinary subclassing
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.Unpickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":943
 *             self.unpacker.do_read = read_file
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.unpacker
 * 
 */

/* Python wrapper */
static void __pyx_pw_5larch_6pickle_9Unpickler_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5larch_6pickle_9Unpickler_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5larch_6pickle_9Unpickler_2__dealloc__(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5larch_6pickle_9Unpickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "larch\pickle.pyx":944
 * 
 *     def __dealloc__(self):
 *         del self.unpacker             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_protocol(self, uint8_t protocol):
 */
  delete __pyx_v_self->unpacker;

  /* "larch\pickle.pyx":943
 *             self.unpacker.do_read = read_file
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.unpacker
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch\pickle.pyx":946
 *         del self.unpacker
 * 
 *     cdef int set_protocol(self, uint8_t protocol):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:
 */

static int __pyx_f_5larch_6pickle_9Unpickler_set_protocol(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, uint8_t __pyx_v_protocol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_protocol", 0);

  /* "larch\pickle.pyx":948
 *     cdef int set_protocol(self, uint8_t protocol):
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:             # <<<<<<<<<<<<<<
 *                 self.default_find_class = mapped_find_class
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_protocol < 3) != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":949
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:
 *                 self.default_find_class = mapped_find_class             # <<<<<<<<<<<<<<
 *             else:
 *                 self.default_find_class = simple_find_class
 */
    __pyx_v_self->default_find_class = __pyx_f_5larch_6pickle_mapped_find_class;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "larch\pickle.pyx":951
 *                 self.default_find_class = mapped_find_class
 *             else:
 *                 self.default_find_class = simple_find_class             # <<<<<<<<<<<<<<
 * 
 *     cdef object unpack_import(self, size_t size):
 */
    __pyx_v_self->default_find_class = __pyx_f_5larch_6pickle_simple_find_class;
  }
  __pyx_L3:;

  /* "larch\pickle.pyx":946
 *         del self.unpacker
 * 
 *     cdef int set_protocol(self, uint8_t protocol):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":953
 *                 self.default_find_class = simple_find_class
 * 
 *     cdef object unpack_import(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             uint32_t rcode
 */

static PyObject *__pyx_f_5larch_6pickle_9Unpickler_unpack_import(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, size_t __pyx_v_size) {
  uint32_t __pyx_v_rcode;
  PyObject *__pyx_v_key;
  PyObject *__pyx_v_ocode = NULL;
  PyObject *__pyx_v_module = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpack_import", 0);

  /* "larch\pickle.pyx":958
 *             PyObject *key
 * 
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode
 */
  __pyx_t_1 = ((__pyx_v_size == 0) != 0);
  if (__pyx_t_1) {

    /* "larch\pickle.pyx":959
 * 
 *         if size == 0:
 *             self.unpacker.read32(&rcode)             # <<<<<<<<<<<<<<
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)
 */
    __pyx_v_self->unpacker->read32((&__pyx_v_rcode));

    /* "larch\pickle.pyx":960
 *         if size == 0:
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode             # <<<<<<<<<<<<<<
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(((uint32_t)__pyx_v_rcode)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_ocode = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":961
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)             # <<<<<<<<<<<<<<
 *             if key is not NULL:
 *                 return <object>key
 */
    __pyx_t_3 = __pyx_v_5larch_6pickle_extension_cache;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_key = PyDict_GetItem(__pyx_t_3, __pyx_v_ocode);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "larch\pickle.pyx":962
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:             # <<<<<<<<<<<<<<
 *                 return <object>key
 * 
 */
    __pyx_t_1 = ((__pyx_v_key != NULL) != 0);
    if (__pyx_t_1) {

      /* "larch\pickle.pyx":963
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:
 *                 return <object>key             # <<<<<<<<<<<<<<
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_key));
      __pyx_r = ((PyObject *)__pyx_v_key);
      goto __pyx_L0;
    }

    /* "larch\pickle.pyx":965
 *                 return <object>key
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)             # <<<<<<<<<<<<<<
 *             if key is NULL:
 *                 raise KeyError(rcode)
 */
    __pyx_t_3 = __pyx_v_5larch_6pickle_inverted_registry;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_key = PyDict_GetItem(__pyx_t_3, __pyx_v_ocode);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "larch\pickle.pyx":966
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)
 *             if key is NULL:             # <<<<<<<<<<<<<<
 *                 raise KeyError(rcode)
 * 
 */
    __pyx_t_1 = ((__pyx_v_key == NULL) != 0);
    if (__pyx_t_1) {

      /* "larch\pickle.pyx":967
 *             key = PyDict_GetItem(inverted_registry, ocode)
 *             if key is NULL:
 *                 raise KeyError(rcode)             # <<<<<<<<<<<<<<
 * 
 *             module, name = <object>key
 */
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_rcode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_builtin_KeyError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "larch\pickle.pyx":969
 *                 raise KeyError(rcode)
 * 
 *             module, name = <object>key             # <<<<<<<<<<<<<<
 *             obj = self.call_find_class(self, module, name)
 *             extension_cache[ocode] = obj
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_key);
    __Pyx_INCREF(__pyx_t_3);
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __pyx_v_module = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_name = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "larch\pickle.pyx":970
 * 
 *             module, name = <object>key
 *             obj = self.call_find_class(self, module, name)             # <<<<<<<<<<<<<<
 *             extension_cache[ocode] = obj
 *             return obj
 */
    __pyx_t_3 = __pyx_v_self->call_find_class(__pyx_v_self, __pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_obj = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch\pickle.pyx":971
 *             module, name = <object>key
 *             obj = self.call_find_class(self, module, name)
 *             extension_cache[ocode] = obj             # <<<<<<<<<<<<<<
 *             return obj
 * 
 */
    if (unlikely(__pyx_v_5larch_6pickle_extension_cache == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(PyDict_SetItem(__pyx_v_5larch_6pickle_extension_cache, __pyx_v_ocode, __pyx_v_obj) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "larch\pickle.pyx":972
 *             obj = self.call_find_class(self, module, name)
 *             extension_cache[ocode] = obj
 *             return obj             # <<<<<<<<<<<<<<
 * 
 *         module = self.unpacker.load_object()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_obj);
    __pyx_r = __pyx_v_obj;
    goto __pyx_L0;
  }

  /* "larch\pickle.pyx":974
 *             return obj
 * 
 *         module = self.unpacker.load_object()             # <<<<<<<<<<<<<<
 *         name = self.unpacker.load_object()
 *         return self.call_find_class(self, module, name)
 */
  __pyx_t_3 = __pyx_v_self->unpacker->load(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_module = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "larch\pickle.pyx":975
 * 
 *         module = self.unpacker.load_object()
 *         name = self.unpacker.load_object()             # <<<<<<<<<<<<<<
 *         return self.call_find_class(self, module, name)
 * 
 */
  __pyx_t_3 = __pyx_v_self->unpacker->load(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_name = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "larch\pickle.pyx":976
 *         module = self.unpacker.load_object()
 *         name = self.unpacker.load_object()
 *         return self.call_find_class(self, module, name)             # <<<<<<<<<<<<<<
 * 
 *     cdef int check_init(self) except -1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->call_find_class(__pyx_v_self, __pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":953
 *                 self.default_find_class = simple_find_class
 * 
 *     cdef object unpack_import(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             uint32_t rcode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.Unpickler.unpack_import", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ocode);
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":978
 *         return self.call_find_class(self, module, name)
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise UnpicklingError(
 */

static int __pyx_f_5larch_6pickle_9Unpickler_check_init(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_init", 0);

  /* "larch\pickle.pyx":979
 * 
 *     cdef int check_init(self) except -1:
 *         if self.file is None:             # <<<<<<<<<<<<<<
 *             raise UnpicklingError(
 *                 "Unpickler.__init__() was not called by "
 */
  __pyx_t_1 = (__pyx_v_self->file == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "larch\pickle.pyx":980
 *     cdef int check_init(self) except -1:
 *         if self.file is None:
 *             raise UnpicklingError(             # <<<<<<<<<<<<<<
 *                 "Unpickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "larch\pickle.pyx":982
 *             raise UnpicklingError(
 *                 "Unpickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))             # <<<<<<<<<<<<<<
 * 
 *     def find_class(self, str module, str name):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unpickler___init___was_not_calle, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "larch\pickle.pyx":980
 *     cdef int check_init(self) except -1:
 *         if self.file is None:
 *             raise UnpicklingError(             # <<<<<<<<<<<<<<
 *                 "Unpickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "larch\pickle.pyx":978
 *         return self.call_find_class(self, module, name)
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise UnpicklingError(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("larch.pickle.Unpickler.check_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":984
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 * 
 *     def find_class(self, str module, str name):             # <<<<<<<<<<<<<<
 *         return self.default_find_class(module, name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_5find_class(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_5find_class(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_module = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_class (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_module_2,&__pyx_n_s_name_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_module_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("find_class", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_class") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_module = ((PyObject*)values[0]);
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_class", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.Unpickler.find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_module), (&PyString_Type), 1, "module", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5larch_6pickle_9Unpickler_4find_class(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self), __pyx_v_module, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_4find_class(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_class", 0);

  /* "larch\pickle.pyx":985
 * 
 *     def find_class(self, str module, str name):
 *         return self.default_find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 *     def load(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->default_find_class(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":984
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 * 
 *     def find_class(self, str module, str name):             # <<<<<<<<<<<<<<
 *         return self.default_find_class(module, name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.Unpickler.find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":987
 *         return self.default_find_class(module, name)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_7load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_7load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_9Unpickler_6load(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_6load(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "larch\pickle.pyx":988
 * 
 *     def load(self):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         try:
 *             return self.unpacker.first_load_object()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":989
 *     def load(self):
 *         self.check_init()
 *         try:             # <<<<<<<<<<<<<<
 *             return self.unpacker.first_load_object()
 *         finally:
 */
  /*try:*/ {

    /* "larch\pickle.pyx":990
 *         self.check_init()
 *         try:
 *             return self.unpacker.first_load_object()             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.unpacker.reset()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_self->unpacker->load();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "larch\pickle.pyx":992
 *             return self.unpacker.first_load_object()
 *         finally:
 *             self.last_refcount = self.unpacker.reset()             # <<<<<<<<<<<<<<
 * 
 *     def loads(self, bytes obj):
 */
  /*finally:*/ {
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_10 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      __pyx_r = __pyx_t_10;
      __pyx_t_10 = 0;
      goto __pyx_L0;
    }
  }

  /* "larch\pickle.pyx":987
 *         return self.default_find_class(module, name)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.Unpickler.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":994
 *             self.last_refcount = self.unpacker.reset()
 * 
 *     def loads(self, bytes obj):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_9loads(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_9loads(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), (&PyBytes_Type), 1, "obj", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5larch_6pickle_9Unpickler_8loads(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self), ((PyObject*)__pyx_v_obj));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_8loads(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);

  /* "larch\pickle.pyx":995
 * 
 *     def loads(self, bytes obj):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         (<_BufferContainer>self.file).set(obj)
 *         try:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_Unpickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":996
 *     def loads(self, bytes obj):
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)             # <<<<<<<<<<<<<<
 *         try:
 *             return self.unpacker.first_load_object()
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5larch_6pickle__BufferContainer *)((struct __pyx_obj_5larch_6pickle__BufferContainer *)__pyx_v_self->file)->__pyx_vtab)->set(((struct __pyx_obj_5larch_6pickle__BufferContainer *)__pyx_v_self->file), __pyx_v_obj)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":997
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)
 *         try:             # <<<<<<<<<<<<<<
 *             return self.unpacker.first_load_object()
 *         finally:
 */
  /*try:*/ {

    /* "larch\pickle.pyx":998
 *         (<_BufferContainer>self.file).set(obj)
 *         try:
 *             return self.unpacker.first_load_object()             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.unpacker.reset()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = __pyx_v_self->unpacker->load();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "larch\pickle.pyx":1000
 *             return self.unpacker.first_load_object()
 *         finally:
 *             self.last_refcount = self.unpacker.reset()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*exception exit:*/{
      __pyx_L4_error:;
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_10 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      __pyx_r = __pyx_t_10;
      __pyx_t_10 = 0;
      goto __pyx_L0;
    }
  }

  /* "larch\pickle.pyx":994
 *             self.last_refcount = self.unpacker.reset()
 * 
 *     def loads(self, bytes obj):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.Unpickler.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":920
 *         find_class_t call_find_class
 *         default_find_class_t default_find_class
 *         public uint32_t last_refcount             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, file=b""):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_13last_refcount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_9Unpickler_13last_refcount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_9Unpickler_13last_refcount___get__(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_9Unpickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->last_refcount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.Unpickler.last_refcount.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_9Unpickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_9Unpickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_9Unpickler_13last_refcount_2__set__(((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_9Unpickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->last_refcount = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.Unpickler.last_refcount.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":1003
 * 
 * 
 * cpdef dumps(obj, protocol=3):             # <<<<<<<<<<<<<<
 *     return Pickler(protocol=protocol).dump(obj).get_output_string()
 * 
 */

static PyObject *__pyx_pw_5larch_6pickle_3dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_dumps(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_dumps *__pyx_optional_args) {
  PyObject *__pyx_v_protocol = ((PyObject *)__pyx_int_3);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_protocol = __pyx_optional_args->protocol;
    }
  }

  /* "larch\pickle.pyx":1004
 * 
 * cpdef dumps(obj, protocol=3):
 *     return Pickler(protocol=protocol).dump(obj).get_output_string()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_protocol, __pyx_v_protocol) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle_Pickler)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dump); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_obj);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_output_string); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":1003
 * 
 * 
 * cpdef dumps(obj, protocol=3):             # <<<<<<<<<<<<<<
 *     return Pickler(protocol=protocol).dump(obj).get_output_string()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_3dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_3dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_protocol = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_protocol,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_protocol);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dumps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_protocol = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dumps", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_2dumps(__pyx_self, __pyx_v_obj, __pyx_v_protocol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_2dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_protocol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5larch_6pickle_dumps __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.protocol = __pyx_v_protocol;
  __pyx_t_1 = __pyx_f_5larch_6pickle_dumps(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":1007
 * 
 * 
 * cpdef dump(obj, file, protocol=3):             # <<<<<<<<<<<<<<
 *     Pickler(file, protocol=protocol).dump(obj)
 * 
 */

static PyObject *__pyx_pw_5larch_6pickle_5dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_dump(PyObject *__pyx_v_obj, PyObject *__pyx_v_file, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_dump *__pyx_optional_args) {
  PyObject *__pyx_v_protocol = ((PyObject *)__pyx_int_3);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_protocol = __pyx_optional_args->protocol;
    }
  }

  /* "larch\pickle.pyx":1008
 * 
 * cpdef dump(obj, file, protocol=3):
 *     Pickler(file, protocol=protocol).dump(obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_protocol, __pyx_v_protocol) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle_Pickler)), __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dump); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_obj);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":1007
 * 
 * 
 * cpdef dump(obj, file, protocol=3):             # <<<<<<<<<<<<<<
 *     Pickler(file, protocol=protocol).dump(obj)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_5dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_5dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_protocol = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_file,&__pyx_n_s_protocol,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dump", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_protocol);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_file = values[1];
    __pyx_v_protocol = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_4dump(__pyx_self, __pyx_v_obj, __pyx_v_file, __pyx_v_protocol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_4dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5larch_6pickle_dump __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.protocol = __pyx_v_protocol;
  __pyx_t_1 = __pyx_f_5larch_6pickle_dump(__pyx_v_obj, __pyx_v_file, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":1011
 * 
 * 
 * cpdef load(file):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(file)
 *     return unpickler.load()
 */

static PyObject *__pyx_pw_5larch_6pickle_7load(PyObject *__pyx_self, PyObject *__pyx_v_file); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_load(PyObject *__pyx_v_file, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_unpickler = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "larch\pickle.pyx":1012
 * 
 * cpdef load(file):
 *     cdef Unpickler unpickler = Unpickler(file)             # <<<<<<<<<<<<<<
 *     return unpickler.load()
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle_Unpickler)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_unpickler = ((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":1013
 * cpdef load(file):
 *     cdef Unpickler unpickler = Unpickler(file)
 *     return unpickler.load()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_unpickler), __pyx_n_s_load); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":1011
 * 
 * 
 * cpdef load(file):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(file)
 *     return unpickler.load()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_unpickler);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_7load(PyObject *__pyx_self, PyObject *__pyx_v_file); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_7load(PyObject *__pyx_self, PyObject *__pyx_v_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6load(__pyx_self, ((PyObject *)__pyx_v_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5larch_6pickle_load(__pyx_v_file, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch\pickle.pyx":1016
 * 
 * 
 * cpdef loads(bytes obj):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(obj)
 *     return unpickler.load()
 */

static PyObject *__pyx_pw_5larch_6pickle_9loads(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_loads(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_5larch_6pickle_Unpickler *__pyx_v_unpickler = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);

  /* "larch\pickle.pyx":1017
 * 
 * cpdef loads(bytes obj):
 *     cdef Unpickler unpickler = Unpickler(obj)             # <<<<<<<<<<<<<<
 *     return unpickler.load()
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_obj);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5larch_6pickle_Unpickler)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_unpickler = ((struct __pyx_obj_5larch_6pickle_Unpickler *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":1018
 * cpdef loads(bytes obj):
 *     cdef Unpickler unpickler = Unpickler(obj)
 *     return unpickler.load()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_unpickler), __pyx_n_s_load); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch\pickle.pyx":1016
 * 
 * 
 * cpdef loads(bytes obj):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(obj)
 *     return unpickler.load()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_unpickler);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_9loads(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_9loads(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), (&PyBytes_Type), 1, "obj", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5larch_6pickle_8loads(__pyx_self, ((PyObject*)__pyx_v_obj));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_8loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5larch_6pickle_loads(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5larch_6pickle_Pickler __pyx_vtable_5larch_6pickle_Pickler;

static PyObject *__pyx_tp_new_5larch_6pickle_Pickler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_Pickler *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_Pickler *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_Pickler;
  p->file = Py_None; Py_INCREF(Py_None);
  p->dispatch_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_Pickler(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_Pickler *p = (struct __pyx_obj_5larch_6pickle_Pickler *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5larch_6pickle_7Pickler_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->file);
  Py_CLEAR(p->dispatch_table);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_Pickler(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_Pickler *p = (struct __pyx_obj_5larch_6pickle_Pickler *)o;
  if (p->file) {
    e = (*v)(p->file, a); if (e) return e;
  }
  if (p->dispatch_table) {
    e = (*v)(p->dispatch_table, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_Pickler(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_Pickler *p = (struct __pyx_obj_5larch_6pickle_Pickler *)o;
  tmp = ((PyObject*)p->file);
  p->file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dispatch_table);
  p->dispatch_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5larch_6pickle_7Pickler_dispatch_table(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_7Pickler_dispatch_table(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_3__set__(o, v);
  }
  else {
    return __pyx_pw_5larch_6pickle_7Pickler_14dispatch_table_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5larch_6pickle_7Pickler_last_refcount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_7Pickler_13last_refcount_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_7Pickler_last_refcount(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_7Pickler_13last_refcount_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5larch_6pickle_Pickler[] = {
  {__Pyx_NAMESTR("dump"), (PyCFunction)__pyx_pw_5larch_6pickle_7Pickler_5dump, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dumps"), (PyCFunction)__pyx_pw_5larch_6pickle_7Pickler_7dumps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_output_string"), (PyCFunction)__pyx_pw_5larch_6pickle_7Pickler_9get_output_string, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5larch_6pickle_Pickler[] = {
  {(char *)"dispatch_table", __pyx_getprop_5larch_6pickle_7Pickler_dispatch_table, __pyx_setprop_5larch_6pickle_7Pickler_dispatch_table, 0, 0},
  {(char *)"last_refcount", __pyx_getprop_5larch_6pickle_7Pickler_last_refcount, __pyx_setprop_5larch_6pickle_7Pickler_last_refcount, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_Pickler = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("larch.pickle.Pickler"), /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_Pickler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_Pickler, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_Pickler, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_Pickler, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_Pickler, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5larch_6pickle_Pickler, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_7Pickler_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_Pickler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5larch_6pickle__FileLike(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle__FileLike *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle__FileLike *)o);
  p->write = Py_None; Py_INCREF(Py_None);
  p->read = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle__FileLike(PyObject *o) {
  struct __pyx_obj_5larch_6pickle__FileLike *p = (struct __pyx_obj_5larch_6pickle__FileLike *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->write);
  Py_CLEAR(p->read);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle__FileLike(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle__FileLike *p = (struct __pyx_obj_5larch_6pickle__FileLike *)o;
  if (p->write) {
    e = (*v)(p->write, a); if (e) return e;
  }
  if (p->read) {
    e = (*v)(p->read, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle__FileLike(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle__FileLike *p = (struct __pyx_obj_5larch_6pickle__FileLike *)o;
  tmp = ((PyObject*)p->write);
  p->write = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->read);
  p->read = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5larch_6pickle__FileLike[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle__FileLike = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("larch.pickle._FileLike"), /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle__FileLike), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle__FileLike, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle__FileLike, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle__FileLike, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle__FileLike, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_9_FileLike_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle__FileLike, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5larch_6pickle__BufferContainer __pyx_vtable_5larch_6pickle__BufferContainer;

static PyObject *__pyx_tp_new_5larch_6pickle__BufferContainer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle__BufferContainer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle__BufferContainer *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle__BufferContainer;
  new((void*)&(p->sreader)) StringReader();
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle__BufferContainer(PyObject *o) {
  struct __pyx_obj_5larch_6pickle__BufferContainer *p = (struct __pyx_obj_5larch_6pickle__BufferContainer *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  p->sreader.StringReader::~StringReader();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5larch_6pickle__BufferContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("larch.pickle._BufferContainer"), /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle__BufferContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle__BufferContainer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle__BufferContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5larch_6pickle_OutputBuffer __pyx_vtable_5larch_6pickle_OutputBuffer;

static PyObject *__pyx_tp_new_5larch_6pickle_OutputBuffer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_OutputBuffer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_OutputBuffer *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_OutputBuffer;
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_OutputBuffer(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5larch_6pickle_12OutputBuffer_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5larch_6pickle_OutputBuffer[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_OutputBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("larch.pickle.OutputBuffer"), /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_OutputBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_OutputBuffer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_OutputBuffer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_12OutputBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_OutputBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5larch_6pickle_ExternFileLike(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_ExternFileLike *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_ExternFileLike *)o);
  p->file = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_ExternFileLike(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_ExternFileLike *p = (struct __pyx_obj_5larch_6pickle_ExternFileLike *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->file);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_ExternFileLike(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_ExternFileLike *p = (struct __pyx_obj_5larch_6pickle_ExternFileLike *)o;
  if (p->file) {
    e = (*v)(p->file, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_ExternFileLike(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_ExternFileLike *p = (struct __pyx_obj_5larch_6pickle_ExternFileLike *)o;
  tmp = ((PyObject*)p->file);
  p->file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5larch_6pickle_ExternFileLike = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("larch.pickle.ExternFileLike"), /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_ExternFileLike), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_ExternFileLike, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_ExternFileLike, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_ExternFileLike, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_ExternFileLike, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5larch_6pickle_Unpickler __pyx_vtable_5larch_6pickle_Unpickler;

static PyObject *__pyx_tp_new_5larch_6pickle_Unpickler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_Unpickler *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_Unpickler *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_Unpickler;
  p->file = Py_None; Py_INCREF(Py_None);
  p->_find_class = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_Unpickler(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_Unpickler *p = (struct __pyx_obj_5larch_6pickle_Unpickler *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5larch_6pickle_9Unpickler_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->file);
  Py_CLEAR(p->_find_class);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_Unpickler(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_Unpickler *p = (struct __pyx_obj_5larch_6pickle_Unpickler *)o;
  if (p->file) {
    e = (*v)(p->file, a); if (e) return e;
  }
  if (p->_find_class) {
    e = (*v)(p->_find_class, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_Unpickler(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_Unpickler *p = (struct __pyx_obj_5larch_6pickle_Unpickler *)o;
  tmp = ((PyObject*)p->file);
  p->file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_find_class);
  p->_find_class = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5larch_6pickle_9Unpickler_last_refcount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_9Unpickler_13last_refcount_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_9Unpickler_last_refcount(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_9Unpickler_13last_refcount_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5larch_6pickle_Unpickler[] = {
  {__Pyx_NAMESTR("find_class"), (PyCFunction)__pyx_pw_5larch_6pickle_9Unpickler_5find_class, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_5larch_6pickle_9Unpickler_7load, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("loads"), (PyCFunction)__pyx_pw_5larch_6pickle_9Unpickler_9loads, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5larch_6pickle_Unpickler[] = {
  {(char *)"last_refcount", __pyx_getprop_5larch_6pickle_9Unpickler_last_refcount, __pyx_setprop_5larch_6pickle_9Unpickler_last_refcount, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_Unpickler = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("larch.pickle.Unpickler"), /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_Unpickler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_Unpickler, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_Unpickler, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_Unpickler, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_Unpickler, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5larch_6pickle_Unpickler, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_9Unpickler_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_Unpickler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("dumps"), (PyCFunction)__pyx_pw_5larch_6pickle_3dumps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dump"), (PyCFunction)__pyx_pw_5larch_6pickle_5dump, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_5larch_6pickle_7load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("loads"), (PyCFunction)__pyx_pw_5larch_6pickle_9loads, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("pickle"),
    __Pyx_DOCSTR(__pyx_k_Difference_to_python_pickle_no), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_BuiltinMethodType, __pyx_k_BuiltinMethodType, sizeof(__pyx_k_BuiltinMethodType), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_save_r, __pyx_k_Cannot_save_r, sizeof(__pyx_k_Cannot_save_r), 0, 0, 1, 0},
  {&__pyx_n_s_EOFError, __pyx_k_EOFError, sizeof(__pyx_k_EOFError), 0, 0, 1, 1},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_FunctionType, __pyx_k_FunctionType, sizeof(__pyx_k_FunctionType), 0, 0, 1, 1},
  {&__pyx_n_s_GeneratorType, __pyx_k_GeneratorType, sizeof(__pyx_k_GeneratorType), 0, 0, 1, 1},
  {&__pyx_n_s_IMPORT_MAPPING, __pyx_k_IMPORT_MAPPING, sizeof(__pyx_k_IMPORT_MAPPING), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_reference, __pyx_k_Invalid_reference, sizeof(__pyx_k_Invalid_reference), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_NAME_MAPPING, __pyx_k_NAME_MAPPING, sizeof(__pyx_k_NAME_MAPPING), 0, 0, 1, 1},
  {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Pickler___init___was_not_called, __pyx_k_Pickler___init___was_not_called, sizeof(__pyx_k_Pickler___init___was_not_called), 0, 0, 1, 0},
  {&__pyx_n_s_PicklingError, __pyx_k_PicklingError, sizeof(__pyx_k_PicklingError), 0, 0, 1, 1},
  {&__pyx_n_s_REVERSE_IMPORT_MAPPING, __pyx_k_REVERSE_IMPORT_MAPPING, sizeof(__pyx_k_REVERSE_IMPORT_MAPPING), 0, 0, 1, 1},
  {&__pyx_n_s_REVERSE_NAME_MAPPING, __pyx_k_REVERSE_NAME_MAPPING, sizeof(__pyx_k_REVERSE_NAME_MAPPING), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_load_code, __pyx_k_Unknown_load_code, sizeof(__pyx_k_Unknown_load_code), 0, 0, 1, 0},
  {&__pyx_kp_s_Unpickler___init___was_not_calle, __pyx_k_Unpickler___init___was_not_calle, sizeof(__pyx_k_Unpickler___init___was_not_calle), 0, 0, 1, 0},
  {&__pyx_n_s_UnpicklingError, __pyx_k_UnpicklingError, sizeof(__pyx_k_UnpicklingError), 0, 0, 1, 1},
  {&__pyx_kp_b__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 0, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_c_pickle, __pyx_k_c_pickle, sizeof(__pyx_k_c_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_compat_pickle, __pyx_k_compat_pickle, sizeof(__pyx_k_compat_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_copyreg, __pyx_k_copyreg, sizeof(__pyx_k_copyreg), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dispatch_table, __pyx_k_dispatch_table, sizeof(__pyx_k_dispatch_table), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_s_extension_cache, __pyx_k_extension_cache, sizeof(__pyx_k_extension_cache), 0, 0, 1, 1},
  {&__pyx_n_s_extension_registry, __pyx_k_extension_registry, sizeof(__pyx_k_extension_registry), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_file_like, __pyx_k_file_like, sizeof(__pyx_k_file_like), 0, 0, 1, 1},
  {&__pyx_n_s_find_class, __pyx_k_find_class, sizeof(__pyx_k_find_class), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_output_string, __pyx_k_get_output_string, sizeof(__pyx_k_get_output_string), 0, 0, 1, 1},
  {&__pyx_n_s_getinitargs, __pyx_k_getinitargs, sizeof(__pyx_k_getinitargs), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inner_func, __pyx_k_inner_func, sizeof(__pyx_k_inner_func), 0, 0, 1, 1},
  {&__pyx_n_s_inverted_registry, __pyx_k_inverted_registry, sizeof(__pyx_k_inverted_registry), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_larch_pickle, __pyx_k_larch_pickle, sizeof(__pyx_k_larch_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_module_2, __pyx_k_module_2, sizeof(__pyx_k_module_2), 0, 0, 1, 1},
  {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_newobj, __pyx_k_newobj, sizeof(__pyx_k_newobj), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_protocol, __pyx_k_protocol, sizeof(__pyx_k_protocol), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_with_refs, __pyx_k_with_refs, sizeof(__pyx_k_with_refs), 0, 0, 1, 1},
  {&__pyx_n_s_with_version, __pyx_k_with_version, sizeof(__pyx_k_with_version), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_kp_s_z_src_larch_dev_pickle_larch_pic, __pyx_k_z_src_larch_dev_pickle_larch_pic, sizeof(__pyx_k_z_src_larch_dev_pickle_larch_pic), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_EOFError = __Pyx_GetBuiltinName(__pyx_n_s_EOFError); if (!__pyx_builtin_EOFError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_n_s_import); if (!__pyx_builtin___import__) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "larch\pickle.pyx":798
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:
 *         raise UnpicklingError("Invalid reference")             # <<<<<<<<<<<<<<
 * 
 *     return <object>obj
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Invalid_reference); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "larch\pickle.pyx":815
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):
 *     raise UnpicklingError("Unknown load code")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unknown_load_code); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "larch\pickle.pyx":577
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 * 
 * def inner_func(): pass             # <<<<<<<<<<<<<<
 * register_type(inner_func, save_global)
 * del inner_func
 */
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_z_src_larch_dev_pickle_larch_pic, __pyx_n_s_inner_func, 577, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":824
 * 
 * 
 * _register_unpickle(load_uint4, range(0x80))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_128); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "larch\pickle.pyx":825
 * 
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_int_224, __pyx_int_256); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "larch\pickle.pyx":835
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_int_128, __pyx_int_144); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "larch\pickle.pyx":841
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_int_160, __pyx_int_192); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "larch\pickle.pyx":848
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_int_144, __pyx_int_160); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_160 = PyInt_FromLong(160); if (unlikely(!__pyx_int_160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_192 = PyInt_FromLong(192); if (unlikely(!__pyx_int_192)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_193 = PyInt_FromLong(193); if (unlikely(!__pyx_int_193)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_194 = PyInt_FromLong(194); if (unlikely(!__pyx_int_194)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_195 = PyInt_FromLong(195); if (unlikely(!__pyx_int_195)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_196 = PyInt_FromLong(196); if (unlikely(!__pyx_int_196)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_197 = PyInt_FromLong(197); if (unlikely(!__pyx_int_197)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_198 = PyInt_FromLong(198); if (unlikely(!__pyx_int_198)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_199 = PyInt_FromLong(199); if (unlikely(!__pyx_int_199)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_201 = PyInt_FromLong(201); if (unlikely(!__pyx_int_201)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_203 = PyInt_FromLong(203); if (unlikely(!__pyx_int_203)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_204 = PyInt_FromLong(204); if (unlikely(!__pyx_int_204)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_205 = PyInt_FromLong(205); if (unlikely(!__pyx_int_205)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_206 = PyInt_FromLong(206); if (unlikely(!__pyx_int_206)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_207 = PyInt_FromLong(207); if (unlikely(!__pyx_int_207)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_208 = PyInt_FromLong(208); if (unlikely(!__pyx_int_208)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_209 = PyInt_FromLong(209); if (unlikely(!__pyx_int_209)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_210 = PyInt_FromLong(210); if (unlikely(!__pyx_int_210)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_211 = PyInt_FromLong(211); if (unlikely(!__pyx_int_211)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_212 = PyInt_FromLong(212); if (unlikely(!__pyx_int_212)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_213 = PyInt_FromLong(213); if (unlikely(!__pyx_int_213)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_214 = PyInt_FromLong(214); if (unlikely(!__pyx_int_214)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_215 = PyInt_FromLong(215); if (unlikely(!__pyx_int_215)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_216 = PyInt_FromLong(216); if (unlikely(!__pyx_int_216)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_217 = PyInt_FromLong(217); if (unlikely(!__pyx_int_217)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_218 = PyInt_FromLong(218); if (unlikely(!__pyx_int_218)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_219 = PyInt_FromLong(219); if (unlikely(!__pyx_int_219)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_220 = PyInt_FromLong(220); if (unlikely(!__pyx_int_220)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_221 = PyInt_FromLong(221); if (unlikely(!__pyx_int_221)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_222 = PyInt_FromLong(222); if (unlikely(!__pyx_int_222)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_223 = PyInt_FromLong(223); if (unlikely(!__pyx_int_223)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_224 = PyInt_FromLong(224); if (unlikely(!__pyx_int_224)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1L = PyLong_FromString((char *)"1", 0, 0); if (unlikely(!__pyx_int_1L)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpickle(void); /*proto*/
PyMODINIT_FUNC initpickle(void)
#else
PyMODINIT_FUNC PyInit_pickle(void); /*proto*/
PyMODINIT_FUNC PyInit_pickle(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_opt_args_5larch_6pickle__register_unpickle __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_pickle(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("pickle"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_Difference_to_python_pickle_no), 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_larch__pickle) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "larch.pickle")) {
      if (unlikely(PyDict_SetItemString(modules, "larch.pickle", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_5larch_6pickle_name_mapping_2to3 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_import_mapping_2to3 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_name_mapping_3to2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_import_mapping_3to2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_dispatch_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_extension_registry = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_inverted_registry = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_extension_cache = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_modules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle__end_item = Py_None; Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle__string_type = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_5larch_6pickle_Pickler = &__pyx_vtable_5larch_6pickle_Pickler;
  __pyx_vtable_5larch_6pickle_Pickler.pack_import1 = (int (*)(struct __pyx_obj_5larch_6pickle_Pickler *, uint8_t, PyObject *))__pyx_f_5larch_6pickle_7Pickler_pack_import1;
  __pyx_vtable_5larch_6pickle_Pickler.pack_import2 = (int (*)(struct __pyx_obj_5larch_6pickle_Pickler *, uint8_t, PyObject *, PyObject *))__pyx_f_5larch_6pickle_7Pickler_pack_import2;
  __pyx_vtable_5larch_6pickle_Pickler.check_init = (int (*)(struct __pyx_obj_5larch_6pickle_Pickler *))__pyx_f_5larch_6pickle_7Pickler_check_init;
  __pyx_vtable_5larch_6pickle_Pickler.get_output_string = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_Pickler *, int __pyx_skip_dispatch))__pyx_f_5larch_6pickle_7Pickler_get_output_string;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_Pickler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5larch_6pickle_Pickler.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_Pickler.tp_dict, __pyx_vtabptr_5larch_6pickle_Pickler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Pickler", (PyObject *)&__pyx_type_5larch_6pickle_Pickler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5larch_6pickle_Pickler = &__pyx_type_5larch_6pickle_Pickler;
  if (PyType_Ready(&__pyx_type_5larch_6pickle__FileLike) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5larch_6pickle__FileLike.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "_FileLike", (PyObject *)&__pyx_type_5larch_6pickle__FileLike) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5larch_6pickle__FileLike = &__pyx_type_5larch_6pickle__FileLike;
  __pyx_vtabptr_5larch_6pickle__BufferContainer = &__pyx_vtable_5larch_6pickle__BufferContainer;
  __pyx_vtable_5larch_6pickle__BufferContainer.set = (struct __pyx_obj_5larch_6pickle__BufferContainer *(*)(struct __pyx_obj_5larch_6pickle__BufferContainer *, PyObject *))__pyx_f_5larch_6pickle_16_BufferContainer_set;
  if (PyType_Ready(&__pyx_type_5larch_6pickle__BufferContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5larch_6pickle__BufferContainer.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle__BufferContainer.tp_dict, __pyx_vtabptr_5larch_6pickle__BufferContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_BufferContainer", (PyObject *)&__pyx_type_5larch_6pickle__BufferContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5larch_6pickle__BufferContainer = &__pyx_type_5larch_6pickle__BufferContainer;
  __pyx_vtabptr_5larch_6pickle_OutputBuffer = &__pyx_vtable_5larch_6pickle_OutputBuffer;
  __pyx_vtable_5larch_6pickle_OutputBuffer.reset = (void (*)(struct __pyx_obj_5larch_6pickle_OutputBuffer *))__pyx_f_5larch_6pickle_12OutputBuffer_reset;
  __pyx_vtable_5larch_6pickle_OutputBuffer.result = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_OutputBuffer *))__pyx_f_5larch_6pickle_12OutputBuffer_result;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_OutputBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5larch_6pickle_OutputBuffer.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_OutputBuffer.tp_dict, __pyx_vtabptr_5larch_6pickle_OutputBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "OutputBuffer", (PyObject *)&__pyx_type_5larch_6pickle_OutputBuffer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5larch_6pickle_OutputBuffer = &__pyx_type_5larch_6pickle_OutputBuffer;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_ExternFileLike) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5larch_6pickle_ExternFileLike.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "ExternFileLike", (PyObject *)&__pyx_type_5larch_6pickle_ExternFileLike) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5larch_6pickle_ExternFileLike = &__pyx_type_5larch_6pickle_ExternFileLike;
  __pyx_vtabptr_5larch_6pickle_Unpickler = &__pyx_vtable_5larch_6pickle_Unpickler;
  __pyx_vtable_5larch_6pickle_Unpickler.set_protocol = (int (*)(struct __pyx_obj_5larch_6pickle_Unpickler *, uint8_t))__pyx_f_5larch_6pickle_9Unpickler_set_protocol;
  __pyx_vtable_5larch_6pickle_Unpickler.unpack_import = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_Unpickler *, size_t))__pyx_f_5larch_6pickle_9Unpickler_unpack_import;
  __pyx_vtable_5larch_6pickle_Unpickler.check_init = (int (*)(struct __pyx_obj_5larch_6pickle_Unpickler *))__pyx_f_5larch_6pickle_9Unpickler_check_init;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_Unpickler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5larch_6pickle_Unpickler.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_Unpickler.tp_dict, __pyx_vtabptr_5larch_6pickle_Unpickler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Unpickler", (PyObject *)&__pyx_type_5larch_6pickle_Unpickler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5larch_6pickle_Unpickler = &__pyx_type_5larch_6pickle_Unpickler;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "larch\pickle.pyx":43
 * """
 * 
 * import sys             # <<<<<<<<<<<<<<
 * import types
 * from libc.string cimport memcpy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":44
 * 
 * import sys
 * import types             # <<<<<<<<<<<<<<
 * from libc.string cimport memcpy
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_types, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":59
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     import copyreg             # <<<<<<<<<<<<<<
 *     import _compat_pickle
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copyreg, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyreg, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":60
 * IF PY_MAJOR_VERSION > 2:
 *     import copyreg
 *     import _compat_pickle             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_compat_pickle, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compat_pickle, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":63
 * 
 *     cdef:
 *         dict name_mapping_2to3 = _compat_pickle.NAME_MAPPING             # <<<<<<<<<<<<<<
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_NAME_MAPPING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_name_mapping_2to3);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_name_mapping_2to3, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":64
 *     cdef:
 *         dict name_mapping_2to3 = _compat_pickle.NAME_MAPPING
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING             # <<<<<<<<<<<<<<
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING
 *         dict import_mapping_3to2 = _compat_pickle.REVERSE_IMPORT_MAPPING
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IMPORT_MAPPING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_import_mapping_2to3);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_import_mapping_2to3, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":65
 *         dict name_mapping_2to3 = _compat_pickle.NAME_MAPPING
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING             # <<<<<<<<<<<<<<
 *         dict import_mapping_3to2 = _compat_pickle.REVERSE_IMPORT_MAPPING
 * ELSE:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_REVERSE_NAME_MAPPING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_name_mapping_3to2);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_name_mapping_3to2, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":66
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING
 *         dict import_mapping_3to2 = _compat_pickle.REVERSE_IMPORT_MAPPING             # <<<<<<<<<<<<<<
 * ELSE:
 *     import copy_reg as copyreg
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_REVERSE_IMPORT_MAPPING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_import_mapping_3to2);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_import_mapping_3to2, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":234
 * 
 * cdef:
 *     dict dispatch_table = copyreg.dispatch_table             # <<<<<<<<<<<<<<
 *     dict extension_registry = copyreg._extension_registry
 *     dict inverted_registry = copyreg._inverted_registry
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copyreg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dispatch_table); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_dispatch_table);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_dispatch_table, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":235
 * cdef:
 *     dict dispatch_table = copyreg.dispatch_table
 *     dict extension_registry = copyreg._extension_registry             # <<<<<<<<<<<<<<
 *     dict inverted_registry = copyreg._inverted_registry
 *     dict extension_cache = copyreg._extension_cache
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copyreg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_extension_registry); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_extension_registry);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_extension_registry, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":236
 *     dict dispatch_table = copyreg.dispatch_table
 *     dict extension_registry = copyreg._extension_registry
 *     dict inverted_registry = copyreg._inverted_registry             # <<<<<<<<<<<<<<
 *     dict extension_cache = copyreg._extension_cache
 *     dict modules = sys.modules
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copyreg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_inverted_registry); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_inverted_registry);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_inverted_registry, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":237
 *     dict extension_registry = copyreg._extension_registry
 *     dict inverted_registry = copyreg._inverted_registry
 *     dict extension_cache = copyreg._extension_cache             # <<<<<<<<<<<<<<
 *     dict modules = sys.modules
 *     _end_item = object()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copyreg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_extension_cache); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_extension_cache);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_extension_cache, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch\pickle.pyx":238
 *     dict inverted_registry = copyreg._inverted_registry
 *     dict extension_cache = copyreg._extension_cache
 *     dict modules = sys.modules             # <<<<<<<<<<<<<<
 *     _end_item = object()
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_modules); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_modules);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_modules, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":239
 *     dict extension_cache = copyreg._extension_cache
 *     dict modules = sys.modules
 *     _end_item = object()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_object, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle__end_item);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle__end_item, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch\pickle.pyx":337
 *     return ef.read(ef.file, data, size)
 * 
 * class PickleError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_PickleError, __pyx_n_s_PickleError, (PyObject *) NULL, __pyx_n_s_larch_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_PickleError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PickleError, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":340
 *     pass
 * 
 * class PicklingError(PickleError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PicklingError, __pyx_n_s_PicklingError, (PyObject *) NULL, __pyx_n_s_larch_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PicklingError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PicklingError, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":343
 *     pass
 * 
 * class UnpicklingError(PickleError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_UnpicklingError, __pyx_n_s_UnpicklingError, (PyObject *) NULL, __pyx_n_s_larch_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_UnpicklingError, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnpicklingError, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":544
 *         reraise()
 * 
 * save_object_ptr = save_object             # <<<<<<<<<<<<<<
 * 
 * 
 */
  save_object_ptr = __pyx_f_5larch_6pickle_save_object;

  /* "larch\pickle.pyx":564
 * 
 * 
 * register_type(1, save_int)             # <<<<<<<<<<<<<<
 * register_type(1L, save_long)
 * register_type(True, save_bool)
 */
  __pyx_f_5larch_6pickle_register_type(__pyx_int_1, save_int);

  /* "larch\pickle.pyx":565
 * 
 * register_type(1, save_int)
 * register_type(1L, save_long)             # <<<<<<<<<<<<<<
 * register_type(True, save_bool)
 * register_type(None, save_none)
 */
  __pyx_f_5larch_6pickle_register_type(__pyx_int_1L, __pyx_f_5larch_6pickle_save_long);

  /* "larch\pickle.pyx":566
 * register_type(1, save_int)
 * register_type(1L, save_long)
 * register_type(True, save_bool)             # <<<<<<<<<<<<<<
 * register_type(None, save_none)
 * register_type(1.0, save_float)
 */
  __pyx_f_5larch_6pickle_register_type(Py_True, save_bool);

  /* "larch\pickle.pyx":567
 * register_type(1L, save_long)
 * register_type(True, save_bool)
 * register_type(None, save_none)             # <<<<<<<<<<<<<<
 * register_type(1.0, save_float)
 * register_type((), save_tuple)
 */
  __pyx_f_5larch_6pickle_register_type(Py_None, save_none);

  /* "larch\pickle.pyx":568
 * register_type(True, save_bool)
 * register_type(None, save_none)
 * register_type(1.0, save_float)             # <<<<<<<<<<<<<<
 * register_type((), save_tuple)
 * register_type([], save_list)
 */
  __pyx_f_5larch_6pickle_register_type(__pyx_float_1_0, save_float);

  /* "larch\pickle.pyx":569
 * register_type(None, save_none)
 * register_type(1.0, save_float)
 * register_type((), save_tuple)             # <<<<<<<<<<<<<<
 * register_type([], save_list)
 * register_type({}, save_dict)
 */
  __pyx_f_5larch_6pickle_register_type(__pyx_empty_tuple, save_tuple);

  /* "larch\pickle.pyx":570
 * register_type(1.0, save_float)
 * register_type((), save_tuple)
 * register_type([], save_list)             # <<<<<<<<<<<<<<
 * register_type({}, save_dict)
 * register_type(type, save_global)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_f_5larch_6pickle_register_type(__pyx_t_2, save_list);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":571
 * register_type((), save_tuple)
 * register_type([], save_list)
 * register_type({}, save_dict)             # <<<<<<<<<<<<<<
 * register_type(type, save_global)
 * register_type(iter([]), save_impossible)
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_f_5larch_6pickle_register_type(__pyx_t_2, save_dict);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":572
 * register_type([], save_list)
 * register_type({}, save_dict)
 * register_type(type, save_global)             # <<<<<<<<<<<<<<
 * register_type(iter([]), save_impossible)
 * register_type(iter(()), save_impossible)
 */
  __pyx_f_5larch_6pickle_register_type(((PyObject *)((PyObject*)(&PyType_Type))), __pyx_f_5larch_6pickle_save_global);

  /* "larch\pickle.pyx":573
 * register_type({}, save_dict)
 * register_type(type, save_global)
 * register_type(iter([]), save_impossible)             # <<<<<<<<<<<<<<
 * register_type(iter(()), save_impossible)
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_5larch_6pickle_register_type(__pyx_t_1, __pyx_f_5larch_6pickle_save_impossible);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":574
 * register_type(type, save_global)
 * register_type(iter([]), save_impossible)
 * register_type(iter(()), save_impossible)             # <<<<<<<<<<<<<<
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 * 
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_empty_tuple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_5larch_6pickle_register_type(__pyx_t_1, __pyx_f_5larch_6pickle_save_impossible);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":575
 * register_type(iter([]), save_impossible)
 * register_type(iter(()), save_impossible)
 * pickle_registry.register_type(types.GeneratorType, save_impossible)             # <<<<<<<<<<<<<<
 * 
 * def inner_func(): pass
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GeneratorType); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  pickle_registry.register_type(__pyx_t_2, __pyx_f_5larch_6pickle_save_impossible);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":577
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 * 
 * def inner_func(): pass             # <<<<<<<<<<<<<<
 * register_type(inner_func, save_global)
 * del inner_func
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5larch_6pickle_1inner_func, NULL, __pyx_n_s_larch_pickle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inner_func, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":578
 * 
 * def inner_func(): pass
 * register_type(inner_func, save_global)             # <<<<<<<<<<<<<<
 * del inner_func
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_inner_func); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_f_5larch_6pickle_register_type(__pyx_t_2, __pyx_f_5larch_6pickle_save_global);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":579
 * def inner_func(): pass
 * register_type(inner_func, save_global)
 * del inner_func             # <<<<<<<<<<<<<<
 * 
 * pickle_registry.register_type(types.FunctionType, save_global)
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_inner_func) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "larch\pickle.pyx":581
 * del inner_func
 * 
 * pickle_registry.register_type(types.FunctionType, save_global)             # <<<<<<<<<<<<<<
 * 
 * IF PY_MAJOR_VERSION > 2:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_FunctionType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  pickle_registry.register_type(__pyx_t_1, __pyx_f_5larch_6pickle_save_global);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":585
 * IF PY_MAJOR_VERSION > 2:
 *     #the string type will be used as first dump candidate!
 *     cdef _string_type = type(unicode())             # <<<<<<<<<<<<<<
 *     string_type = <void*>_string_type
 *     save_string_ptr = save_str3
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyUnicode_Type))), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_t_1)));
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle__string_type);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle__string_type, ((PyObject *)Py_TYPE(__pyx_t_1)));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_t_1)));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":586
 *     #the string type will be used as first dump candidate!
 *     cdef _string_type = type(unicode())
 *     string_type = <void*>_string_type             # <<<<<<<<<<<<<<
 *     save_string_ptr = save_str3
 *     register_type(bytes(), save_bytes)
 */
  string_type = ((void *)__pyx_v_5larch_6pickle__string_type);

  /* "larch\pickle.pyx":587
 *     cdef _string_type = type(unicode())
 *     string_type = <void*>_string_type
 *     save_string_ptr = save_str3             # <<<<<<<<<<<<<<
 *     register_type(bytes(), save_bytes)
 * ELSE:
 */
  save_string_ptr = save_str3;

  /* "larch\pickle.pyx":588
 *     string_type = <void*>_string_type
 *     save_string_ptr = save_str3
 *     register_type(bytes(), save_bytes)             # <<<<<<<<<<<<<<
 * ELSE:
 *     cdef _string_type = type(bytes())
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_5larch_6pickle_register_type(__pyx_t_1, save_bytes);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":824
 * 
 * 
 * _register_unpickle(load_uint4, range(0x80))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_range, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_uint4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":825
 * 
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_int4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":826
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint8, [0xcc])
 * _register_unpickle(load_uint16, [0xcd])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_193);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_193);
  __Pyx_GIVEREF(__pyx_int_193);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_ref), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":827
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint16, [0xcd])
 * _register_unpickle(load_uint32, [0xce])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_204);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_204);
  __Pyx_GIVEREF(__pyx_int_204);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_uint8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":828
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])
 * _register_unpickle(load_uint16, [0xcd])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint32, [0xce])
 * _register_unpickle(load_uint64, [0xcf])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_205);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_205);
  __Pyx_GIVEREF(__pyx_int_205);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_uint16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":829
 * _register_unpickle(load_uint8, [0xcc])
 * _register_unpickle(load_uint16, [0xcd])
 * _register_unpickle(load_uint32, [0xce])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint64, [0xcf])
 * _register_unpickle(load_int8, [0xd0])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_206);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_206);
  __Pyx_GIVEREF(__pyx_int_206);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_uint32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":830
 * _register_unpickle(load_uint16, [0xcd])
 * _register_unpickle(load_uint32, [0xce])
 * _register_unpickle(load_uint64, [0xcf])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int8, [0xd0])
 * _register_unpickle(load_int16, [0xd1])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_207);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_207);
  __Pyx_GIVEREF(__pyx_int_207);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_uint64, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":831
 * _register_unpickle(load_uint32, [0xce])
 * _register_unpickle(load_uint64, [0xcf])
 * _register_unpickle(load_int8, [0xd0])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int16, [0xd1])
 * _register_unpickle(load_int32, [0xd2])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_208);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_208);
  __Pyx_GIVEREF(__pyx_int_208);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_int8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":832
 * _register_unpickle(load_uint64, [0xcf])
 * _register_unpickle(load_int8, [0xd0])
 * _register_unpickle(load_int16, [0xd1])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_209);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_209);
  __Pyx_GIVEREF(__pyx_int_209);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_int16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":833
 * _register_unpickle(load_int8, [0xd0])
 * _register_unpickle(load_int16, [0xd1])
 * _register_unpickle(load_int32, [0xd2])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_210);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_210);
  __Pyx_GIVEREF(__pyx_int_210);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_int32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":834
 * _register_unpickle(load_int16, [0xd1])
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map4, range(0x80, 0x90))
 * _register_unpickle(load_map16,[0xde])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_211);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_211);
  __Pyx_GIVEREF(__pyx_int_211);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_int64, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":835
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_map4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":836
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))
 * _register_unpickle(load_map16,[0xde])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map32, [0xdf])
 * _register_unpickle(load_nil, [0xc0])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_222);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_222);
  __Pyx_GIVEREF(__pyx_int_222);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_map16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":837
 * _register_unpickle(load_map4, range(0x80, 0x90))
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_nil, [0xc0])
 * _register_unpickle(load_false, [0xc2])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_223);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_223);
  __Pyx_GIVEREF(__pyx_int_223);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_map32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":838
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])
 * _register_unpickle(load_nil, [0xc0])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_192);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_192);
  __Pyx_GIVEREF(__pyx_int_192);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_nil, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":839
 * _register_unpickle(load_map32, [0xdf])
 * _register_unpickle(load_nil, [0xc0])
 * _register_unpickle(load_false, [0xc2])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_194);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_194);
  __Pyx_GIVEREF(__pyx_int_194);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_false, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":840
 * _register_unpickle(load_nil, [0xc0])
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 * _register_unpickle(load_str8, [0xd9])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_195);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_195);
  __Pyx_GIVEREF(__pyx_int_195);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_true, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":841
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])
 */
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_str4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":842
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 * _register_unpickle(load_str8, [0xd9])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str16, [0xda])
 * _register_unpickle(load_str32, [0xdb])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_217);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_217);
  __Pyx_GIVEREF(__pyx_int_217);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_str8, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":843
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str32, [0xdb])
 * _register_unpickle(load_bin8, [0xc4])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_218);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_218);
  __Pyx_GIVEREF(__pyx_int_218);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_str16, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":844
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])
 * _register_unpickle(load_str32, [0xdb])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bin8, [0xc4])
 * _register_unpickle(load_bin16, [0xc5])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_219);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_219);
  __Pyx_GIVEREF(__pyx_int_219);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_str32, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":845
 * _register_unpickle(load_str16, [0xda])
 * _register_unpickle(load_str32, [0xdb])
 * _register_unpickle(load_bin8, [0xc4])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_196);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_196);
  __Pyx_GIVEREF(__pyx_int_196);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_bin8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":846
 * _register_unpickle(load_str32, [0xdb])
 * _register_unpickle(load_bin8, [0xc4])
 * _register_unpickle(load_bin16, [0xc5])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_197);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_197);
  __Pyx_GIVEREF(__pyx_int_197);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_bin16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":847
 * _register_unpickle(load_bin8, [0xc4])
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 * _register_unpickle(load_array16, [0xdc])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_198);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_198);
  __Pyx_GIVEREF(__pyx_int_198);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_bin32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":848
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_range, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_array4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":849
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 * _register_unpickle(load_array16, [0xdc])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array32, [0xdd])
 * _register_unpickle(load_float, [0xcb])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_220);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_220);
  __Pyx_GIVEREF(__pyx_int_220);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_array16, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":850
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_float, [0xcb])
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_221);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_221);
  __Pyx_GIVEREF(__pyx_int_221);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_array32, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":851
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])
 * _register_unpickle(load_float, [0xcb])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 * _register_unpickle(load_ext8, [0xc7])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_203);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_203);
  __Pyx_GIVEREF(__pyx_int_203);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_float, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":852
 * _register_unpickle(load_array32, [0xdd])
 * _register_unpickle(load_float, [0xcb])
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_ext8, [0xc7])
 * _register_unpickle(load_ext16, [0xc8])
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_212);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_212);
  __Pyx_GIVEREF(__pyx_int_212);
  __Pyx_INCREF(__pyx_int_213);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_213);
  __Pyx_GIVEREF(__pyx_int_213);
  __Pyx_INCREF(__pyx_int_214);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_214);
  __Pyx_GIVEREF(__pyx_int_214);
  __Pyx_INCREF(__pyx_int_215);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_215);
  __Pyx_GIVEREF(__pyx_int_215);
  __Pyx_INCREF(__pyx_int_216);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_216);
  __Pyx_GIVEREF(__pyx_int_216);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_extf, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":853
 * _register_unpickle(load_float, [0xcb])
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 * _register_unpickle(load_ext8, [0xc7])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_ext16, [0xc8])
 * _register_unpickle(load_ext32, [0xc9])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_199);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_199);
  __Pyx_GIVEREF(__pyx_int_199);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_ext8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":854
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 * _register_unpickle(load_ext8, [0xc7])
 * _register_unpickle(load_ext16, [0xc8])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_ext32, [0xc9])
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_200);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_200);
  __Pyx_GIVEREF(__pyx_int_200);
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(load_ext16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":855
 * _register_unpickle(load_ext8, [0xc7])
 * _register_unpickle(load_ext16, [0xc8])
 * _register_unpickle(load_ext32, [0xc9])             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 * _register_unpickle(load_long, [LONG], 0x100)
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_201);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_201);
  __Pyx_GIVEREF(__pyx_int_201);
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_ext32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":856
 * _register_unpickle(load_ext16, [0xc8])
 * _register_unpickle(load_ext32, [0xc9])
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_long, [LONG], 0x100)
 * _register_unpickle(load_list, [LIST], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(VERSION); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_version), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":857
 * _register_unpickle(load_ext32, [0xc9])
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 * _register_unpickle(load_long, [LONG], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_list, [LIST], 0x100)
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(LONG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_long, __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":858
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 * _register_unpickle(load_long, [LONG], 0x100)
 * _register_unpickle(load_list, [LIST], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(LIST); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_list, __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":859
 * _register_unpickle(load_long, [LONG], 0x100)
 * _register_unpickle(load_list, [LIST], 0x100)
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(GLOBAL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_global), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":860
 * _register_unpickle(load_list, [LIST], 0x100)
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW], 0x100)
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(OBJECT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_object), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":861
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(OBJECT_NEW); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_object_new), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":862
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW], 0x100)
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(SINGLETON); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_singleton), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":863
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW], 0x100)
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(OLD_STYLE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_oldstyle), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":864
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(INIT_ARGS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_initargs), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":865
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 * _register_unpickle(load_unicode, [UNISTR], 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(END_OBJECT_ITEMS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_end_item), __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":866
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 * _register_unpickle(load_bytes, [BYTES], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_unicode, [UNISTR], 0x100)
 * _register_unpickle(<unpack_t>load_wrong_code, range(COUNT_EXT_TYPES, 0x100), 0x100)
 */
  __pyx_t_1 = PyInt_FromLong(BYTES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_bytes, __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":867
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 * _register_unpickle(load_unicode, [UNISTR], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_wrong_code, range(COUNT_EXT_TYPES, 0x100), 0x100)
 * 
 */
  __pyx_t_1 = PyInt_FromLong(UNISTR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle__register_unpickle(load_unicode, __pyx_t_2, &__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch\pickle.pyx":868
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 * _register_unpickle(load_unicode, [UNISTR], 0x100)
 * _register_unpickle(<unpack_t>load_wrong_code, range(COUNT_EXT_TYPES, 0x100), 0x100)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyInt_FromLong(COUNT_EXT_TYPES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_256);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_256);
  __Pyx_GIVEREF(__pyx_int_256);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_load_wrong_code), __pyx_t_1, &__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch\pickle.pyx":1
 * #cython: boundscheck=False, always_allow_keywords=False, profile=False             # <<<<<<<<<<<<<<
 * """
 * 
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init larch.pickle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init larch.pickle");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, length * kind);
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_PyObject_CallMethod1((PyObject*)&PyDict_Type, __pyx_n_s_items, d);
    else
        return PyDict_Items(d);
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint32_t");
                return (uint32_t) -1;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint32_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint32_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint32_t");
                return (uint32_t) -1;
            }
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint32_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint32_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint32_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint32_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, long, PyLong_AsLong)
            } else if (sizeof(uint32_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value) {
    const uint8_t neg_one = (uint8_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
    const uint8_t neg_one = (uint8_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint8_t");
                return (uint8_t) -1;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint8_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint8_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint8_t");
                return (uint8_t) -1;
            }
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint8_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint8_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint8_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint8_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, long, PyLong_AsLong)
            } else if (sizeof(uint8_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
