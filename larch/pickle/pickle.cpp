/* Generated by Cython 0.29.23 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_23"
#define CYTHON_HEX_VERSION 0x001D17F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__larch__pickle__pickle
#define __PYX_HAVE_API__larch__pickle__pickle
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "structmember.h"
#include "pickle.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "pack.hpp"
#include "unpack.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "larch/pickle/pickle.pyx",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer;
struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer;
struct __pyx_obj_5larch_6pickle_6pickle__FileLike;
struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike;
struct __pyx_obj_5larch_6pickle_6pickle_Pickler;
struct __pyx_obj_5larch_6pickle_6pickle_Unpickler;
struct __pyx_opt_args_5larch_6pickle_6pickle__register_unpickle;
struct __pyx_opt_args_5larch_6pickle_6pickle_dumps;
struct __pyx_opt_args_5larch_6pickle_6pickle_dump;
struct __pyx_opt_args_5larch_6pickle_6pickle_load;
struct __pyx_opt_args_5larch_6pickle_6pickle_loads;

/* "larch/pickle/pickle.pyx":271
 * 
 * 
 * ctypedef int (*write_file_t)(object file, void *data, size_t size)             # <<<<<<<<<<<<<<
 * """writes data to file"""
 * 
 */
typedef int (*__pyx_t_5larch_6pickle_6pickle_write_file_t)(PyObject *, void *, size_t);

/* "larch/pickle/pickle.pyx":274
 * """writes data to file"""
 * 
 * ctypedef int (*read_file_t)(object file, void *data, size_t size)             # <<<<<<<<<<<<<<
 * """reads data from file"""
 * 
 */
typedef int (*__pyx_t_5larch_6pickle_6pickle_read_file_t)(PyObject *, void *, size_t);

/* "larch/pickle/pickle.pyx":677
 * # -----------------------------------
 * 
 * ctypedef int (*pack_import_names_t)(Packer* p, module, name) except -1             # <<<<<<<<<<<<<<
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:
 */
typedef int (*__pyx_t_5larch_6pickle_6pickle_pack_import_names_t)(Packer *, PyObject *, PyObject *);

/* "larch/pickle/pickle.pyx":963
 * 
 * 
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in codes:
 */
struct __pyx_opt_args_5larch_6pickle_6pickle__register_unpickle {
  int __pyx_n;
  int offset;
};

/* "larch/pickle/pickle.pyx":1019
 * cdef class Unpickler
 * 
 * ctypedef object (*find_class_t)(Unpickler unpickler, module, name)             # <<<<<<<<<<<<<<
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):
 */
typedef PyObject *(*__pyx_t_5larch_6pickle_6pickle_find_class_t)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, PyObject *, PyObject *);

/* "larch/pickle/pickle.pyx":1029
 * 
 * 
 * ctypedef object (*default_find_class_t)(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef PyObject *(*__pyx_t_5larch_6pickle_6pickle_default_find_class_t)(PyObject *, PyObject *);

/* "larch/pickle/pickle.pyx":1196
 * 
 * 
 * cpdef dumps(obj, protocol=-1, with_refs=True):             # <<<<<<<<<<<<<<
 *     return Pickler(protocol=protocol, with_refs=with_refs)\
 *         .dump(obj).get_output_string()
 */
struct __pyx_opt_args_5larch_6pickle_6pickle_dumps {
  int __pyx_n;
  PyObject *protocol;
  PyObject *with_refs;
};

/* "larch/pickle/pickle.pyx":1201
 * 
 * 
 * cpdef dump(obj, file, protocol=-1):             # <<<<<<<<<<<<<<
 *     Pickler(file, protocol=protocol).dump(obj)
 * 
 */
struct __pyx_opt_args_5larch_6pickle_6pickle_dump {
  int __pyx_n;
  PyObject *protocol;
};

/* "larch/pickle/pickle.pyx":1205
 * 
 * 
 * cpdef load(file, secure=False):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(file, secure=secure)
 *     return unpickler.load()
 */
struct __pyx_opt_args_5larch_6pickle_6pickle_load {
  int __pyx_n;
  PyObject *secure;
};

/* "larch/pickle/pickle.pyx":1210
 * 
 * 
 * cpdef loads(bytes obj, secure=False):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(obj, secure=secure)
 *     return unpickler.load()
 */
struct __pyx_opt_args_5larch_6pickle_6pickle_loads {
  int __pyx_n;
  PyObject *secure;
};

/* "larch/pickle/pickle.pyx":284
 * # String Buffer
 * @cython.auto_pickle(False)
 * cdef class OutputBuffer:             # <<<<<<<<<<<<<<
 *     cdef StringWriter *writer
 * 
 */
struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_6pickle_OutputBuffer *__pyx_vtab;
  StringWriter *writer;
};


/* "larch/pickle/pickle.pyx":305
 * 
 * @cython.auto_pickle(False)
 * cdef class _BufferContainer:             # <<<<<<<<<<<<<<
 *     cdef StringReader sreader
 * 
 */
struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_6pickle__BufferContainer *__pyx_vtab;
  StringReader sreader;
};


/* "larch/pickle/pickle.pyx":321
 * # Python Filelike
 * @cython.auto_pickle(False)
 * cdef class _FileLike:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object write
 */
struct __pyx_obj_5larch_6pickle_6pickle__FileLike {
  PyObject_HEAD
  PyObject *write;
  PyObject *read;
};


/* "larch/pickle/pickle.pyx":350
 * # External (cython) filelike
 * @cython.auto_pickle(False)
 * cdef class ExternFileLike:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object file
 */
struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike {
  PyObject_HEAD
  PyObject *file;
  __pyx_t_5larch_6pickle_6pickle_write_file_t write;
  __pyx_t_5larch_6pickle_6pickle_read_file_t read;
};


/* "larch/pickle/pickle.pyx":267
 * 
 * 
 * cdef class Pickler             # <<<<<<<<<<<<<<
 * cdef class Unpickler
 * 
 */
struct __pyx_obj_5larch_6pickle_6pickle_Pickler {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *__pyx_vtab;
  PyObject *file;
  Packer *packer;
  uint8_t protocol;
  __pyx_t_5larch_6pickle_6pickle_pack_import_names_t pack_import_names;
  PyObject *dispatch_table;
  uint32_t last_refcount;
};


/* "larch/pickle/pickle.pyx":268
 * 
 * cdef class Pickler
 * cdef class Unpickler             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5larch_6pickle_6pickle_Unpickler {
  PyObject_HEAD
  struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *__pyx_vtab;
  PyObject *file;
  Unpacker *unpacker;
  PyObject *_find_class;
  __pyx_t_5larch_6pickle_6pickle_find_class_t call_find_class;
  __pyx_t_5larch_6pickle_6pickle_default_find_class_t default_find_class;
  uint32_t last_refcount;
  bool secure;
};



/* "larch/pickle/pickle.pyx":699
 * 
 * @cython.auto_pickle(False)
 * cdef class Pickler:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object file
 */

struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler {
  int (*pack_import1)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *, uint8_t, PyObject *);
  int (*pack_import2)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *, uint8_t, PyObject *, PyObject *);
  int (*check_init)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *);
  PyObject *(*get_output_string)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *__pyx_vtabptr_5larch_6pickle_6pickle_Pickler;


/* "larch/pickle/pickle.pyx":1071
 * 
 * @cython.auto_pickle(False)
 * cdef class Unpickler:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object file
 */

struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler {
  int (*set_protocol)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, uint8_t);
  PyObject *(*unpack_import)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, size_t);
  int (*check_init)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *);
  PyObject *(*verify_object)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *__pyx_vtabptr_5larch_6pickle_6pickle_Unpickler;


/* "larch/pickle/pickle.pyx":284
 * # String Buffer
 * @cython.auto_pickle(False)
 * cdef class OutputBuffer:             # <<<<<<<<<<<<<<
 *     cdef StringWriter *writer
 * 
 */

struct __pyx_vtabstruct_5larch_6pickle_6pickle_OutputBuffer {
  void (*reset)(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *);
  PyObject *(*result)(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *);
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle_OutputBuffer *__pyx_vtabptr_5larch_6pickle_6pickle_OutputBuffer;


/* "larch/pickle/pickle.pyx":305
 * 
 * @cython.auto_pickle(False)
 * cdef class _BufferContainer:             # <<<<<<<<<<<<<<
 *     cdef StringReader sreader
 * 
 */

struct __pyx_vtabstruct_5larch_6pickle_6pickle__BufferContainer {
  struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *(*set)(struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *, PyObject *);
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle__BufferContainer *__pyx_vtabptr_5larch_6pickle_6pickle__BufferContainer;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__EXT_TYPES(enum EXT_TYPES value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_5larch_6pickle_6pickle_12OutputBuffer_reset(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_12OutputBuffer_result(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self); /* proto*/
static struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *__pyx_f_5larch_6pickle_6pickle_16_BufferContainer_set(struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *__pyx_v_self, PyObject *__pyx_v_buffer); /* proto*/
static int __pyx_f_5larch_6pickle_6pickle_7Pickler_pack_import1(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, uint8_t __pyx_v_code, PyObject *__pyx_v_o); /* proto*/
static int __pyx_f_5larch_6pickle_6pickle_7Pickler_pack_import2(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, uint8_t __pyx_v_code, PyObject *__pyx_v_module, PyObject *__pyx_v_name); /* proto*/
static int __pyx_f_5larch_6pickle_6pickle_7Pickler_check_init(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_7Pickler_get_output_string(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_5larch_6pickle_6pickle_9Unpickler_set_protocol(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, uint8_t __pyx_v_protocol); /* proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_9Unpickler_unpack_import(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, size_t __pyx_v_size); /* proto*/
static int __pyx_f_5larch_6pickle_6pickle_9Unpickler_check_init(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_9Unpickler_verify_object(CYTHON_UNUSED struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name, PyObject *__pyx_v_obj, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'larch.pickle.pickle' */
static PyTypeObject *__pyx_ptype_5larch_6pickle_6pickle_Pickler = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_6pickle_Unpickler = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_6pickle_OutputBuffer = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_6pickle__BufferContainer = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_6pickle__FileLike = 0;
static PyTypeObject *__pyx_ptype_5larch_6pickle_6pickle_ExternFileLike = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_secure_objects = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_secure_modules = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_name_mapping_2to3 = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_import_mapping_2to3 = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_name_mapping_3to2 = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_import_mapping_3to2 = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_dispatch_table = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_extension_registry = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_inverted_registry = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_extension_cache = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle_modules = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle__end_item = 0;
static PyObject *__pyx_v_5larch_6pickle_6pickle__string_type = 0;
static PyObject *__pyx_f_5larch_6pickle_6pickle_show_debug(char *, PyObject *, long); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_write_buffer(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_read_buffer(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_write_file(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_read_file(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_write_external(PyObject *, void *, size_t); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_read_external(PyObject *, void *, size_t); /*proto*/
static CYTHON_INLINE void __pyx_f_5larch_6pickle_6pickle_reraise(void); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_save_long(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_global(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_save_global(Packer *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_pack_state_array(Packer *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_pack_state_dict(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_save_object_state(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_reduced(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_save_reduced(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_new_object(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_new_object_finish(Packer *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE void __pyx_f_5larch_6pickle_6pickle_save_new_object(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__fast_save(Packer *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__fast_save_finish(Packer *, PyObject *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle__save__newobj__(Packer *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_object(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_save_object(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_save_impossible(Packer *, PyObject *); /*proto*/
static void __pyx_f_5larch_6pickle_6pickle_register_type(PyObject *, pack_t); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_simple_pack(Packer *, PyObject *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle_mapped_pack(Packer *, PyObject *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle__load_slot_state(PyObject *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle__load_state(PyObject *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle__load_state_sequence(Unpacker *, PyObject *); /*proto*/
static int __pyx_f_5larch_6pickle_6pickle__load_state_dict(Unpacker *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle__load_object(Unpacker *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_object(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_object_new(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_object_fast(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_singleton(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_oldstyle(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_initargs(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_end_item(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_ref(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_global(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_global_object(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_version(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load_wrong_code(Unpacker *, uint8_t, size_t); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle__register_unpickle(unpack_t, PyObject *, struct __pyx_opt_args_5larch_6pickle_6pickle__register_unpickle *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_call_default_find_class(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_call_sub_find_class(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_simple_find_class(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_mapped_find_class(PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_dumps(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_dumps *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_dump(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_dump *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_load *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_loads(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_loads *__pyx_optional_args); /*proto*/
#define __Pyx_MODULE_NAME "larch.pickle.pickle"
extern int __pyx_module_is_main_larch__pickle__pickle;
int __pyx_module_is_main_larch__pickle__pickle = 0;

/* Implementation of 'larch.pickle.pickle' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_hex;
static PyObject *__pyx_builtin_EOFError;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_KeyError;
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = "";
static const char __pyx_k__4[] = "_";
static const char __pyx_k_add[] = "add_";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_hex[] = "hex";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_NULL[] = "NULL";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dump[] = "dump";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_newobj[] = "__newobj__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_secure[] = "secure";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Pickler[] = "Pickler";
static const char __pyx_k_copyreg[] = "copyreg";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_modules[] = "modules";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_EOFError[] = "EOFError";
static const char __pyx_k_FileLike[] = "_FileLike";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_builtins[] = "builtins";
static const char __pyx_k_c_pickle[] = "c_pickle";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_module_2[] = "module";
static const char __pyx_k_operator[] = "operator";
static const char __pyx_k_protocol[] = "protocol";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_Unpickler[] = "Unpickler";
static const char __pyx_k_file_like[] = "file_like";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_with_refs[] = "with_refs";
static const char __pyx_k_find_class[] = "find_class";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_stack_info[] = "stack_info";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_NAME_MAPPING[] = "NAME_MAPPING";
static const char __pyx_k_OutputBuffer[] = "OutputBuffer";
static const char __pyx_k_larch_pickle[] = "larch.pickle";
static const char __pyx_k_with_version[] = "with_version";
static const char __pyx_k_Cannot_save_r[] = "Cannot save {!r}";
static const char __pyx_k_GeneratorType[] = "GeneratorType";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_PicklingError[] = "PicklingError";
static const char __pyx_k_SecurityError[] = "SecurityError";
static const char __pyx_k_compat_pickle[] = "_compat_pickle";
static const char __pyx_k_pickle_secure[] = "__pickle_secure__";
static const char __pyx_k_verify_object[] = "verify_object";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_ExternFileLike[] = "ExternFileLike";
static const char __pyx_k_IMPORT_MAPPING[] = "IMPORT_MAPPING";
static const char __pyx_k_dispatch_table[] = "dispatch_table";
static const char __pyx_k_secure_modules[] = "secure_modules";
static const char __pyx_k_secure_objects[] = "secure_objects";
static const char __pyx_k_BufferContainer[] = "_BufferContainer";
static const char __pyx_k_UnpicklingError[] = "UnpicklingError";
static const char __pyx_k_extension_cache[] = "_extension_cache";
static const char __pyx_k_pickle_register[] = "pickle_register";
static const char __pyx_k_secure_unpickle[] = "secure_unpickle";
static const char __pyx_k_BuiltinMethodType[] = "BuiltinMethodType";
static const char __pyx_k_Invalid_reference[] = "Invalid reference";
static const char __pyx_k_SecurityError_r_r[] = "SecurityError %r %r";
static const char __pyx_k_Unknown_load_code[] = "Unknown load code";
static const char __pyx_k_get_output_string[] = "get_output_string";
static const char __pyx_k_inverted_registry[] = "_inverted_registry";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_extension_registry[] = "_extension_registry";
static const char __pyx_k_larch_pickle_pickle[] = "larch.pickle.pickle";
static const char __pyx_k_REVERSE_NAME_MAPPING[] = "REVERSE_NAME_MAPPING";
static const char __pyx_k_REVERSE_IMPORT_MAPPING[] = "REVERSE_IMPORT_MAPPING";
static const char __pyx_k_object_not_save_for_loading[] = "object not save for loading";
static const char __pyx_k_Difference_to_python_pickle_no[] = "\n\nDifference to python pickle:\n----------------------------\n\n- no memo attribute\n- no clear_memo()\n- no persistent_id interface\n- pickle3 can only load utf8 encoded pickle2 strings\n\n\nDifferences to msg pack protocol:\n--------------------------------\n\next type LIST:\n   the size field is interpreted as item count\n\next type VERSION:\n   the size field is interpreted as version number\n\next type OBJECT:\n   after the extension byte the object state is saved\n\n0xc1:\n   this opcode is interpreted as REF Field\n   +------+------+------+------+------+\n   | 0xcf |XXXXXX|xxxxxx|xxxxxx|xxxxxx|\n   +------+------+------+------+------+\n   XXXX 32bit big-endian ref id\n\n\nPython 2 <-> Python 3 Pickle\n----------------------------\n\nPython 2 pickles strings(bytes) to msg-pack str type and unicode to\nthe extension type UNISTR\n\nPython 3 pickles strings(unicode) to msg-pack str type and bytes to\nmsg-pack byte type\n\nCHANGES TO Protocol 4\nType OBJECT_NEW_CUSTOM is abandoned\nType FAST_NEW is introduced and a slighly smaller footprint und loads faster\n";
static const char __pyx_k_Pickler___init___was_not_called[] = "Pickler.__init__() was not called by {}.__init__()";
static const char __pyx_k_Cannot_pickle_object_with_more_t[] = "Cannot pickle object with more then 5 reduce items";
static const char __pyx_k_Unpickler___init___was_not_calle[] = "Unpickler.__init__() was not called by {}.__init__()";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_BufferContainer;
static PyObject *__pyx_n_s_BuiltinMethodType;
static PyObject *__pyx_kp_u_Cannot_pickle_object_with_more_t;
static PyObject *__pyx_kp_u_Cannot_save_r;
static PyObject *__pyx_n_s_EOFError;
static PyObject *__pyx_n_s_ExternFileLike;
static PyObject *__pyx_n_s_FileLike;
static PyObject *__pyx_n_s_GeneratorType;
static PyObject *__pyx_n_s_IMPORT_MAPPING;
static PyObject *__pyx_kp_u_Invalid_reference;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_NAME_MAPPING;
static PyObject *__pyx_n_u_NULL;
static PyObject *__pyx_n_s_OutputBuffer;
static PyObject *__pyx_n_s_OverflowError;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Pickler;
static PyObject *__pyx_kp_u_Pickler___init___was_not_called;
static PyObject *__pyx_n_s_PicklingError;
static PyObject *__pyx_n_s_REVERSE_IMPORT_MAPPING;
static PyObject *__pyx_n_s_REVERSE_NAME_MAPPING;
static PyObject *__pyx_n_s_SecurityError;
static PyObject *__pyx_kp_u_SecurityError_r_r;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Unknown_load_code;
static PyObject *__pyx_n_s_Unpickler;
static PyObject *__pyx_kp_u_Unpickler___init___was_not_calle;
static PyObject *__pyx_n_s_UnpicklingError;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_n_s__3;
static PyObject *__pyx_kp_b__3;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_u__4;
static PyObject *__pyx_n_u_add;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_builtins;
static PyObject *__pyx_n_s_c_pickle;
static PyObject *__pyx_n_u_c_pickle;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compat_pickle;
static PyObject *__pyx_n_s_copyreg;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dispatch_table;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dump;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_s_extension_cache;
static PyObject *__pyx_n_s_extension_registry;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_file_like;
static PyObject *__pyx_n_s_find_class;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_output_string;
static PyObject *__pyx_n_s_hex;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inverted_registry;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_kp_u_larch_pickle;
static PyObject *__pyx_n_s_larch_pickle_pickle;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_module_2;
static PyObject *__pyx_n_s_modules;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_newobj;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_kp_u_object_not_save_for_loading;
static PyObject *__pyx_n_s_operator;
static PyObject *__pyx_n_s_pickle_register;
static PyObject *__pyx_n_u_pickle_secure;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_protocol;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_secure;
static PyObject *__pyx_n_s_secure_modules;
static PyObject *__pyx_n_s_secure_objects;
static PyObject *__pyx_n_s_secure_unpickle;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_u_setstate;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stack_info;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_verify_object;
static PyObject *__pyx_n_s_with_refs;
static PyObject *__pyx_n_s_with_version;
static PyObject *__pyx_n_s_write;
static int __pyx_pf_5larch_6pickle_6pickle_12OutputBuffer___init__(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self); /* proto */
static void __pyx_pf_5larch_6pickle_6pickle_12OutputBuffer_2__dealloc__(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_9_FileLike___init__(struct __pyx_obj_5larch_6pickle_6pickle__FileLike *__pyx_v_self, PyObject *__pyx_v_file_like); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_7Pickler___init__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol, PyObject *__pyx_v_with_refs); /* proto */
static void __pyx_pf_5larch_6pickle_6pickle_7Pickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_4dump(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_6dumps(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_8get_output_string(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table___get__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table_4__del__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_7Pickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_9Unpickler___init__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_file, bool __pyx_v_secure); /* proto */
static void __pyx_pf_5larch_6pickle_6pickle_9Unpickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_4find_class(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_6load(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_8loads(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_10verify_object(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_9Unpickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_6secure___get__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self); /* proto */
static int __pyx_pf_5larch_6pickle_6pickle_9Unpickler_6secure_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_protocol, PyObject *__pyx_v_with_refs); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_2dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_4load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file, PyObject *__pyx_v_secure); /* proto */
static PyObject *__pyx_pf_5larch_6pickle_6pickle_6loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_secure); /* proto */
static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_Pickler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_Unpickler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_OutputBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_6pickle__BufferContainer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_6pickle__FileLike(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_ExternFileLike(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_160;
static PyObject *__pyx_int_192;
static PyObject *__pyx_int_193;
static PyObject *__pyx_int_194;
static PyObject *__pyx_int_195;
static PyObject *__pyx_int_196;
static PyObject *__pyx_int_197;
static PyObject *__pyx_int_198;
static PyObject *__pyx_int_199;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_201;
static PyObject *__pyx_int_203;
static PyObject *__pyx_int_204;
static PyObject *__pyx_int_205;
static PyObject *__pyx_int_206;
static PyObject *__pyx_int_207;
static PyObject *__pyx_int_208;
static PyObject *__pyx_int_209;
static PyObject *__pyx_int_210;
static PyObject *__pyx_int_211;
static PyObject *__pyx_int_212;
static PyObject *__pyx_int_213;
static PyObject *__pyx_int_214;
static PyObject *__pyx_int_215;
static PyObject *__pyx_int_216;
static PyObject *__pyx_int_217;
static PyObject *__pyx_int_218;
static PyObject *__pyx_int_219;
static PyObject *__pyx_int_220;
static PyObject *__pyx_int_221;
static PyObject *__pyx_int_222;
static PyObject *__pyx_int_223;
static PyObject *__pyx_int_224;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_1L;
static PyObject *__pyx_k_;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
/* Late includes */

/* "larch/pickle/pickle.pyx":126
 * 
 * IF True:
 *     cdef show_debug(char* msg, object o, long v):             # <<<<<<<<<<<<<<
 *         if <PyObject*>o is NULL:
 *             print(msg, hex(v), "NULL")
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_show_debug(char *__pyx_v_msg, PyObject *__pyx_v_o, long __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_debug", 0);

  /* "larch/pickle/pickle.pyx":127
 * IF True:
 *     cdef show_debug(char* msg, object o, long v):
 *         if <PyObject*>o is NULL:             # <<<<<<<<<<<<<<
 *             print(msg, hex(v), "NULL")
 *         else:
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_o) == NULL) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":128
 *     cdef show_debug(char* msg, object o, long v):
 *         if <PyObject*>o is NULL:
 *             print(msg, hex(v), "NULL")             # <<<<<<<<<<<<<<
 *         else:
 *             print(msg, hex(v), repr(o), hex(<size_t><PyObject*>o), (<PyObject*>o).ob_refcnt)
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_msg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_v); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_u_NULL);
    __Pyx_GIVEREF(__pyx_n_u_NULL);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_n_u_NULL);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":127
 * IF True:
 *     cdef show_debug(char* msg, object o, long v):
 *         if <PyObject*>o is NULL:             # <<<<<<<<<<<<<<
 *             print(msg, hex(v), "NULL")
 *         else:
 */
    goto __pyx_L3;
  }

  /* "larch/pickle/pickle.pyx":130
 *             print(msg, hex(v), "NULL")
 *         else:
 *             print(msg, hex(v), repr(o), hex(<size_t><PyObject*>o), (<PyObject*>o).ob_refcnt)             # <<<<<<<<<<<<<<
 * 
 *     debug = <debug_t>show_debug
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_msg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_v); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Repr(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_FromSize_t(((size_t)((PyObject *)__pyx_v_o))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(((PyObject *)__pyx_v_o)->ob_refcnt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "larch/pickle/pickle.pyx":126
 * 
 * IF True:
 *     cdef show_debug(char* msg, object o, long v):             # <<<<<<<<<<<<<<
 *         if <PyObject*>o is NULL:
 *             print(msg, hex(v), "NULL")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("larch.pickle.pickle.show_debug", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":287
 *     cdef StringWriter *writer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.writer = new StringWriter()
 * 
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_12OutputBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_12OutputBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_12OutputBuffer___init__(((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_12OutputBuffer___init__(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  StringWriter *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "larch/pickle/pickle.pyx":288
 * 
 *     def __init__(self):
 *         self.writer = new StringWriter()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new StringWriter();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 288, __pyx_L1_error)
  }
  __pyx_v_self->writer = __pyx_t_1;

  /* "larch/pickle/pickle.pyx":287
 *     cdef StringWriter *writer
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.writer = new StringWriter()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.OutputBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":290
 *         self.writer = new StringWriter()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.writer
 * 
 */

/* Python wrapper */
static void __pyx_pw_5larch_6pickle_6pickle_12OutputBuffer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5larch_6pickle_6pickle_12OutputBuffer_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5larch_6pickle_6pickle_12OutputBuffer_2__dealloc__(((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5larch_6pickle_6pickle_12OutputBuffer_2__dealloc__(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "larch/pickle/pickle.pyx":291
 * 
 *     def __dealloc__(self):
 *         del self.writer             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset(self):
 */
  delete __pyx_v_self->writer;

  /* "larch/pickle/pickle.pyx":290
 *         self.writer = new StringWriter()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.writer
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":293
 *         del self.writer
 * 
 *     cdef void reset(self):             # <<<<<<<<<<<<<<
 *         self.writer.reset()
 * 
 */

static void __pyx_f_5larch_6pickle_6pickle_12OutputBuffer_reset(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "larch/pickle/pickle.pyx":294
 * 
 *     cdef void reset(self):
 *         self.writer.reset()             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes result(self):
 */
  __pyx_v_self->writer->reset();

  /* "larch/pickle/pickle.pyx":293
 *         del self.writer
 * 
 *     cdef void reset(self):             # <<<<<<<<<<<<<<
 *         self.writer.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":296
 *         self.writer.reset()
 * 
 *     cdef bytes result(self):             # <<<<<<<<<<<<<<
 *         return self.writer.result()
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_12OutputBuffer_result(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("result", 0);

  /* "larch/pickle/pickle.pyx":297
 * 
 *     cdef bytes result(self):
 *         return self.writer.result()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->writer->result(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":296
 *         self.writer.reset()
 * 
 *     cdef bytes result(self):             # <<<<<<<<<<<<<<
 *         return self.writer.result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.OutputBuffer.result", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":300
 * 
 * 
 * cdef int write_buffer(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     return (<OutputBuffer>(<Pickler>pickler).file).writer.write(data, size)
 * 
 */

static int __pyx_f_5larch_6pickle_6pickle_write_buffer(PyObject *__pyx_v_pickler, void *__pyx_v_data, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_buffer", 0);

  /* "larch/pickle/pickle.pyx":301
 * 
 * cdef int write_buffer(object pickler, void* data, size_t size) except -1:
 *     return (<OutputBuffer>(<Pickler>pickler).file).writer.write(data, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_pickler)->file)->writer->write(__pyx_v_data, __pyx_v_size);
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":300
 * 
 * 
 * cdef int write_buffer(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     return (<OutputBuffer>(<Pickler>pickler).file).writer.write(data, size)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":308
 *     cdef StringReader sreader
 * 
 *     cdef _BufferContainer set(self, bytes buffer):             # <<<<<<<<<<<<<<
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0
 */

static struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *__pyx_f_5larch_6pickle_6pickle_16_BufferContainer_set(struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *__pyx_v_self, PyObject *__pyx_v_buffer) {
  struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 0);

  /* "larch/pickle/pickle.pyx":309
 * 
 *     cdef _BufferContainer set(self, bytes buffer):
 *         self.sreader.data = buffer             # <<<<<<<<<<<<<<
 *         self.sreader.pos = 0
 *         self.sreader.size = len(buffer)
 */
  if (unlikely(__pyx_v_buffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 309, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBytes_AsWritableString(__pyx_v_buffer); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_v_self->sreader.data = __pyx_t_1;

  /* "larch/pickle/pickle.pyx":310
 *     cdef _BufferContainer set(self, bytes buffer):
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0             # <<<<<<<<<<<<<<
 *         self.sreader.size = len(buffer)
 *         return self
 */
  __pyx_v_self->sreader.pos = 0;

  /* "larch/pickle/pickle.pyx":311
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0
 *         self.sreader.size = len(buffer)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (unlikely(__pyx_v_buffer == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 311, __pyx_L1_error)
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_buffer); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_v_self->sreader.size = __pyx_t_2;

  /* "larch/pickle/pickle.pyx":312
 *         self.sreader.pos = 0
 *         self.sreader.size = len(buffer)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":308
 *     cdef StringReader sreader
 * 
 *     cdef _BufferContainer set(self, bytes buffer):             # <<<<<<<<<<<<<<
 *         self.sreader.data = buffer
 *         self.sreader.pos = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle._BufferContainer.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":315
 * 
 * 
 * cdef int read_buffer(object unpickler, void* buffer, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_BufferContainer>(<Unpickler>unpickler).file).sreader.read(buffer, size)
 * 
 */

static int __pyx_f_5larch_6pickle_6pickle_read_buffer(PyObject *__pyx_v_unpickler, void *__pyx_v_buffer, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_buffer", 0);

  /* "larch/pickle/pickle.pyx":316
 * 
 * cdef int read_buffer(object unpickler, void* buffer, size_t size) except -1:
 *     (<_BufferContainer>(<Unpickler>unpickler).file).sreader.read(buffer, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_unpickler)->file)->sreader.read(__pyx_v_buffer, __pyx_v_size);

  /* "larch/pickle/pickle.pyx":315
 * 
 * 
 * cdef int read_buffer(object unpickler, void* buffer, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_BufferContainer>(<Unpickler>unpickler).file).sreader.read(buffer, size)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":326
 *         object read
 * 
 *     def __init__(self, file_like):             # <<<<<<<<<<<<<<
 *         self.write = file_like.write
 *         self.read = file_like.read
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_9_FileLike_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_9_FileLike_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_like,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file_like)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 326, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_file_like = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 326, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle._FileLike.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9_FileLike___init__(((struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)__pyx_v_self), __pyx_v_file_like);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_9_FileLike___init__(struct __pyx_obj_5larch_6pickle_6pickle__FileLike *__pyx_v_self, PyObject *__pyx_v_file_like) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "larch/pickle/pickle.pyx":327
 * 
 *     def __init__(self, file_like):
 *         self.write = file_like.write             # <<<<<<<<<<<<<<
 *         self.read = file_like.read
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file_like, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->write);
  __Pyx_DECREF(__pyx_v_self->write);
  __pyx_v_self->write = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":328
 *     def __init__(self, file_like):
 *         self.write = file_like.write
 *         self.read = file_like.read             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_file_like, __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->read);
  __Pyx_DECREF(__pyx_v_self->read);
  __pyx_v_self->read = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":326
 *         object read
 * 
 *     def __init__(self, file_like):             # <<<<<<<<<<<<<<
 *         self.write = file_like.write
 *         self.read = file_like.read
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle._FileLike.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":331
 * 
 * 
 * cdef int write_file(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])
 *     return 1
 */

static int __pyx_f_5larch_6pickle_6pickle_write_file(PyObject *__pyx_v_pickler, void *__pyx_v_data, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_file", 0);

  /* "larch/pickle/pickle.pyx":332
 * 
 * cdef int write_file(object pickler, void* data, size_t size) except -1:
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(((char *)__pyx_v_data) + 0, __pyx_v_size - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_pickler)->file)->write);
  __pyx_t_3 = ((struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_pickler)->file)->write; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":333
 * cdef int write_file(object pickler, void* data, size_t size) except -1:
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":331
 * 
 * 
 * cdef int write_file(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     (<_FileLike>(<Pickler>pickler).file).write((<char*>data)[:size])
 *     return 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.write_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":336
 * 
 * 
 * cdef int read_file(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file
 */

static int __pyx_f_5larch_6pickle_6pickle_read_file(PyObject *__pyx_v_unpickler, void *__pyx_v_data, size_t __pyx_v_size) {
  struct __pyx_obj_5larch_6pickle_6pickle__FileLike *__pyx_v_f = 0;
  PyObject *__pyx_v_b = 0;
  size_t __pyx_v_rsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_file", 0);

  /* "larch/pickle/pickle.pyx":338
 * cdef int read_file(object unpickler, void* data, size_t size) except -1:
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file             # <<<<<<<<<<<<<<
 *         bytes b = f.read(size)
 *         size_t rsize = PyBytes_GET_SIZE(b)
 */
  if (!(likely(((((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_unpickler)->file) == Py_None) || likely(__Pyx_TypeTest(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_unpickler)->file, __pyx_ptype_5larch_6pickle_6pickle__FileLike))))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_unpickler)->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_f = ((struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":339
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file
 *         bytes b = f.read(size)             # <<<<<<<<<<<<<<
 *         size_t rsize = PyBytes_GET_SIZE(b)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_f->read);
  __pyx_t_3 = __pyx_v_f->read; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_v_b = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":340
 *         _FileLike f = (<Unpickler>unpickler).file
 *         bytes b = f.read(size)
 *         size_t rsize = PyBytes_GET_SIZE(b)             # <<<<<<<<<<<<<<
 * 
 *     if rsize != size:
 */
  __pyx_v_rsize = PyBytes_GET_SIZE(__pyx_v_b);

  /* "larch/pickle/pickle.pyx":342
 *         size_t rsize = PyBytes_GET_SIZE(b)
 * 
 *     if rsize != size:             # <<<<<<<<<<<<<<
 *         raise EOFError()
 * 
 */
  __pyx_t_5 = ((__pyx_v_rsize != __pyx_v_size) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "larch/pickle/pickle.pyx":343
 * 
 *     if rsize != size:
 *         raise EOFError()             # <<<<<<<<<<<<<<
 * 
 *     memcpy(data, Bytes_AS_STRING(b), rsize)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_EOFError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 343, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":342
 *         size_t rsize = PyBytes_GET_SIZE(b)
 * 
 *     if rsize != size:             # <<<<<<<<<<<<<<
 *         raise EOFError()
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":345
 *         raise EOFError()
 * 
 *     memcpy(data, Bytes_AS_STRING(b), rsize)             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
  (void)(memcpy(__pyx_v_data, PyBytes_AS_STRING(__pyx_v_b), __pyx_v_rsize));

  /* "larch/pickle/pickle.pyx":346
 * 
 *     memcpy(data, Bytes_AS_STRING(b), rsize)
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * # External (cython) filelike
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":336
 * 
 * 
 * cdef int read_file(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         _FileLike f = (<Unpickler>unpickler).file
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.read_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":356
 *         read_file_t read
 * 
 * cdef int write_external(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file
 *     return ef.write(ef.file, data, size)
 */

static int __pyx_f_5larch_6pickle_6pickle_write_external(PyObject *__pyx_v_pickler, void *__pyx_v_data, size_t __pyx_v_size) {
  struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *__pyx_v_ef = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("write_external", 0);

  /* "larch/pickle/pickle.pyx":357
 * 
 * cdef int write_external(object pickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file             # <<<<<<<<<<<<<<
 *     return ef.write(ef.file, data, size)
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_pickler)->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ef = ((struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":358
 * cdef int write_external(object pickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file
 *     return ef.write(ef.file, data, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_ef->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_r = __pyx_v_ef->write(__pyx_t_1, __pyx_v_data, __pyx_v_size);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":356
 *         read_file_t read
 * 
 * cdef int write_external(object pickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Pickler>pickler).file
 *     return ef.write(ef.file, data, size)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ef);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":361
 * 
 * 
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file
 *     return ef.read(ef.file, data, size)
 */

static int __pyx_f_5larch_6pickle_6pickle_read_external(PyObject *__pyx_v_unpickler, void *__pyx_v_data, size_t __pyx_v_size) {
  struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *__pyx_v_ef = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("read_external", 0);

  /* "larch/pickle/pickle.pyx":362
 * 
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file             # <<<<<<<<<<<<<<
 *     return ef.read(ef.file, data, size)
 * 
 */
  __pyx_t_1 = ((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_unpickler)->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_ef = ((struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":363
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file
 *     return ef.read(ef.file, data, size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_ef->file;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_r = __pyx_v_ef->read(__pyx_t_1, __pyx_v_data, __pyx_v_size);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":361
 * 
 * 
 * cdef int read_external(object unpickler, void* data, size_t size) except -1:             # <<<<<<<<<<<<<<
 *     cdef ExternFileLike ef = <ExternFileLike>(<Unpickler>unpickler).file
 *     return ef.read(ef.file, data, size)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ef);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":389
 * # ----------------------------------
 * 
 * cdef inline void reraise():             # <<<<<<<<<<<<<<
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 */

static CYTHON_INLINE void __pyx_f_5larch_6pickle_6pickle_reraise(void) {
  PyObject *__pyx_v_type_ = NULL;
  PyObject *__pyx_v_exc = NULL;
  PyObject *__pyx_v_traceback = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reraise", 0);

  /* "larch/pickle/pickle.pyx":390
 * 
 * cdef inline void reraise():
 *     type_, exc, traceback = sys.exc_info()             # <<<<<<<<<<<<<<
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 *     throw_python_error()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exc_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 390, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 390, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 390, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_type_ = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_exc = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_traceback = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "larch/pickle/pickle.pyx":391
 * cdef inline void reraise():
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)             # <<<<<<<<<<<<<<
 *     throw_python_error()
 * 
 */
  PyErr_Restore(((PyObject *)__pyx_v_type_), ((PyObject *)__pyx_v_exc), ((PyObject *)__pyx_v_traceback));

  /* "larch/pickle/pickle.pyx":392
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 *     throw_python_error()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  throw_python_error();

  /* "larch/pickle/pickle.pyx":389
 * # ----------------------------------
 * 
 * cdef inline void reraise():             # <<<<<<<<<<<<<<
 *     type_, exc, traceback = sys.exc_info()
 *     PyErr_Restore(<PyObject*>type_, <PyObject*>exc, <PyObject*>traceback)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("larch.pickle.pickle.reraise", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type_);
  __Pyx_XDECREF(__pyx_v_exc);
  __Pyx_XDECREF(__pyx_v_traceback);
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":395
 * 
 * 
 * cdef void save_long(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     # see original _pickle.c
 *     cdef:
 */

static void __pyx_f_5larch_6pickle_6pickle_save_long(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  size_t __pyx_v_nbytes;
  size_t __pyx_v_nbits;
  int __pyx_v_sign;
  PyObject *__pyx_v_tmp = 0;
  char *__pyx_v_data;
  long __pyx_v_v;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_long", 0);

  /* "larch/pickle/pickle.pyx":398
 *     # see original _pickle.c
 *     cdef:
 *         size_t nbytes, nbits = _PyLong_NumBits(o)             # <<<<<<<<<<<<<<
 *         int sign = _PyLong_Sign(o)
 *         bytes tmp
 */
  __pyx_v_nbits = _PyLong_NumBits(__pyx_v_o);

  /* "larch/pickle/pickle.pyx":399
 *     cdef:
 *         size_t nbytes, nbits = _PyLong_NumBits(o)
 *         int sign = _PyLong_Sign(o)             # <<<<<<<<<<<<<<
 *         bytes tmp
 *         char* data
 */
  __pyx_v_sign = _PyLong_Sign(__pyx_v_o);

  /* "larch/pickle/pickle.pyx":404
 *         long v
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         v = PyLong_AsLong(o)
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":405
 * 
 *     try:
 *         v = PyLong_AsLong(o)             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
      __pyx_t_4 = PyLong_AsLong(__pyx_v_o); if (unlikely(__pyx_t_4 == ((long)-1L) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L3_error)
      __pyx_v_v = __pyx_t_4;

      /* "larch/pickle/pickle.pyx":404
 *         long v
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         v = PyLong_AsLong(o)
 *     except:
 */
    }

    /* "larch/pickle/pickle.pyx":409
 *         pass
 *     else:
 *         p.pack_int(v)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    /*else:*/ {
      (void)(__pyx_v_p->pack_int(__pyx_v_v));

      /* "larch/pickle/pickle.pyx":410
 *     else:
 *         p.pack_int(v)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if p.save_ref(o): return
 */
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;

    /* "larch/pickle/pickle.pyx":406
 *     try:
 *         v = PyLong_AsLong(o)
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 *     else:
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    __pyx_L6_except_return:;

    /* "larch/pickle/pickle.pyx":404
 *         long v
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         v = PyLong_AsLong(o)
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "larch/pickle/pickle.pyx":412
 *         return
 * 
 *     if p.save_ref(o): return             # <<<<<<<<<<<<<<
 * 
 *     nbytes = (nbits >> 3) + 1
 */
  __pyx_t_5 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_5) {
    goto __pyx_L0;
  }

  /* "larch/pickle/pickle.pyx":414
 *     if p.save_ref(o): return
 * 
 *     nbytes = (nbits >> 3) + 1             # <<<<<<<<<<<<<<
 *     if nbytes > 0x7fffffffL:
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 */
  __pyx_v_nbytes = ((__pyx_v_nbits >> 3) + 1);

  /* "larch/pickle/pickle.pyx":415
 * 
 *     nbytes = (nbits >> 3) + 1
 *     if nbytes > 0x7fffffffL:             # <<<<<<<<<<<<<<
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 *         throw_python_error()
 */
  __pyx_t_5 = ((__pyx_v_nbytes > 0x7fffffffL) != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":416
 *     nbytes = (nbits >> 3) + 1
 *     if nbytes > 0x7fffffffL:
 *         PyErr_SetString(OverflowError, "long too large to pickle")             # <<<<<<<<<<<<<<
 *         throw_python_error()
 * 
 */
    PyErr_SetString(__pyx_builtin_OverflowError, ((char *)"long too large to pickle"));

    /* "larch/pickle/pickle.pyx":417
 *     if nbytes > 0x7fffffffL:
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 *         throw_python_error()             # <<<<<<<<<<<<<<
 * 
 *     tmp = PyBytes_FromStringAndSize(NULL, nbytes)
 */
    throw_python_error();

    /* "larch/pickle/pickle.pyx":415
 * 
 *     nbytes = (nbits >> 3) + 1
 *     if nbytes > 0x7fffffffL:             # <<<<<<<<<<<<<<
 *         PyErr_SetString(OverflowError, "long too large to pickle")
 *         throw_python_error()
 */
  }

  /* "larch/pickle/pickle.pyx":419
 *         throw_python_error()
 * 
 *     tmp = PyBytes_FromStringAndSize(NULL, nbytes)             # <<<<<<<<<<<<<<
 *     data = Bytes_AS_STRING(tmp)
 * 
 */
  __pyx_t_6 = PyBytes_FromStringAndSize(NULL, __pyx_v_nbytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_tmp = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "larch/pickle/pickle.pyx":420
 * 
 *     tmp = PyBytes_FromStringAndSize(NULL, nbytes)
 *     data = Bytes_AS_STRING(tmp)             # <<<<<<<<<<<<<<
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:
 */
  __pyx_v_data = PyBytes_AS_STRING(__pyx_v_tmp);

  /* "larch/pickle/pickle.pyx":422
 *     data = Bytes_AS_STRING(tmp)
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:             # <<<<<<<<<<<<<<
 *         throw_python_error()
 * 
 */
  __pyx_t_5 = ((_PyLong_AsByteArray(((PyLongObject *)__pyx_v_o), ((unsigned char *)__pyx_v_data), __pyx_v_nbytes, 1, 1) < 0) != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":423
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:
 *         throw_python_error()             # <<<<<<<<<<<<<<
 * 
 *     if (sign < 0 and nbytes > 1
 */
    throw_python_error();

    /* "larch/pickle/pickle.pyx":422
 *     data = Bytes_AS_STRING(tmp)
 * 
 *     if _PyLong_AsByteArray(<PyLongObject*>o, <uchar_t*>data, nbytes, 1, 1) < 0:             # <<<<<<<<<<<<<<
 *         throw_python_error()
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":425
 *         throw_python_error()
 * 
 *     if (sign < 0 and nbytes > 1             # <<<<<<<<<<<<<<
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):
 *         nbytes -= 1
 */
  __pyx_t_7 = ((__pyx_v_sign < 0) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }

  /* "larch/pickle/pickle.pyx":426
 * 
 *     if (sign < 0 and nbytes > 1
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):             # <<<<<<<<<<<<<<
 *         nbytes -= 1
 * 
 */
  __pyx_t_7 = ((__pyx_v_nbytes > 1) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_7 = (((__pyx_v_data[(__pyx_v_nbytes - 1)]) == 0xff) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_7 = ((((__pyx_v_data[(__pyx_v_nbytes - 2)]) & 0x80) != 0) != 0);
  __pyx_t_5 = __pyx_t_7;
  __pyx_L13_bool_binop_done:;

  /* "larch/pickle/pickle.pyx":425
 *         throw_python_error()
 * 
 *     if (sign < 0 and nbytes > 1             # <<<<<<<<<<<<<<
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):
 *         nbytes -= 1
 */
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":427
 *     if (sign < 0 and nbytes > 1
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):
 *         nbytes -= 1             # <<<<<<<<<<<<<<
 * 
 *     p.pack_ext(LONG, nbytes)
 */
    __pyx_v_nbytes = (__pyx_v_nbytes - 1);

    /* "larch/pickle/pickle.pyx":425
 *         throw_python_error()
 * 
 *     if (sign < 0 and nbytes > 1             # <<<<<<<<<<<<<<
 *         and data[nbytes-1] == 0xff and (data[nbytes-2] & 0x80) != 0):
 *         nbytes -= 1
 */
  }

  /* "larch/pickle/pickle.pyx":429
 *         nbytes -= 1
 * 
 *     p.pack_ext(LONG, nbytes)             # <<<<<<<<<<<<<<
 *     p.write(<char*>data, nbytes)
 * 
 */
  (void)(__pyx_v_p->pack_ext(LONG, __pyx_v_nbytes));

  /* "larch/pickle/pickle.pyx":430
 * 
 *     p.pack_ext(LONG, nbytes)
 *     p.write(<char*>data, nbytes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_p->write(((char *)__pyx_v_data), __pyx_v_nbytes);

  /* "larch/pickle/pickle.pyx":395
 * 
 * 
 * cdef void save_long(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     # see original _pickle.c
 *     cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_long", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":433
 * 
 * 
 * cdef inline int _save_global(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     (<Pickler>p.pickler).pack_import1(GLOBAL, o)
 * 
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_global(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_global", 0);

  /* "larch/pickle/pickle.pyx":434
 * 
 * cdef inline int _save_global(Packer* p, object o) except -1:
 *     (<Pickler>p.pickler).pack_import1(GLOBAL, o)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import1(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler), GLOBAL, __pyx_v_o); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 434, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":433
 * 
 * 
 * cdef inline int _save_global(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     (<Pickler>p.pickler).pack_import1(GLOBAL, o)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle._save_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":437
 * 
 * 
 * cdef void save_global(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_global(p, o)
 */

static void __pyx_f_5larch_6pickle_6pickle_save_global(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_global", 0);

  /* "larch/pickle/pickle.pyx":438
 * 
 * cdef void save_global(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_global(p, o)
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":439
 * cdef void save_global(Packer* p, object o):
 *     try:
 *         _save_global(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle_6pickle__save_global(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 439, __pyx_L3_error)

      /* "larch/pickle/pickle.pyx":438
 * 
 * cdef void save_global(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_global(p, o)
 *     except:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "larch/pickle/pickle.pyx":440
 *     try:
 *         _save_global(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.pickle.save_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 440, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch/pickle/pickle.pyx":441
 *         _save_global(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_6pickle_reraise();
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":438
 * 
 * cdef void save_global(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_global(p, o)
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":437
 * 
 * 
 * cdef void save_global(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_global(p, o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_global", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":444
 * 
 * 
 * cdef pack_state_array(Packer *p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 3)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_pack_state_array(Packer *__pyx_v_p, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_tmp;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_state_array", 0);

  /* "larch/pickle/pickle.pyx":446
 * cdef pack_state_array(Packer *p, tuple state):
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 3)             # <<<<<<<<<<<<<<
 *     if <object>tmp is not None:
 *         for i in <object>tmp:
 */
  __pyx_v_tmp = PyTuple_GET_ITEM(__pyx_v_state, 3);

  /* "larch/pickle/pickle.pyx":447
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 3)
 *     if <object>tmp is not None:             # <<<<<<<<<<<<<<
 *         for i in <object>tmp:
 *             p.dump(i)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_tmp) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":448
 *     tmp = PyTuple_GET_ITEM(state, 3)
 *     if <object>tmp is not None:
 *         for i in <object>tmp:             # <<<<<<<<<<<<<<
 *             p.dump(i)
 * 
 */
    if (likely(PyList_CheckExact(((PyObject *)__pyx_v_tmp))) || PyTuple_CheckExact(((PyObject *)__pyx_v_tmp))) {
      __pyx_t_3 = ((PyObject *)__pyx_v_tmp); __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(((PyObject *)__pyx_v_tmp)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 448, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 448, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 448, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "larch/pickle/pickle.pyx":449
 *     if <object>tmp is not None:
 *         for i in <object>tmp:
 *             p.dump(i)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_p->dump(__pyx_v_i);

      /* "larch/pickle/pickle.pyx":448
 *     tmp = PyTuple_GET_ITEM(state, 3)
 *     if <object>tmp is not None:
 *         for i in <object>tmp:             # <<<<<<<<<<<<<<
 *             p.dump(i)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":447
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 3)
 *     if <object>tmp is not None:             # <<<<<<<<<<<<<<
 *         for i in <object>tmp:
 *             p.dump(i)
 */
  }

  /* "larch/pickle/pickle.pyx":444
 * 
 * 
 * cdef pack_state_array(Packer *p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 3)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("larch.pickle.pickle.pack_state_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":452
 * 
 * 
 * cdef pack_state_dict(Packer *p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 4)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_pack_state_dict(Packer *__pyx_v_p, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_tmp;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_state_dict", 0);

  /* "larch/pickle/pickle.pyx":454
 * cdef pack_state_dict(Packer *p, tuple state):
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 4)             # <<<<<<<<<<<<<<
 *     if <object>tmp is not None:
 *         for k, v in <object>tmp:
 */
  __pyx_v_tmp = PyTuple_GET_ITEM(__pyx_v_state, 4);

  /* "larch/pickle/pickle.pyx":455
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 4)
 *     if <object>tmp is not None:             # <<<<<<<<<<<<<<
 *         for k, v in <object>tmp:
 *             p.dump(k)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_tmp) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":456
 *     tmp = PyTuple_GET_ITEM(state, 4)
 *     if <object>tmp is not None:
 *         for k, v in <object>tmp:             # <<<<<<<<<<<<<<
 *             p.dump(k)
 *             p.dump(v)
 */
    if (likely(PyList_CheckExact(((PyObject *)__pyx_v_tmp))) || PyTuple_CheckExact(((PyObject *)__pyx_v_tmp))) {
      __pyx_t_3 = ((PyObject *)__pyx_v_tmp); __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(((PyObject *)__pyx_v_tmp)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 456, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 456, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 456, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 456, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 456, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 456, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 456, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 456, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "larch/pickle/pickle.pyx":457
 *     if <object>tmp is not None:
 *         for k, v in <object>tmp:
 *             p.dump(k)             # <<<<<<<<<<<<<<
 *             p.dump(v)
 * 
 */
      __pyx_v_p->dump(__pyx_v_k);

      /* "larch/pickle/pickle.pyx":458
 *         for k, v in <object>tmp:
 *             p.dump(k)
 *             p.dump(v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_p->dump(__pyx_v_v);

      /* "larch/pickle/pickle.pyx":456
 *     tmp = PyTuple_GET_ITEM(state, 4)
 *     if <object>tmp is not None:
 *         for k, v in <object>tmp:             # <<<<<<<<<<<<<<
 *             p.dump(k)
 *             p.dump(v)
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":455
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 4)
 *     if <object>tmp is not None:             # <<<<<<<<<<<<<<
 *         for k, v in <object>tmp:
 *             p.dump(k)
 */
  }

  /* "larch/pickle/pickle.pyx":452
 * 
 * 
 * cdef pack_state_dict(Packer *p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyTuple_GET_ITEM(state, 4)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("larch.pickle.pickle.pack_state_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":461
 * 
 * 
 * cdef void save_object_state(Packer* p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t size
 */

static void __pyx_f_5larch_6pickle_6pickle_save_object_state(Packer *__pyx_v_p, PyObject *__pyx_v_state) {
  size_t __pyx_v_size;
  PyObject *__pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_object_state", 0);

  /* "larch/pickle/pickle.pyx":466
 *         PyObject* tmp
 * 
 *     size = PyTuple_GET_SIZE(state)             # <<<<<<<<<<<<<<
 *     if size > 2:
 *         tmp = PyTuple_GET_ITEM(state, 2)
 */
  __pyx_v_size = PyTuple_GET_SIZE(__pyx_v_state);

  /* "larch/pickle/pickle.pyx":467
 * 
 *     size = PyTuple_GET_SIZE(state)
 *     if size > 2:             # <<<<<<<<<<<<<<
 *         tmp = PyTuple_GET_ITEM(state, 2)
 *         p.dump(<object>tmp)
 */
  __pyx_t_1 = ((__pyx_v_size > 2) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":468
 *     size = PyTuple_GET_SIZE(state)
 *     if size > 2:
 *         tmp = PyTuple_GET_ITEM(state, 2)             # <<<<<<<<<<<<<<
 *         p.dump(<object>tmp)
 *     else:
 */
    __pyx_v_tmp = PyTuple_GET_ITEM(__pyx_v_state, 2);

    /* "larch/pickle/pickle.pyx":469
 *     if size > 2:
 *         tmp = PyTuple_GET_ITEM(state, 2)
 *         p.dump(<object>tmp)             # <<<<<<<<<<<<<<
 *     else:
 *         p.pack_nil()
 */
    __pyx_v_p->dump(((PyObject *)__pyx_v_tmp));

    /* "larch/pickle/pickle.pyx":467
 * 
 *     size = PyTuple_GET_SIZE(state)
 *     if size > 2:             # <<<<<<<<<<<<<<
 *         tmp = PyTuple_GET_ITEM(state, 2)
 *         p.dump(<object>tmp)
 */
    goto __pyx_L3;
  }

  /* "larch/pickle/pickle.pyx":471
 *         p.dump(<object>tmp)
 *     else:
 *         p.pack_nil()             # <<<<<<<<<<<<<<
 * 
 *     if size > 3:
 */
  /*else*/ {
    __pyx_v_p->pack_nil();
  }
  __pyx_L3:;

  /* "larch/pickle/pickle.pyx":473
 *         p.pack_nil()
 * 
 *     if size > 3:             # <<<<<<<<<<<<<<
 *         pack_state_array(p, state)
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 */
  __pyx_t_1 = ((__pyx_v_size > 3) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":474
 * 
 *     if size > 3:
 *         pack_state_array(p, state)             # <<<<<<<<<<<<<<
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 * 
 */
    __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle_pack_state_array(__pyx_v_p, __pyx_v_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":473
 *         p.pack_nil()
 * 
 *     if size > 3:             # <<<<<<<<<<<<<<
 *         pack_state_array(p, state)
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 */
  }

  /* "larch/pickle/pickle.pyx":475
 *     if size > 3:
 *         pack_state_array(p, state)
 *     p.pack_ext(END_OBJECT_ITEMS, 1)             # <<<<<<<<<<<<<<
 * 
 *     if size > 4:
 */
  (void)(__pyx_v_p->pack_ext(END_OBJECT_ITEMS, 1));

  /* "larch/pickle/pickle.pyx":477
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 * 
 *     if size > 4:             # <<<<<<<<<<<<<<
 *         pack_state_dict(p, state)
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 */
  __pyx_t_1 = ((__pyx_v_size > 4) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":478
 * 
 *     if size > 4:
 *         pack_state_dict(p, state)             # <<<<<<<<<<<<<<
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 * 
 */
    __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle_pack_state_dict(__pyx_v_p, __pyx_v_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":477
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 * 
 *     if size > 4:             # <<<<<<<<<<<<<<
 *         pack_state_dict(p, state)
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 */
  }

  /* "larch/pickle/pickle.pyx":479
 *     if size > 4:
 *         pack_state_dict(p, state)
 *     p.pack_ext(END_OBJECT_ITEMS, 1)             # <<<<<<<<<<<<<<
 * 
 *     if size > 5:
 */
  (void)(__pyx_v_p->pack_ext(END_OBJECT_ITEMS, 1));

  /* "larch/pickle/pickle.pyx":481
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 * 
 *     if size > 5:             # <<<<<<<<<<<<<<
 *         raise PicklingError(
 *             "Cannot pickle object with more then 5 reduce items")
 */
  __pyx_t_1 = ((__pyx_v_size > 5) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "larch/pickle/pickle.pyx":482
 * 
 *     if size > 5:
 *         raise PicklingError(             # <<<<<<<<<<<<<<
 *             "Cannot pickle object with more then 5 reduce items")
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PicklingError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_u_Cannot_pickle_object_with_more_t) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_Cannot_pickle_object_with_more_t);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 482, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":481
 *     p.pack_ext(END_OBJECT_ITEMS, 1)
 * 
 *     if size > 5:             # <<<<<<<<<<<<<<
 *         raise PicklingError(
 *             "Cannot pickle object with more then 5 reduce items")
 */
  }

  /* "larch/pickle/pickle.pyx":461
 * 
 * 
 * cdef void save_object_state(Packer* p, tuple state):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_object_state", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":486
 * 
 * 
 * cdef inline int _save_reduced(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_reduced(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_reduced", 0);

  /* "larch/pickle/pickle.pyx":487
 * 
 * cdef inline int _save_reduced(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0             # <<<<<<<<<<<<<<
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):
 */
  __pyx_t_1 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch/pickle/pickle.pyx":488
 * cdef inline int _save_reduced(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)             # <<<<<<<<<<<<<<
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_state = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":489
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyBaseString_Check(__pyx_v_state); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":490
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import2(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler), SINGLETON, __pyx_t_2, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":491
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     p.pack_ext(OBJECT, 1)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":489
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  }

  /* "larch/pickle/pickle.pyx":493
 *         return 0
 * 
 *     p.pack_ext(OBJECT, 1)             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
  (void)(__pyx_v_p->pack_ext(OBJECT, 1));

  /* "larch/pickle/pickle.pyx":494
 * 
 *     p.pack_ext(OBJECT, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)
 */
  __pyx_t_7 = PyTuple_GET_ITEM(__pyx_v_state, 0);
  __pyx_v_p->dump(((PyObject *)__pyx_t_7));

  /* "larch/pickle/pickle.pyx":495
 *     p.pack_ext(OBJECT, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 *     save_object_state(p, state)
 * 
 */
  __pyx_t_7 = PyTuple_GET_ITEM(__pyx_v_state, 1);
  __pyx_v_p->dump(((PyObject *)__pyx_t_7));

  /* "larch/pickle/pickle.pyx":496
 *     p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_f_5larch_6pickle_6pickle_save_object_state(__pyx_v_p, ((PyObject*)__pyx_v_state));

  /* "larch/pickle/pickle.pyx":486
 * 
 * 
 * cdef inline int _save_reduced(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle._save_reduced", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":499
 * 
 * 
 * cdef void save_reduced(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_reduced(p,  o)
 */

static void __pyx_f_5larch_6pickle_6pickle_save_reduced(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_reduced", 0);

  /* "larch/pickle/pickle.pyx":500
 * 
 * cdef void save_reduced(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_reduced(p,  o)
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":501
 * cdef void save_reduced(Packer* p, object o):
 *     try:
 *         _save_reduced(p,  o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle_6pickle__save_reduced(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 501, __pyx_L3_error)

      /* "larch/pickle/pickle.pyx":500
 * 
 * cdef void save_reduced(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_reduced(p,  o)
 *     except:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "larch/pickle/pickle.pyx":502
 *     try:
 *         _save_reduced(p,  o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.pickle.save_reduced", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 502, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch/pickle/pickle.pyx":503
 *         _save_reduced(p,  o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_6pickle_reraise();
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":500
 * 
 * cdef void save_reduced(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_reduced(p,  o)
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":499
 * 
 * 
 * cdef void save_reduced(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_reduced(p,  o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_reduced", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":506
 * 
 * 
 * cdef inline int _save_new_object(Packer* p, o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_new_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_new_object", 0);

  /* "larch/pickle/pickle.pyx":507
 * 
 * cdef inline int _save_new_object(Packer* p, o) except -1:
 *     if p.save_ref(o): return 0             # <<<<<<<<<<<<<<
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):
 */
  __pyx_t_1 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch/pickle/pickle.pyx":508
 * cdef inline int _save_new_object(Packer* p, o) except -1:
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)             # <<<<<<<<<<<<<<
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_state = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":509
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyBaseString_Check(__pyx_v_state); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":510
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import2(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler), SINGLETON, __pyx_t_2, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":511
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     return _save_new_object_finish(p, o, state)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":509
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  }

  /* "larch/pickle/pickle.pyx":513
 *         return 0
 * 
 *     return _save_new_object_finish(p, o, state)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int _save_new_object_finish(Packer* p, o, state) except -1:
 */
  __pyx_t_6 = __pyx_f_5larch_6pickle_6pickle__save_new_object_finish(__pyx_v_p, __pyx_v_o, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 513, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":506
 * 
 * 
 * cdef inline int _save_new_object(Packer* p, o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle._save_new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":515
 *     return _save_new_object_finish(p, o, state)
 * 
 * cdef inline int _save_new_object_finish(Packer* p, o, state) except -1:             # <<<<<<<<<<<<<<
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_new_object_finish(Packer *__pyx_v_p, CYTHON_UNUSED PyObject *__pyx_v_o, PyObject *__pyx_v_state) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_new_object_finish", 0);

  /* "larch/pickle/pickle.pyx":516
 * 
 * cdef inline int _save_new_object_finish(Packer* p, o, state) except -1:
 *     p.pack_ext(OBJECT_NEW, 1)             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)
 */
  (void)(__pyx_v_p->pack_ext(OBJECT_NEW, 1));

  /* "larch/pickle/pickle.pyx":517
 * cdef inline int _save_new_object_finish(Packer* p, o, state) except -1:
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 *     save_object_state(p, state)
 *     return 0
 */
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v_state, 1);
  __pyx_v_p->dump(((PyObject *)__pyx_t_1));

  /* "larch/pickle/pickle.pyx":518
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) __PYX_ERR(0, 518, __pyx_L1_error)
  __pyx_f_5larch_6pickle_6pickle_save_object_state(__pyx_v_p, ((PyObject*)__pyx_v_state));

  /* "larch/pickle/pickle.pyx":519
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     save_object_state(p, state)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":515
 *     return _save_new_object_finish(p, o, state)
 * 
 * cdef inline int _save_new_object_finish(Packer* p, o, state) except -1:             # <<<<<<<<<<<<<<
 *     p.pack_ext(OBJECT_NEW, 1)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle._save_new_object_finish", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":522
 * 
 * 
 * cdef inline void save_new_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         if p.protocol < 4:
 */

static CYTHON_INLINE void __pyx_f_5larch_6pickle_6pickle_save_new_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_new_object", 0);

  /* "larch/pickle/pickle.pyx":523
 * 
 * cdef inline void save_new_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         if p.protocol < 4:
 *             _save_new_object(p, o)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":524
 * cdef inline void save_new_object(Packer* p, object o):
 *     try:
 *         if p.protocol < 4:             # <<<<<<<<<<<<<<
 *             _save_new_object(p, o)
 *         else:
 */
      __pyx_t_4 = ((__pyx_v_p->protocol < 4) != 0);
      if (__pyx_t_4) {

        /* "larch/pickle/pickle.pyx":525
 *     try:
 *         if p.protocol < 4:
 *             _save_new_object(p, o)             # <<<<<<<<<<<<<<
 *         else:
 *             _fast_save(p, o)
 */
        __pyx_t_5 = __pyx_f_5larch_6pickle_6pickle__save_new_object(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 525, __pyx_L3_error)

        /* "larch/pickle/pickle.pyx":524
 * cdef inline void save_new_object(Packer* p, object o):
 *     try:
 *         if p.protocol < 4:             # <<<<<<<<<<<<<<
 *             _save_new_object(p, o)
 *         else:
 */
        goto __pyx_L9;
      }

      /* "larch/pickle/pickle.pyx":527
 *             _save_new_object(p, o)
 *         else:
 *             _fast_save(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      /*else*/ {
        __pyx_t_5 = __pyx_f_5larch_6pickle_6pickle__fast_save(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 527, __pyx_L3_error)
      }
      __pyx_L9:;

      /* "larch/pickle/pickle.pyx":523
 * 
 * cdef inline void save_new_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         if p.protocol < 4:
 *             _save_new_object(p, o)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "larch/pickle/pickle.pyx":528
 *         else:
 *             _fast_save(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.pickle.save_new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 528, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "larch/pickle/pickle.pyx":529
 *             _fast_save(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_5larch_6pickle_6pickle_reraise();
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":523
 * 
 * cdef inline void save_new_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         if p.protocol < 4:
 *             _save_new_object(p, o)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":522
 * 
 * 
 * cdef inline void save_new_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         if p.protocol < 4:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_new_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":532
 * 
 * 
 * cdef inline int _fast_save(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__fast_save(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fast_save", 0);

  /* "larch/pickle/pickle.pyx":533
 * 
 * cdef inline int _fast_save(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0             # <<<<<<<<<<<<<<
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):
 */
  __pyx_t_1 = (__pyx_v_p->save_ref(__pyx_v_o) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "larch/pickle/pickle.pyx":534
 * cdef inline int _fast_save(Packer* p, object o) except -1:
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)             # <<<<<<<<<<<<<<
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_state = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":535
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyBaseString_Check(__pyx_v_state); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":536
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import2(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler), SINGLETON, __pyx_t_2, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":537
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     return _fast_save_finish(p, o, state)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":535
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  }

  /* "larch/pickle/pickle.pyx":539
 *         return 0
 * 
 *     return _fast_save_finish(p, o, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __pyx_f_5larch_6pickle_6pickle__fast_save_finish(__pyx_v_p, __pyx_v_o, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":532
 * 
 * 
 * cdef inline int _fast_save(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     if p.save_ref(o): return 0
 *     state = o.__reduce_ex__(REDUCE_PROTOCOL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle._fast_save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":542
 * 
 * 
 * cdef inline int _fast_save_finish(Packer* p, o, state) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t size
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__fast_save_finish(Packer *__pyx_v_p, CYTHON_UNUSED PyObject *__pyx_v_o, PyObject *__pyx_v_state) {
  size_t __pyx_v_size;
  size_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fast_save_finish", 0);

  /* "larch/pickle/pickle.pyx":547
 *         size_t i
 * 
 *     size = PyTuple_GET_SIZE(state)             # <<<<<<<<<<<<<<
 *     i = size - 1
 *     while i > 1:
 */
  __pyx_v_size = PyTuple_GET_SIZE(__pyx_v_state);

  /* "larch/pickle/pickle.pyx":548
 * 
 *     size = PyTuple_GET_SIZE(state)
 *     i = size - 1             # <<<<<<<<<<<<<<
 *     while i > 1:
 *         if <object>PyTuple_GET_ITEM(state, i) is None:
 */
  __pyx_v_i = (__pyx_v_size - 1);

  /* "larch/pickle/pickle.pyx":549
 *     size = PyTuple_GET_SIZE(state)
 *     i = size - 1
 *     while i > 1:             # <<<<<<<<<<<<<<
 *         if <object>PyTuple_GET_ITEM(state, i) is None:
 *             size -= 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i > 1) != 0);
    if (!__pyx_t_1) break;

    /* "larch/pickle/pickle.pyx":550
 *     i = size - 1
 *     while i > 1:
 *         if <object>PyTuple_GET_ITEM(state, i) is None:             # <<<<<<<<<<<<<<
 *             size -= 1
 *             i -= 1
 */
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_state, __pyx_v_i);
    __pyx_t_1 = (((PyObject *)__pyx_t_2) == Py_None);
    __pyx_t_3 = (__pyx_t_1 != 0);
    if (__pyx_t_3) {

      /* "larch/pickle/pickle.pyx":551
 *     while i > 1:
 *         if <object>PyTuple_GET_ITEM(state, i) is None:
 *             size -= 1             # <<<<<<<<<<<<<<
 *             i -= 1
 *         else:
 */
      __pyx_v_size = (__pyx_v_size - 1);

      /* "larch/pickle/pickle.pyx":552
 *         if <object>PyTuple_GET_ITEM(state, i) is None:
 *             size -= 1
 *             i -= 1             # <<<<<<<<<<<<<<
 *         else:
 *             break
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "larch/pickle/pickle.pyx":550
 *     i = size - 1
 *     while i > 1:
 *         if <object>PyTuple_GET_ITEM(state, i) is None:             # <<<<<<<<<<<<<<
 *             size -= 1
 *             i -= 1
 */
      goto __pyx_L5;
    }

    /* "larch/pickle/pickle.pyx":554
 *             i -= 1
 *         else:
 *             break             # <<<<<<<<<<<<<<
 *     p.pack_ext(FAST_NEW, size)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
    /*else*/ {
      goto __pyx_L4_break;
    }
    __pyx_L5:;
  }
  __pyx_L4_break:;

  /* "larch/pickle/pickle.pyx":555
 *         else:
 *             break
 *     p.pack_ext(FAST_NEW, size)             # <<<<<<<<<<<<<<
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     if size > 2:
 */
  (void)(__pyx_v_p->pack_ext(FAST_NEW, __pyx_v_size));

  /* "larch/pickle/pickle.pyx":556
 *             break
 *     p.pack_ext(FAST_NEW, size)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 *     if size > 2:
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))
 */
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_state, 1);
  __pyx_v_p->dump(((PyObject *)__pyx_t_2));

  /* "larch/pickle/pickle.pyx":557
 *     p.pack_ext(FAST_NEW, size)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     if size > 2:             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))
 *         if size > 3:
 */
  __pyx_t_3 = ((__pyx_v_size > 2) != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":558
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     if size > 2:
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))             # <<<<<<<<<<<<<<
 *         if size > 3:
 *             pack_state_array(p, state)
 */
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_state, 2);
    __pyx_v_p->dump(((PyObject *)__pyx_t_2));

    /* "larch/pickle/pickle.pyx":559
 *     if size > 2:
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))
 *         if size > 3:             # <<<<<<<<<<<<<<
 *             pack_state_array(p, state)
 *             p.pack_ext(END_OBJECT_ITEMS, 1)
 */
    __pyx_t_3 = ((__pyx_v_size > 3) != 0);
    if (__pyx_t_3) {

      /* "larch/pickle/pickle.pyx":560
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))
 *         if size > 3:
 *             pack_state_array(p, state)             # <<<<<<<<<<<<<<
 *             p.pack_ext(END_OBJECT_ITEMS, 1)
 *             if size > 4:
 */
      if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) __PYX_ERR(0, 560, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_5larch_6pickle_6pickle_pack_state_array(__pyx_v_p, ((PyObject*)__pyx_v_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "larch/pickle/pickle.pyx":561
 *         if size > 3:
 *             pack_state_array(p, state)
 *             p.pack_ext(END_OBJECT_ITEMS, 1)             # <<<<<<<<<<<<<<
 *             if size > 4:
 *                 pack_state_dict(p, state)
 */
      (void)(__pyx_v_p->pack_ext(END_OBJECT_ITEMS, 1));

      /* "larch/pickle/pickle.pyx":562
 *             pack_state_array(p, state)
 *             p.pack_ext(END_OBJECT_ITEMS, 1)
 *             if size > 4:             # <<<<<<<<<<<<<<
 *                 pack_state_dict(p, state)
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)
 */
      __pyx_t_3 = ((__pyx_v_size > 4) != 0);
      if (__pyx_t_3) {

        /* "larch/pickle/pickle.pyx":563
 *             p.pack_ext(END_OBJECT_ITEMS, 1)
 *             if size > 4:
 *                 pack_state_dict(p, state)             # <<<<<<<<<<<<<<
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)
 *                 if size > 5:
 */
        if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) __PYX_ERR(0, 563, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_5larch_6pickle_6pickle_pack_state_dict(__pyx_v_p, ((PyObject*)__pyx_v_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "larch/pickle/pickle.pyx":564
 *             if size > 4:
 *                 pack_state_dict(p, state)
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)             # <<<<<<<<<<<<<<
 *                 if size > 5:
 *                     raise PicklingError(
 */
        (void)(__pyx_v_p->pack_ext(END_OBJECT_ITEMS, 1));

        /* "larch/pickle/pickle.pyx":565
 *                 pack_state_dict(p, state)
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)
 *                 if size > 5:             # <<<<<<<<<<<<<<
 *                     raise PicklingError(
 *                         "Cannot pickle object with more then 5 reduce items")
 */
        __pyx_t_3 = ((__pyx_v_size > 5) != 0);
        if (unlikely(__pyx_t_3)) {

          /* "larch/pickle/pickle.pyx":566
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)
 *                 if size > 5:
 *                     raise PicklingError(             # <<<<<<<<<<<<<<
 *                         "Cannot pickle object with more then 5 reduce items")
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PicklingError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_u_Cannot_pickle_object_with_more_t) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_Cannot_pickle_object_with_more_t);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __PYX_ERR(0, 566, __pyx_L1_error)

          /* "larch/pickle/pickle.pyx":565
 *                 pack_state_dict(p, state)
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)
 *                 if size > 5:             # <<<<<<<<<<<<<<
 *                     raise PicklingError(
 *                         "Cannot pickle object with more then 5 reduce items")
 */
        }

        /* "larch/pickle/pickle.pyx":562
 *             pack_state_array(p, state)
 *             p.pack_ext(END_OBJECT_ITEMS, 1)
 *             if size > 4:             # <<<<<<<<<<<<<<
 *                 pack_state_dict(p, state)
 *                 p.pack_ext(END_OBJECT_ITEMS, 1)
 */
      }

      /* "larch/pickle/pickle.pyx":559
 *     if size > 2:
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))
 *         if size > 3:             # <<<<<<<<<<<<<<
 *             pack_state_array(p, state)
 *             p.pack_ext(END_OBJECT_ITEMS, 1)
 */
    }

    /* "larch/pickle/pickle.pyx":557
 *     p.pack_ext(FAST_NEW, size)
 *     p.dump(<object>PyTuple_GET_ITEM(state, 1))
 *     if size > 2:             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 2))
 *         if size > 3:
 */
  }

  /* "larch/pickle/pickle.pyx":542
 * 
 * 
 * cdef inline int _fast_save_finish(Packer* p, o, state) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t size
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("larch.pickle.pickle._fast_save_finish", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":570
 * 
 * 
 * cdef int _save__newobj__(Packer* p, object o, state) except -1:             # <<<<<<<<<<<<<<
 *     register_type(o, save_new_object)
 *     if p.protocol < 4:
 */

static int __pyx_f_5larch_6pickle_6pickle__save__newobj__(Packer *__pyx_v_p, PyObject *__pyx_v_o, PyObject *__pyx_v_state) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save__newobj__", 0);

  /* "larch/pickle/pickle.pyx":571
 * 
 * cdef int _save__newobj__(Packer* p, object o, state) except -1:
 *     register_type(o, save_new_object)             # <<<<<<<<<<<<<<
 *     if p.protocol < 4:
 *         return _save_new_object_finish(p, o, state)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_v_o, __pyx_f_5larch_6pickle_6pickle_save_new_object);

  /* "larch/pickle/pickle.pyx":572
 * cdef int _save__newobj__(Packer* p, object o, state) except -1:
 *     register_type(o, save_new_object)
 *     if p.protocol < 4:             # <<<<<<<<<<<<<<
 *         return _save_new_object_finish(p, o, state)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_p->protocol < 4) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":573
 *     register_type(o, save_new_object)
 *     if p.protocol < 4:
 *         return _save_new_object_finish(p, o, state)             # <<<<<<<<<<<<<<
 *     else:
 *         return _fast_save_finish(p, o, state)
 */
    __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__save_new_object_finish(__pyx_v_p, __pyx_v_o, __pyx_v_state); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 573, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":572
 * cdef int _save__newobj__(Packer* p, object o, state) except -1:
 *     register_type(o, save_new_object)
 *     if p.protocol < 4:             # <<<<<<<<<<<<<<
 *         return _save_new_object_finish(p, o, state)
 *     else:
 */
  }

  /* "larch/pickle/pickle.pyx":575
 *         return _save_new_object_finish(p, o, state)
 *     else:
 *         return _fast_save_finish(p, o, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__fast_save_finish(__pyx_v_p, __pyx_v_o, __pyx_v_state); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 575, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;
  }

  /* "larch/pickle/pickle.pyx":570
 * 
 * 
 * cdef int _save__newobj__(Packer* p, object o, state) except -1:             # <<<<<<<<<<<<<<
 *     register_type(o, save_new_object)
 *     if p.protocol < 4:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle._save__newobj__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":578
 * 
 * 
 * cdef inline int _save_object(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         PyObject *reduce_func
 */

static CYTHON_INLINE int __pyx_f_5larch_6pickle_6pickle__save_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_reduce_func;
  pack_t __pyx_v_next_save_func;
  PyObject *__pyx_v_do_reduce = NULL;
  PyObject *__pyx_v_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_save_object", 0);

  /* "larch/pickle/pickle.pyx":581
 *     cdef:
 *         PyObject *reduce_func
 *         pack_t next_save_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     if p.save_ref(o) > 0:
 */
  __pyx_v_next_save_func = NULL;

  /* "larch/pickle/pickle.pyx":583
 *         pack_t next_save_func = NULL
 * 
 *     if p.save_ref(o) > 0:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_t_1 = ((__pyx_v_p->save_ref(__pyx_v_o) > 0) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":584
 * 
 *     if p.save_ref(o) > 0:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":583
 *         pack_t next_save_func = NULL
 * 
 *     if p.save_ref(o) > 0:             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":586
 *         return 0
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))             # <<<<<<<<<<<<<<
 *     if reduce_func is NULL:
 *         do_reduce = o.__reduce_ex__
 */
  __pyx_t_2 = ((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->dispatch_table;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_reduce_func = PyDict_GetItem(__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_o)));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":587
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 *     if reduce_func is NULL:             # <<<<<<<<<<<<<<
 *         do_reduce = o.__reduce_ex__
 *         try:
 */
  __pyx_t_1 = ((__pyx_v_reduce_func == NULL) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":588
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 *     if reduce_func is NULL:
 *         do_reduce = o.__reduce_ex__             # <<<<<<<<<<<<<<
 *         try:
 *             state = do_reduce(REDUCE_PROTOCOL)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_reduce_ex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_do_reduce = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":589
 *     if reduce_func is NULL:
 *         do_reduce = o.__reduce_ex__
 *         try:             # <<<<<<<<<<<<<<
 *             state = do_reduce(REDUCE_PROTOCOL)
 *         except TypeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "larch/pickle/pickle.pyx":590
 *         do_reduce = o.__reduce_ex__
 *         try:
 *             state = do_reduce(REDUCE_PROTOCOL)             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             # a meta class
 */
        __Pyx_INCREF(__pyx_v_do_reduce);
        __pyx_t_6 = __pyx_v_do_reduce; __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_state = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "larch/pickle/pickle.pyx":589
 *     if reduce_func is NULL:
 *         do_reduce = o.__reduce_ex__
 *         try:             # <<<<<<<<<<<<<<
 *             state = do_reduce(REDUCE_PROTOCOL)
 *         except TypeError:
 */
      }

      /* "larch/pickle/pickle.pyx":599
 *             return 0
 *         else:
 *             if not isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *                 next_save_func = save_reduced
 *     else:
 */
      /*else:*/ {
        __pyx_t_1 = __Pyx_PyBaseString_Check(__pyx_v_state); 
        __pyx_t_8 = ((!(__pyx_t_1 != 0)) != 0);
        if (__pyx_t_8) {

          /* "larch/pickle/pickle.pyx":600
 *         else:
 *             if not isinstance(state, basestring):
 *                 next_save_func = save_reduced             # <<<<<<<<<<<<<<
 *     else:
 *         state = (<object>reduce_func)(o)
 */
          __pyx_v_next_save_func = __pyx_f_5larch_6pickle_6pickle_save_reduced;

          /* "larch/pickle/pickle.pyx":599
 *             return 0
 *         else:
 *             if not isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *                 next_save_func = save_reduced
 *     else:
 */
        }
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L10_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "larch/pickle/pickle.pyx":591
 *         try:
 *             state = do_reduce(REDUCE_PROTOCOL)
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             # a meta class
 *             try:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("larch.pickle.pickle._save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 591, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);

        /* "larch/pickle/pickle.pyx":593
 *         except TypeError:
 *             # a meta class
 *             try:             # <<<<<<<<<<<<<<
 *                 (<Pickler>p.pickler).pack_import1(GLOBAL_OBJECT, o)
 *             except:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {

            /* "larch/pickle/pickle.pyx":594
 *             # a meta class
 *             try:
 *                 (<Pickler>p.pickler).pack_import1(GLOBAL_OBJECT, o)             # <<<<<<<<<<<<<<
 *             except:
 *                 reraise()
 */
            __pyx_t_9 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import1(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler), GLOBAL_OBJECT, __pyx_v_o); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 594, __pyx_L14_error)

            /* "larch/pickle/pickle.pyx":593
 *         except TypeError:
 *             # a meta class
 *             try:             # <<<<<<<<<<<<<<
 *                 (<Pickler>p.pickler).pack_import1(GLOBAL_OBJECT, o)
 *             except:
 */
          }
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L21_try_end;
          __pyx_L14_error:;

          /* "larch/pickle/pickle.pyx":595
 *             try:
 *                 (<Pickler>p.pickler).pack_import1(GLOBAL_OBJECT, o)
 *             except:             # <<<<<<<<<<<<<<
 *                 reraise()
 *             return 0
 */
          /*except:*/ {
            __Pyx_AddTraceback("larch.pickle.pickle._save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0) __PYX_ERR(0, 595, __pyx_L16_except_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_GOTREF(__pyx_t_15);

            /* "larch/pickle/pickle.pyx":596
 *                 (<Pickler>p.pickler).pack_import1(GLOBAL_OBJECT, o)
 *             except:
 *                 reraise()             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
 */
            __pyx_f_5larch_6pickle_6pickle_reraise();
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L15_exception_handled;
          }
          __pyx_L16_except_error:;

          /* "larch/pickle/pickle.pyx":593
 *         except TypeError:
 *             # a meta class
 *             try:             # <<<<<<<<<<<<<<
 *                 (<Pickler>p.pickler).pack_import1(GLOBAL_OBJECT, o)
 *             except:
 */
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L7_except_error;
          __pyx_L15_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          __pyx_L21_try_end:;
        }

        /* "larch/pickle/pickle.pyx":597
 *             except:
 *                 reraise()
 *             return 0             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(state, basestring):
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L8_except_return;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "larch/pickle/pickle.pyx":589
 *     if reduce_func is NULL:
 *         do_reduce = o.__reduce_ex__
 *         try:             # <<<<<<<<<<<<<<
 *             state = do_reduce(REDUCE_PROTOCOL)
 *         except TypeError:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L8_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L10_try_end:;
    }

    /* "larch/pickle/pickle.pyx":587
 * 
 *     reduce_func = PyDict_GetItem((<Pickler>p.pickler).dispatch_table, type(o))
 *     if reduce_func is NULL:             # <<<<<<<<<<<<<<
 *         do_reduce = o.__reduce_ex__
 *         try:
 */
    goto __pyx_L4;
  }

  /* "larch/pickle/pickle.pyx":602
 *                 next_save_func = save_reduced
 *     else:
 *         state = (<object>reduce_func)(o)             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(state, basestring):
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_reduce_func));
    __pyx_t_6 = ((PyObject *)__pyx_v_reduce_func); __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_o) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_o);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_state = __pyx_t_7;
    __pyx_t_7 = 0;
  }
  __pyx_L4:;

  /* "larch/pickle/pickle.pyx":604
 *         state = (<object>reduce_func)(o)
 * 
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  __pyx_t_8 = __Pyx_PyBaseString_Check(__pyx_v_state); 
  __pyx_t_1 = (__pyx_t_8 != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":605
 * 
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler)->__pyx_vtab)->pack_import2(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_p->pickler), SINGLETON, __pyx_t_7, __pyx_v_state); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "larch/pickle/pickle.pyx":606
 *     if isinstance(state, basestring):
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     if ((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":604
 *         state = (<object>reduce_func)(o)
 * 
 *     if isinstance(state, basestring):             # <<<<<<<<<<<<<<
 *         (<Pickler>p.pickler).pack_import2(SINGLETON, o.__module__, state)
 *         return 0
 */
  }

  /* "larch/pickle/pickle.pyx":608
 *         return 0
 * 
 *     if ((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":             # <<<<<<<<<<<<<<
 *         return _save__newobj__(p, o, state)
 *     else:
 */
  __pyx_t_16 = PyTuple_GET_ITEM(__pyx_v_state, 0);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_t_16), __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_n_u_newobj, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":609
 * 
 *     if ((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":
 *         return _save__newobj__(p, o, state)             # <<<<<<<<<<<<<<
 *     else:
 *         p.pack_ext(OBJECT, 1)
 */
    __pyx_t_9 = __pyx_f_5larch_6pickle_6pickle__save__newobj__(__pyx_v_p, __pyx_v_o, __pyx_v_state); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 609, __pyx_L1_error)
    __pyx_r = __pyx_t_9;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":608
 *         return 0
 * 
 *     if ((<object>PyTuple_GET_ITEM(state, 0)).__name__) == "__newobj__":             # <<<<<<<<<<<<<<
 *         return _save__newobj__(p, o, state)
 *     else:
 */
  }

  /* "larch/pickle/pickle.pyx":611
 *         return _save__newobj__(p, o, state)
 *     else:
 *         p.pack_ext(OBJECT, 1)             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 */
  /*else*/ {
    (void)(__pyx_v_p->pack_ext(OBJECT, 1));

    /* "larch/pickle/pickle.pyx":612
 *     else:
 *         p.pack_ext(OBJECT, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 0))             # <<<<<<<<<<<<<<
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 * 
 */
    __pyx_t_16 = PyTuple_GET_ITEM(__pyx_v_state, 0);
    __pyx_v_p->dump(((PyObject *)__pyx_t_16));

    /* "larch/pickle/pickle.pyx":613
 *         p.pack_ext(OBJECT, 1)
 *         p.dump(<object>PyTuple_GET_ITEM(state, 0))
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))             # <<<<<<<<<<<<<<
 * 
 *     if next_save_func:
 */
    __pyx_t_16 = PyTuple_GET_ITEM(__pyx_v_state, 1);
    __pyx_v_p->dump(((PyObject *)__pyx_t_16));
  }

  /* "larch/pickle/pickle.pyx":615
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 * 
 *     if next_save_func:             # <<<<<<<<<<<<<<
 *         register_type(o, next_save_func)
 * 
 */
  __pyx_t_1 = (__pyx_v_next_save_func != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":616
 * 
 *     if next_save_func:
 *         register_type(o, next_save_func)             # <<<<<<<<<<<<<<
 * 
 *     save_object_state(p, state)
 */
    __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_v_o, __pyx_v_next_save_func);

    /* "larch/pickle/pickle.pyx":615
 *         p.dump(<object>PyTuple_GET_ITEM(state, 1))
 * 
 *     if next_save_func:             # <<<<<<<<<<<<<<
 *         register_type(o, next_save_func)
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":618
 *         register_type(o, next_save_func)
 * 
 *     save_object_state(p, state)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_state))||((__pyx_v_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v_state)->tp_name), 0))) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_f_5larch_6pickle_6pickle_save_object_state(__pyx_v_p, ((PyObject*)__pyx_v_state));

  /* "larch/pickle/pickle.pyx":578
 * 
 * 
 * cdef inline int _save_object(Packer* p, object o) except -1:             # <<<<<<<<<<<<<<
 *     cdef:
 *         PyObject *reduce_func
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("larch.pickle.pickle._save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_do_reduce);
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":621
 * 
 * 
 * cdef void save_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_object(p, o)
 */

static void __pyx_f_5larch_6pickle_6pickle_save_object(Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_object", 0);

  /* "larch/pickle/pickle.pyx":622
 * 
 * cdef void save_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_object(p, o)
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":623
 * cdef void save_object(Packer* p, object o):
 *     try:
 *         _save_object(p, o)             # <<<<<<<<<<<<<<
 *     except:
 *         reraise()
 */
      __pyx_t_4 = __pyx_f_5larch_6pickle_6pickle__save_object(__pyx_v_p, __pyx_v_o); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 623, __pyx_L3_error)

      /* "larch/pickle/pickle.pyx":622
 * 
 * cdef void save_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_object(p, o)
 *     except:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "larch/pickle/pickle.pyx":624
 *     try:
 *         _save_object(p, o)
 *     except:             # <<<<<<<<<<<<<<
 *         reraise()
 * 
 */
    /*except:*/ {
      __Pyx_AddTraceback("larch.pickle.pickle.save_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 624, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "larch/pickle/pickle.pyx":625
 *         _save_object(p, o)
 *     except:
 *         reraise()             # <<<<<<<<<<<<<<
 * 
 * save_object_ptr = save_object
 */
      __pyx_f_5larch_6pickle_6pickle_reraise();
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":622
 * 
 * cdef void save_object(Packer* p, object o):
 *     try:             # <<<<<<<<<<<<<<
 *         _save_object(p, o)
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":621
 * 
 * 
 * cdef void save_object(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     try:
 *         _save_object(p, o)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_object", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":630
 * 
 * 
 * cdef void save_impossible(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     IF PY_MAJOR_VERSION > 2:
 *         cdef:
 */

static void __pyx_f_5larch_6pickle_6pickle_save_impossible(CYTHON_UNUSED Packer *__pyx_v_p, PyObject *__pyx_v_o) {
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_v_bmsg = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_impossible", 0);

  /* "larch/pickle/pickle.pyx":633
 *     IF PY_MAJOR_VERSION > 2:
 *         cdef:
 *             unicode msg = "Cannot save {!r}".format(o)             # <<<<<<<<<<<<<<
 *             bytes bmsg = msg.encode()
 *     ELSE:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Cannot_save_r, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_o) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_o);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 633, __pyx_L1_error)
  __pyx_v_msg = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":634
 *         cdef:
 *             unicode msg = "Cannot save {!r}".format(o)
 *             bytes bmsg = msg.encode()             # <<<<<<<<<<<<<<
 *     ELSE:
 *         cdef:
 */
  if (unlikely(__pyx_v_msg == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 634, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_msg, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bmsg = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":639
 *             bytes bmsg = "Cannot save {!r}".format(o)
 * 
 *     PyErr_SetString(PicklingError, bmsg)             # <<<<<<<<<<<<<<
 *     throw_python_error()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PicklingError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_bmsg == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 639, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_v_bmsg); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L1_error)
  PyErr_SetString(__pyx_t_1, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":640
 * 
 *     PyErr_SetString(PicklingError, bmsg)
 *     throw_python_error()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  throw_python_error();

  /* "larch/pickle/pickle.pyx":630
 * 
 * 
 * cdef void save_impossible(Packer* p, object o):             # <<<<<<<<<<<<<<
 *     IF PY_MAJOR_VERSION > 2:
 *         cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("larch.pickle.pickle.save_impossible", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_bmsg);
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":643
 * 
 * 
 * cdef void register_type(o, pack_t saver):             # <<<<<<<<<<<<<<
 *     pickle_registry.register_type(type(o), saver)
 * 
 */

static void __pyx_f_5larch_6pickle_6pickle_register_type(PyObject *__pyx_v_o, pack_t __pyx_v_saver) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register_type", 0);

  /* "larch/pickle/pickle.pyx":644
 * 
 * cdef void register_type(o, pack_t saver):
 *     pickle_registry.register_type(type(o), saver)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  pickle_registry.register_type(((PyObject *)Py_TYPE(__pyx_v_o)), __pyx_v_saver);

  /* "larch/pickle/pickle.pyx":643
 * 
 * 
 * cdef void register_type(o, pack_t saver):             # <<<<<<<<<<<<<<
 *     pickle_registry.register_type(type(o), saver)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":679
 * ctypedef int (*pack_import_names_t)(Packer* p, module, name) except -1
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *     p.dump(module)
 *     p.dump(name)
 */

static int __pyx_f_5larch_6pickle_6pickle_simple_pack(Packer *__pyx_v_p, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simple_pack", 0);

  /* "larch/pickle/pickle.pyx":680
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:
 *     p.dump(module)             # <<<<<<<<<<<<<<
 *     p.dump(name)
 * 
 */
  __pyx_v_p->dump(__pyx_v_module);

  /* "larch/pickle/pickle.pyx":681
 * cdef int simple_pack(Packer* p, module, name) except -1:
 *     p.dump(module)
 *     p.dump(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_p->dump(__pyx_v_name);

  /* "larch/pickle/pickle.pyx":679
 * ctypedef int (*pack_import_names_t)(Packer* p, module, name) except -1
 * 
 * cdef int simple_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *     p.dump(module)
 *     p.dump(name)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":685
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef int mapped_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 */

static int __pyx_f_5larch_6pickle_6pickle_mapped_pack(Packer *__pyx_v_p, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_tmp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mapped_pack", 0);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);

  /* "larch/pickle/pickle.pyx":687
 *     cdef int mapped_pack(Packer* p, module, name) except -1:
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module, name = <object>tmp
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_6pickle_name_mapping_3to2;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":688
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module, name = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":689
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 *         if tmp is not NULL:
 *             module, name = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 689, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 689, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 689, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":688
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module, name = <object>tmp
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":691
 *             module, name = <object>tmp
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module = <object>tmp
 */
  __pyx_t_2 = __pyx_v_5larch_6pickle_6pickle_import_mapping_3to2;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_2, __pyx_v_module);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":692
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":693
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 *         if tmp is not NULL:
 *             module = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         simple_pack(p, module, name)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":692
 * 
 *         tmp = PyDict_GetItem(import_mapping_3to2, module)
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module = <object>tmp
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":695
 *             module = <object>tmp
 * 
 *         simple_pack(p, module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_f_5larch_6pickle_6pickle_simple_pack(__pyx_v_p, __pyx_v_module, __pyx_v_name); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 695, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":685
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef int mapped_pack(Packer* p, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *tmp
 *         tmp = PyDict_GetItem(name_mapping_3to2, (module, name))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.pickle.mapped_pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":708
 *         public uint32_t last_refcount
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self, file=None, protocol=MAX_PROTOCOL_VERSION, with_refs=True):
 *         IF PY_MAJOR_VERSION < 3:
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_protocol = 0;
  PyObject *__pyx_v_with_refs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_protocol,&__pyx_n_s_with_refs,0};
    PyObject* values[3] = {0,0,0};

    /* "larch/pickle/pickle.pyx":709
 * 
 *     def __init__(
 *             self, file=None, protocol=MAX_PROTOCOL_VERSION, with_refs=True):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION < 3:
 *             self.protocol = 2
 */
    values[0] = ((PyObject *)Py_None);
    values[1] = __pyx_k_;
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_protocol);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_with_refs);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 708, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_protocol = values[1];
    __pyx_v_with_refs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 708, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler___init__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self), __pyx_v_file, __pyx_v_protocol, __pyx_v_with_refs);

  /* "larch/pickle/pickle.pyx":708
 *         public uint32_t last_refcount
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self, file=None, protocol=MAX_PROTOCOL_VERSION, with_refs=True):
 *         IF PY_MAJOR_VERSION < 3:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_7Pickler___init__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol, PyObject *__pyx_v_with_refs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  uint8_t __pyx_t_6;
  int __pyx_t_7;
  bool __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_protocol);

  /* "larch/pickle/pickle.pyx":714
 *             self.pack_import_names = simple_pack
 *         ELSE:
 *             if protocol < 0: protocol = MAX_PROTOCOL_VERSION             # <<<<<<<<<<<<<<
 *             protocol = min(protocol, MAX_PROTOCOL_VERSION)
 *             self.protocol = protocol
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_protocol, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION);
    __Pyx_DECREF_SET(__pyx_v_protocol, __pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION);
  }

  /* "larch/pickle/pickle.pyx":715
 *         ELSE:
 *             if protocol < 0: protocol = MAX_PROTOCOL_VERSION
 *             protocol = min(protocol, MAX_PROTOCOL_VERSION)             # <<<<<<<<<<<<<<
 *             self.protocol = protocol
 *             if protocol == 2:
 */
  __Pyx_INCREF(__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION);
  __pyx_t_1 = __pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION;
  __Pyx_INCREF(__pyx_v_protocol);
  __pyx_t_3 = __pyx_v_protocol;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_t_1;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_protocol, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":716
 *             if protocol < 0: protocol = MAX_PROTOCOL_VERSION
 *             protocol = min(protocol, MAX_PROTOCOL_VERSION)
 *             self.protocol = protocol             # <<<<<<<<<<<<<<
 *             if protocol == 2:
 *                 self.pack_import_names = mapped_pack
 */
  __pyx_t_6 = __Pyx_PyInt_As_uint8_t(__pyx_v_protocol); if (unlikely((__pyx_t_6 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L1_error)
  __pyx_v_self->protocol = __pyx_t_6;

  /* "larch/pickle/pickle.pyx":717
 *             protocol = min(protocol, MAX_PROTOCOL_VERSION)
 *             self.protocol = protocol
 *             if protocol == 2:             # <<<<<<<<<<<<<<
 *                 self.pack_import_names = mapped_pack
 *             else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_protocol, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":718
 *             self.protocol = protocol
 *             if protocol == 2:
 *                 self.pack_import_names = mapped_pack             # <<<<<<<<<<<<<<
 *             else:
 *                 self.pack_import_names = simple_pack
 */
    __pyx_v_self->pack_import_names = __pyx_f_5larch_6pickle_6pickle_mapped_pack;

    /* "larch/pickle/pickle.pyx":717
 *             protocol = min(protocol, MAX_PROTOCOL_VERSION)
 *             self.protocol = protocol
 *             if protocol == 2:             # <<<<<<<<<<<<<<
 *                 self.pack_import_names = mapped_pack
 *             else:
 */
    goto __pyx_L4;
  }

  /* "larch/pickle/pickle.pyx":720
 *                 self.pack_import_names = mapped_pack
 *             else:
 *                 self.pack_import_names = simple_pack             # <<<<<<<<<<<<<<
 * 
 *         self.packer = new Packer(self, protocol, with_refs)
 */
  /*else*/ {
    __pyx_v_self->pack_import_names = __pyx_f_5larch_6pickle_6pickle_simple_pack;
  }
  __pyx_L4:;

  /* "larch/pickle/pickle.pyx":722
 *                 self.pack_import_names = simple_pack
 * 
 *         self.packer = new Packer(self, protocol, with_refs)             # <<<<<<<<<<<<<<
 *         self.dispatch_table = dispatch_table
 *         if protocol < 4:
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_protocol); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 722, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_with_refs); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 722, __pyx_L1_error)
  __pyx_v_self->packer = new Packer(((PyObject *)__pyx_v_self), __pyx_t_7, __pyx_t_8);

  /* "larch/pickle/pickle.pyx":723
 * 
 *         self.packer = new Packer(self, protocol, with_refs)
 *         self.dispatch_table = dispatch_table             # <<<<<<<<<<<<<<
 *         if protocol < 4:
 *             self.packer.min_string_size_for_ref = 5;
 */
  __Pyx_INCREF(__pyx_v_5larch_6pickle_6pickle_dispatch_table);
  __Pyx_GIVEREF(__pyx_v_5larch_6pickle_6pickle_dispatch_table);
  __Pyx_GOTREF(__pyx_v_self->dispatch_table);
  __Pyx_DECREF(__pyx_v_self->dispatch_table);
  __pyx_v_self->dispatch_table = __pyx_v_5larch_6pickle_6pickle_dispatch_table;

  /* "larch/pickle/pickle.pyx":724
 *         self.packer = new Packer(self, protocol, with_refs)
 *         self.dispatch_table = dispatch_table
 *         if protocol < 4:             # <<<<<<<<<<<<<<
 *             self.packer.min_string_size_for_ref = 5;
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_protocol, __pyx_int_4, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":725
 *         self.dispatch_table = dispatch_table
 *         if protocol < 4:
 *             self.packer.min_string_size_for_ref = 5;             # <<<<<<<<<<<<<<
 *         else:
 *             self.packer.min_string_size_for_ref = 3;
 */
    __pyx_v_self->packer->min_string_size_for_ref = 5;

    /* "larch/pickle/pickle.pyx":724
 *         self.packer = new Packer(self, protocol, with_refs)
 *         self.dispatch_table = dispatch_table
 *         if protocol < 4:             # <<<<<<<<<<<<<<
 *             self.packer.min_string_size_for_ref = 5;
 *         else:
 */
    goto __pyx_L5;
  }

  /* "larch/pickle/pickle.pyx":727
 *             self.packer.min_string_size_for_ref = 5;
 *         else:
 *             self.packer.min_string_size_for_ref = 3;             # <<<<<<<<<<<<<<
 * 
 *         if file is None:
 */
  /*else*/ {
    __pyx_v_self->packer->min_string_size_for_ref = 3;
  }
  __pyx_L5:;

  /* "larch/pickle/pickle.pyx":729
 *             self.packer.min_string_size_for_ref = 3;
 * 
 *         if file is None:             # <<<<<<<<<<<<<<
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer
 */
  __pyx_t_2 = (__pyx_v_file == Py_None);
  __pyx_t_9 = (__pyx_t_2 != 0);
  if (__pyx_t_9) {

    /* "larch/pickle/pickle.pyx":730
 * 
 *         if file is None:
 *             self.file = OutputBuffer()             # <<<<<<<<<<<<<<
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle_OutputBuffer)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":731
 *         if file is None:
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer             # <<<<<<<<<<<<<<
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 */
    __pyx_v_self->packer->do_write = __pyx_f_5larch_6pickle_6pickle_write_buffer;

    /* "larch/pickle/pickle.pyx":729
 *             self.packer.min_string_size_for_ref = 3;
 * 
 *         if file is None:             # <<<<<<<<<<<<<<
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer
 */
    goto __pyx_L6;
  }

  /* "larch/pickle/pickle.pyx":732
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):             # <<<<<<<<<<<<<<
 *             self.file = file.c_pickle()
 *             self.packer.do_write = write_external
 */
  __pyx_t_9 = __Pyx_HasAttr(__pyx_v_file, __pyx_n_u_c_pickle); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 732, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_9 != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":733
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()             # <<<<<<<<<<<<<<
 *             self.packer.do_write = write_external
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_c_pickle); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":734
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 *             self.packer.do_write = write_external             # <<<<<<<<<<<<<<
 *         else:
 *             self.file = _FileLike(file)
 */
    __pyx_v_self->packer->do_write = __pyx_f_5larch_6pickle_6pickle_write_external;

    /* "larch/pickle/pickle.pyx":732
 *             self.file = OutputBuffer()
 *             self.packer.do_write = write_buffer
 *         elif hasattr(file, "c_pickle"):             # <<<<<<<<<<<<<<
 *             self.file = file.c_pickle()
 *             self.packer.do_write = write_external
 */
    goto __pyx_L6;
  }

  /* "larch/pickle/pickle.pyx":736
 *             self.packer.do_write = write_external
 *         else:
 *             self.file = _FileLike(file)             # <<<<<<<<<<<<<<
 *             self.packer.do_write = write_file
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle__FileLike), __pyx_v_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":737
 *         else:
 *             self.file = _FileLike(file)
 *             self.packer.do_write = write_file             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->packer->do_write = __pyx_f_5larch_6pickle_6pickle_write_file;
  }
  __pyx_L6:;

  /* "larch/pickle/pickle.pyx":708
 *         public uint32_t last_refcount
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self, file=None, protocol=MAX_PROTOCOL_VERSION, with_refs=True):
 *         IF PY_MAJOR_VERSION < 3:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_protocol);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":739
 *             self.packer.do_write = write_file
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.packer
 * 
 */

/* Python wrapper */
static void __pyx_pw_5larch_6pickle_6pickle_7Pickler_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5larch_6pickle_6pickle_7Pickler_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5larch_6pickle_6pickle_7Pickler_2__dealloc__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5larch_6pickle_6pickle_7Pickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "larch/pickle/pickle.pyx":740
 * 
 *     def __dealloc__(self):
 *         del self.packer             # <<<<<<<<<<<<<<
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:
 */
  delete __pyx_v_self->packer;

  /* "larch/pickle/pickle.pyx":739
 *             self.packer.do_write = write_file
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.packer
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":742
 *         del self.packer
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:             # <<<<<<<<<<<<<<
 *         self.pack_import2(code, o.__module__, o.__qualname__)
 * 
 */

static int __pyx_f_5larch_6pickle_6pickle_7Pickler_pack_import1(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, uint8_t __pyx_v_code, PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_import1", 0);

  /* "larch/pickle/pickle.pyx":743
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:
 *         self.pack_import2(code, o.__module__, o.__qualname__)             # <<<<<<<<<<<<<<
 * 
 *     cdef int pack_import2(self, uint8_t code, module, name) except -1:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_module); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_o, __pyx_n_s_qualname); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->pack_import2(__pyx_v_self, __pyx_v_code, __pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":742
 *         del self.packer
 * 
 *     cdef int pack_import1(self, uint8_t code, o) except -1:             # <<<<<<<<<<<<<<
 *         self.pack_import2(code, o.__module__, o.__qualname__)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.pack_import1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":745
 *         self.pack_import2(code, o.__module__, o.__qualname__)
 * 
 *     cdef int pack_import2(self, uint8_t code, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *rcode
 * 
 */

static int __pyx_f_5larch_6pickle_6pickle_7Pickler_pack_import2(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, uint8_t __pyx_v_code, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_rcode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pack_import2", 0);

  /* "larch/pickle/pickle.pyx":748
 *         cdef PyObject *rcode
 * 
 *         rcode = PyDict_GetItem(extension_registry, (module, name))             # <<<<<<<<<<<<<<
 *         if rcode is NULL:
 *             self.packer.pack_ext(code, 1)
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_6pickle_extension_registry;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __pyx_v_rcode = PyDict_GetItem(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":749
 * 
 *         rcode = PyDict_GetItem(extension_registry, (module, name))
 *         if rcode is NULL:             # <<<<<<<<<<<<<<
 *             self.packer.pack_ext(code, 1)
 *             self.pack_import_names(self.packer, module, name)
 */
  __pyx_t_3 = ((__pyx_v_rcode == NULL) != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":750
 *         rcode = PyDict_GetItem(extension_registry, (module, name))
 *         if rcode is NULL:
 *             self.packer.pack_ext(code, 1)             # <<<<<<<<<<<<<<
 *             self.pack_import_names(self.packer, module, name)
 *         else:
 */
    (void)(__pyx_v_self->packer->pack_ext(__pyx_v_code, 1));

    /* "larch/pickle/pickle.pyx":751
 *         if rcode is NULL:
 *             self.packer.pack_ext(code, 1)
 *             self.pack_import_names(self.packer, module, name)             # <<<<<<<<<<<<<<
 *         else:
 *             self.packer.pack_ext(code, 0)
 */
    __pyx_t_4 = __pyx_v_self->pack_import_names(__pyx_v_self->packer, __pyx_v_module, __pyx_v_name); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 751, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":749
 * 
 *         rcode = PyDict_GetItem(extension_registry, (module, name))
 *         if rcode is NULL:             # <<<<<<<<<<<<<<
 *             self.packer.pack_ext(code, 1)
 *             self.pack_import_names(self.packer, module, name)
 */
    goto __pyx_L3;
  }

  /* "larch/pickle/pickle.pyx":753
 *             self.pack_import_names(self.packer, module, name)
 *         else:
 *             self.packer.pack_ext(code, 0)             # <<<<<<<<<<<<<<
 *             self.packer.write_int(<uint32_t><object>rcode)
 * 
 */
  /*else*/ {
    (void)(__pyx_v_self->packer->pack_ext(__pyx_v_code, 0));

    /* "larch/pickle/pickle.pyx":754
 *         else:
 *             self.packer.pack_ext(code, 0)
 *             self.packer.write_int(<uint32_t><object>rcode)             # <<<<<<<<<<<<<<
 * 
 *     cdef int check_init(self) except -1:
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint32_t(((PyObject *)__pyx_v_rcode)); if (unlikely((__pyx_t_5 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
    __pyx_v_self->packer->write_int(((uint32_t)__pyx_t_5));
  }
  __pyx_L3:;

  /* "larch/pickle/pickle.pyx":745
 *         self.pack_import2(code, o.__module__, o.__qualname__)
 * 
 *     cdef int pack_import2(self, uint8_t code, module, name) except -1:             # <<<<<<<<<<<<<<
 *         cdef PyObject *rcode
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.pack_import2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":756
 *             self.packer.write_int(<uint32_t><object>rcode)
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise PicklingError(
 */

static int __pyx_f_5larch_6pickle_6pickle_7Pickler_check_init(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_init", 0);

  /* "larch/pickle/pickle.pyx":757
 * 
 *     cdef int check_init(self) except -1:
 *         if self.file is None:             # <<<<<<<<<<<<<<
 *             raise PicklingError(
 *                 "Pickler.__init__() was not called by "
 */
  __pyx_t_1 = (__pyx_v_self->file == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "larch/pickle/pickle.pyx":758
 *     cdef int check_init(self) except -1:
 *         if self.file is None:
 *             raise PicklingError(             # <<<<<<<<<<<<<<
 *                 "Pickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__qualname__,)))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PicklingError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "larch/pickle/pickle.pyx":760
 *             raise PicklingError(
 *                 "Pickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__qualname__,)))             # <<<<<<<<<<<<<<
 * 
 *     def dump(self, obj, bool with_version=True):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Pickler___init___was_not_called, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_qualname); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 758, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":757
 * 
 *     cdef int check_init(self) except -1:
 *         if self.file is None:             # <<<<<<<<<<<<<<
 *             raise PicklingError(
 *                 "Pickler.__init__() was not called by "
 */
  }

  /* "larch/pickle/pickle.pyx":756
 *             self.packer.write_int(<uint32_t><object>rcode)
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise PicklingError(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.check_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":762
 *                 "{}.__init__()".format((self.__class__.__qualname__,)))
 * 
 *     def dump(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         if with_version:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_5dump(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_5dump(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  bool __pyx_v_with_version;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_with_version,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_with_version);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump") < 0)) __PYX_ERR(0, 762, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    if (values[1]) {
      __pyx_v_with_version = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_with_version == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L3_error)
    } else {
      __pyx_v_with_version = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 762, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_4dump(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self), __pyx_v_obj, __pyx_v_with_version);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_4dump(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);

  /* "larch/pickle/pickle.pyx":763
 * 
 *     def dump(self, obj, bool with_version=True):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 763, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":764
 *     def dump(self, obj, bool with_version=True):
 *         self.check_init()
 *         if with_version:             # <<<<<<<<<<<<<<
 *             self.packer.pack_version(self.protocol)
 *         try:
 */
  __pyx_t_2 = (__pyx_v_with_version != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":765
 *         self.check_init()
 *         if with_version:
 *             self.packer.pack_version(self.protocol)             # <<<<<<<<<<<<<<
 *         try:
 *             self.packer.first_dump(obj)
 */
    try {
      __pyx_v_self->packer->pack_version(__pyx_v_self->protocol);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 765, __pyx_L1_error)
    }

    /* "larch/pickle/pickle.pyx":764
 *     def dump(self, obj, bool with_version=True):
 *         self.check_init()
 *         if with_version:             # <<<<<<<<<<<<<<
 *             self.packer.pack_version(self.protocol)
 *         try:
 */
  }

  /* "larch/pickle/pickle.pyx":766
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 *         try:             # <<<<<<<<<<<<<<
 *             self.packer.first_dump(obj)
 *         finally:
 */
  /*try:*/ {

    /* "larch/pickle/pickle.pyx":767
 *             self.packer.pack_version(self.protocol)
 *         try:
 *             self.packer.first_dump(obj)             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.packer.reset()
 */
    __pyx_t_1 = __pyx_v_self->packer->first_dump(__pyx_v_obj); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 767, __pyx_L5_error)
  }

  /* "larch/pickle/pickle.pyx":769
 *             self.packer.first_dump(obj)
 *         finally:
 *             self.last_refcount = self.packer.reset()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "larch/pickle/pickle.pyx":770
 *         finally:
 *             self.last_refcount = self.packer.reset()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def dumps(self, obj, bool with_version=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":762
 *                 "{}.__init__()".format((self.__class__.__qualname__,)))
 * 
 *     def dump(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         if with_version:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":772
 *         return self
 * 
 *     def dumps(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_7dumps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_7dumps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  bool __pyx_v_with_version;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_with_version,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_with_version);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dumps") < 0)) __PYX_ERR(0, 772, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    if (values[1]) {
      __pyx_v_with_version = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_with_version == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    } else {
      __pyx_v_with_version = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dumps", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_6dumps(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self), __pyx_v_obj, __pyx_v_with_version);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_6dumps(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_obj, bool __pyx_v_with_version) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);

  /* "larch/pickle/pickle.pyx":773
 * 
 *     def dumps(self, obj, bool with_version=True):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 773, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":774
 *     def dumps(self, obj, bool with_version=True):
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()             # <<<<<<<<<<<<<<
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 */
  ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_OutputBuffer *)((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)__pyx_v_self->file)->__pyx_vtab)->reset(((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)__pyx_v_self->file));

  /* "larch/pickle/pickle.pyx":775
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:             # <<<<<<<<<<<<<<
 *             self.packer.pack_version(self.protocol)
 *         try:
 */
  __pyx_t_2 = (__pyx_v_with_version != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":776
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:
 *             self.packer.pack_version(self.protocol)             # <<<<<<<<<<<<<<
 *         try:
 *             self.packer.first_dump(obj)
 */
    try {
      __pyx_v_self->packer->pack_version(__pyx_v_self->protocol);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 776, __pyx_L1_error)
    }

    /* "larch/pickle/pickle.pyx":775
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 *         if with_version:             # <<<<<<<<<<<<<<
 *             self.packer.pack_version(self.protocol)
 *         try:
 */
  }

  /* "larch/pickle/pickle.pyx":777
 *         if with_version:
 *             self.packer.pack_version(self.protocol)
 *         try:             # <<<<<<<<<<<<<<
 *             self.packer.first_dump(obj)
 *         finally:
 */
  /*try:*/ {

    /* "larch/pickle/pickle.pyx":778
 *             self.packer.pack_version(self.protocol)
 *         try:
 *             self.packer.first_dump(obj)             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.packer.reset()
 */
    __pyx_t_1 = __pyx_v_self->packer->first_dump(__pyx_v_obj); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 778, __pyx_L5_error)
  }

  /* "larch/pickle/pickle.pyx":780
 *             self.packer.first_dump(obj)
 *         finally:
 *             self.last_refcount = self.packer.reset()             # <<<<<<<<<<<<<<
 * 
 *         return self.get_output_string()
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->packer->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "larch/pickle/pickle.pyx":782
 *             self.last_refcount = self.packer.reset()
 * 
 *         return self.get_output_string()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bytes get_output_string(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler *)__pyx_v_self->__pyx_vtab)->get_output_string(__pyx_v_self, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_r = __pyx_t_11;
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":772
 *         return self
 * 
 *     def dumps(self, obj, bool with_version=True):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<OutputBuffer>self.file).reset()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":784
 *         return self.get_output_string()
 * 
 *     cpdef bytes get_output_string(self):             # <<<<<<<<<<<<<<
 *         return (<OutputBuffer>self.file).result()
 * 
 */

static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_9get_output_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_7Pickler_get_output_string(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_output_string", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_output_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5larch_6pickle_6pickle_7Pickler_9get_output_string)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 784, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "larch/pickle/pickle.pyx":785
 * 
 *     cpdef bytes get_output_string(self):
 *         return (<OutputBuffer>self.file).result()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_OutputBuffer *)((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)__pyx_v_self->file)->__pyx_vtab)->result(((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)__pyx_v_self->file)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":784
 *         return self.get_output_string()
 * 
 *     cpdef bytes get_output_string(self):             # <<<<<<<<<<<<<<
 *         return (<OutputBuffer>self.file).result()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.get_output_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_9get_output_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_9get_output_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_output_string (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_8get_output_string(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_8get_output_string(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_output_string", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle_7Pickler_get_output_string(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.get_output_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":705
 *         uint8_t protocol
 *         pack_import_names_t pack_import_names
 *         public dict dispatch_table             # <<<<<<<<<<<<<<
 *         public uint32_t last_refcount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table___get__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table___get__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->dispatch_table);
  __pyx_r = __pyx_v_self->dispatch_table;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table_2__set__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 705, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dispatch_table);
  __Pyx_DECREF(__pyx_v_self->dispatch_table);
  __pyx_v_self->dispatch_table = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.dispatch_table.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table_4__del__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_7Pickler_14dispatch_table_4__del__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->dispatch_table);
  __Pyx_DECREF(__pyx_v_self->dispatch_table);
  __pyx_v_self->dispatch_table = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":706
 *         pack_import_names_t pack_import_names
 *         public dict dispatch_table
 *         public uint32_t last_refcount             # <<<<<<<<<<<<<<
 * 
 *     def __init__(
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_13last_refcount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7Pickler_13last_refcount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_13last_refcount___get__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_7Pickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->last_refcount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.last_refcount.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_7Pickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_7Pickler_13last_refcount_2__set__(((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_7Pickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_v_self->last_refcount = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Pickler.last_refcount.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":791
 * # ----------------------------------
 * 
 * cdef int _load_slot_state(obj, state) except -1:             # <<<<<<<<<<<<<<
 *     cdef dict obj_value
 * 
 */

static int __pyx_f_5larch_6pickle_6pickle__load_slot_state(PyObject *__pyx_v_obj, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_obj_value = 0;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_slot_state", 0);
  __Pyx_INCREF(__pyx_v_state);

  /* "larch/pickle/pickle.pyx":794
 *     cdef dict obj_value
 * 
 *     if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:             # <<<<<<<<<<<<<<
 *         # an object with __slots__
 *         obj_value = <dict>PyTuple_GET_ITEM(state, 1)
 */
  __pyx_t_2 = (PyTuple_Check(__pyx_v_state) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((PyTuple_GET_SIZE(__pyx_v_state) == 2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":796
 *     if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:
 *         # an object with __slots__
 *         obj_value = <dict>PyTuple_GET_ITEM(state, 1)             # <<<<<<<<<<<<<<
 *         for k, v in obj_value.items():
 *             setattr(obj, k, v)
 */
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_state, 1);
    __pyx_t_4 = ((PyObject *)__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_obj_value = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":797
 *         # an object with __slots__
 *         obj_value = <dict>PyTuple_GET_ITEM(state, 1)
 *         for k, v in obj_value.items():             # <<<<<<<<<<<<<<
 *             setattr(obj, k, v)
 * 
 */
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_obj_value == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 797, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_obj_value, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "larch/pickle/pickle.pyx":798
 *         obj_value = <dict>PyTuple_GET_ITEM(state, 1)
 *         for k, v in obj_value.items():
 *             setattr(obj, k, v)             # <<<<<<<<<<<<<<
 * 
 *         # an object with __slots__ and __dict__
 */
      __pyx_t_11 = PyObject_SetAttr(__pyx_v_obj, __pyx_v_k, __pyx_v_v); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 798, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":801
 * 
 *         # an object with __slots__ and __dict__
 *         state = <object>PyTuple_GET_ITEM(state, 0)             # <<<<<<<<<<<<<<
 *         if state is not None:
 *             PyDict_Update(obj.__dict__, state)
 */
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_v_state, 0);
    __pyx_t_4 = ((PyObject *)__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_state, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":802
 *         # an object with __slots__ and __dict__
 *         state = <object>PyTuple_GET_ITEM(state, 0)
 *         if state is not None:             # <<<<<<<<<<<<<<
 *             PyDict_Update(obj.__dict__, state)
 *         return 1
 */
    __pyx_t_1 = (__pyx_v_state != Py_None);
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "larch/pickle/pickle.pyx":803
 *         state = <object>PyTuple_GET_ITEM(state, 0)
 *         if state is not None:
 *             PyDict_Update(obj.__dict__, state)             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyDict_Update(__pyx_t_4, __pyx_v_state); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "larch/pickle/pickle.pyx":802
 *         # an object with __slots__ and __dict__
 *         state = <object>PyTuple_GET_ITEM(state, 0)
 *         if state is not None:             # <<<<<<<<<<<<<<
 *             PyDict_Update(obj.__dict__, state)
 *         return 1
 */
    }

    /* "larch/pickle/pickle.pyx":804
 *         if state is not None:
 *             PyDict_Update(obj.__dict__, state)
 *         return 1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":794
 *     cdef dict obj_value
 * 
 *     if PyTuple_Check(state) and PyTuple_GET_SIZE(state) == 2:             # <<<<<<<<<<<<<<
 *         # an object with __slots__
 *         obj_value = <dict>PyTuple_GET_ITEM(state, 1)
 */
  }

  /* "larch/pickle/pickle.pyx":805
 *             PyDict_Update(obj.__dict__, state)
 *         return 1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":791
 * # ----------------------------------
 * 
 * cdef int _load_slot_state(obj, state) except -1:             # <<<<<<<<<<<<<<
 *     cdef dict obj_value
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("larch.pickle.pickle._load_slot_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj_value);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":808
 * 
 * 
 * cdef int _load_state(obj, state) except -1:             # <<<<<<<<<<<<<<
 *     if state is not None:
 *         set_state = getattr(obj, "__setstate__", None)
 */

static int __pyx_f_5larch_6pickle_6pickle__load_state(PyObject *__pyx_v_obj, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_set_state = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_state", 0);

  /* "larch/pickle/pickle.pyx":809
 * 
 * cdef int _load_state(obj, state) except -1:
 *     if state is not None:             # <<<<<<<<<<<<<<
 *         set_state = getattr(obj, "__setstate__", None)
 *         if set_state is not None:
 */
  __pyx_t_1 = (__pyx_v_state != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":810
 * cdef int _load_state(obj, state) except -1:
 *     if state is not None:
 *         set_state = getattr(obj, "__setstate__", None)             # <<<<<<<<<<<<<<
 *         if set_state is not None:
 *             set_state(state)
 */
    __pyx_t_3 = __Pyx_GetAttr3(__pyx_v_obj, __pyx_n_u_setstate, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_set_state = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":811
 *     if state is not None:
 *         set_state = getattr(obj, "__setstate__", None)
 *         if set_state is not None:             # <<<<<<<<<<<<<<
 *             set_state(state)
 *             return 0
 */
    __pyx_t_2 = (__pyx_v_set_state != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "larch/pickle/pickle.pyx":812
 *         set_state = getattr(obj, "__setstate__", None)
 *         if set_state is not None:
 *             set_state(state)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      __Pyx_INCREF(__pyx_v_set_state);
      __pyx_t_4 = __pyx_v_set_state; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_state) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_state);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "larch/pickle/pickle.pyx":813
 *         if set_state is not None:
 *             set_state(state)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if not _load_slot_state(obj, state):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "larch/pickle/pickle.pyx":811
 *     if state is not None:
 *         set_state = getattr(obj, "__setstate__", None)
 *         if set_state is not None:             # <<<<<<<<<<<<<<
 *             set_state(state)
 *             return 0
 */
    }

    /* "larch/pickle/pickle.pyx":815
 *             return 0
 * 
 *         if not _load_slot_state(obj, state):             # <<<<<<<<<<<<<<
 *             PyDict_Update(obj.__dict__, state)
 *     return 0
 */
    __pyx_t_6 = __pyx_f_5larch_6pickle_6pickle__load_slot_state(__pyx_v_obj, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 815, __pyx_L1_error)
    __pyx_t_1 = ((!(__pyx_t_6 != 0)) != 0);
    if (__pyx_t_1) {

      /* "larch/pickle/pickle.pyx":816
 * 
 *         if not _load_slot_state(obj, state):
 *             PyDict_Update(obj.__dict__, state)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyDict_Update(__pyx_t_3, __pyx_v_state); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "larch/pickle/pickle.pyx":815
 *             return 0
 * 
 *         if not _load_slot_state(obj, state):             # <<<<<<<<<<<<<<
 *             PyDict_Update(obj.__dict__, state)
 *     return 0
 */
    }

    /* "larch/pickle/pickle.pyx":809
 * 
 * cdef int _load_state(obj, state) except -1:
 *     if state is not None:             # <<<<<<<<<<<<<<
 *         set_state = getattr(obj, "__setstate__", None)
 *         if set_state is not None:
 */
  }

  /* "larch/pickle/pickle.pyx":817
 *         if not _load_slot_state(obj, state):
 *             PyDict_Update(obj.__dict__, state)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":808
 * 
 * 
 * cdef int _load_state(obj, state) except -1:             # <<<<<<<<<<<<<<
 *     if state is not None:
 *         set_state = getattr(obj, "__setstate__", None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.pickle._load_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_set_state);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":820
 * 
 * 
 * cdef int _load_state_sequence(Unpacker *p, obj) except -1:             # <<<<<<<<<<<<<<
 *     item = p.load_object()
 *     if item is not _end_item:
 */

static int __pyx_f_5larch_6pickle_6pickle__load_state_sequence(Unpacker *__pyx_v_p, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_append = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_state_sequence", 0);

  /* "larch/pickle/pickle.pyx":821
 * 
 * cdef int _load_state_sequence(Unpacker *p, obj) except -1:
 *     item = p.load_object()             # <<<<<<<<<<<<<<
 *     if item is not _end_item:
 *         append = obj.append
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":822
 * cdef int _load_state_sequence(Unpacker *p, obj) except -1:
 *     item = p.load_object()
 *     if item is not _end_item:             # <<<<<<<<<<<<<<
 *         append = obj.append
 *         while item is not _end_item:
 */
  __pyx_t_2 = (__pyx_v_item != __pyx_v_5larch_6pickle_6pickle__end_item);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":823
 *     item = p.load_object()
 *     if item is not _end_item:
 *         append = obj.append             # <<<<<<<<<<<<<<
 *         while item is not _end_item:
 *             append(item)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_append = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":824
 *     if item is not _end_item:
 *         append = obj.append
 *         while item is not _end_item:             # <<<<<<<<<<<<<<
 *             append(item)
 *             item = p.load_object()
 */
    while (1) {
      __pyx_t_3 = (__pyx_v_item != __pyx_v_5larch_6pickle_6pickle__end_item);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (!__pyx_t_2) break;

      /* "larch/pickle/pickle.pyx":825
 *         append = obj.append
 *         while item is not _end_item:
 *             append(item)             # <<<<<<<<<<<<<<
 *             item = p.load_object()
 *     return 0
 */
      __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_obj, __pyx_v_item); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 825, __pyx_L1_error)

      /* "larch/pickle/pickle.pyx":826
 *         while item is not _end_item:
 *             append(item)
 *             item = p.load_object()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
      __pyx_t_1 = 0;
    }

    /* "larch/pickle/pickle.pyx":822
 * cdef int _load_state_sequence(Unpacker *p, obj) except -1:
 *     item = p.load_object()
 *     if item is not _end_item:             # <<<<<<<<<<<<<<
 *         append = obj.append
 *         while item is not _end_item:
 */
  }

  /* "larch/pickle/pickle.pyx":827
 *             append(item)
 *             item = p.load_object()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":820
 * 
 * 
 * cdef int _load_state_sequence(Unpacker *p, obj) except -1:             # <<<<<<<<<<<<<<
 *     item = p.load_object()
 *     if item is not _end_item:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle._load_state_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_append);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":830
 * 
 * 
 * cdef int _load_state_dict(Unpacker *p, obj) except -1:             # <<<<<<<<<<<<<<
 *     k = p.load_object()
 *     if k is not _end_item:
 */

static int __pyx_f_5larch_6pickle_6pickle__load_state_dict(Unpacker *__pyx_v_p, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_setitem = NULL;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_state_dict", 0);

  /* "larch/pickle/pickle.pyx":831
 * 
 * cdef int _load_state_dict(Unpacker *p, obj) except -1:
 *     k = p.load_object()             # <<<<<<<<<<<<<<
 *     if k is not _end_item:
 *         setitem = obj.__setitem__
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":832
 * cdef int _load_state_dict(Unpacker *p, obj) except -1:
 *     k = p.load_object()
 *     if k is not _end_item:             # <<<<<<<<<<<<<<
 *         setitem = obj.__setitem__
 *         while k is not _end_item:
 */
  __pyx_t_2 = (__pyx_v_k != __pyx_v_5larch_6pickle_6pickle__end_item);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":833
 *     k = p.load_object()
 *     if k is not _end_item:
 *         setitem = obj.__setitem__             # <<<<<<<<<<<<<<
 *         while k is not _end_item:
 *             v = p.load_object()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_setitem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_setitem = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":834
 *     if k is not _end_item:
 *         setitem = obj.__setitem__
 *         while k is not _end_item:             # <<<<<<<<<<<<<<
 *             v = p.load_object()
 *             setitem(k, v)
 */
    while (1) {
      __pyx_t_3 = (__pyx_v_k != __pyx_v_5larch_6pickle_6pickle__end_item);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (!__pyx_t_2) break;

      /* "larch/pickle/pickle.pyx":835
 *         setitem = obj.__setitem__
 *         while k is not _end_item:
 *             v = p.load_object()             # <<<<<<<<<<<<<<
 *             setitem(k, v)
 *             k = p.load_object()
 */
      __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "larch/pickle/pickle.pyx":836
 *         while k is not _end_item:
 *             v = p.load_object()
 *             setitem(k, v)             # <<<<<<<<<<<<<<
 *             k = p.load_object()
 *     return 0
 */
      __Pyx_INCREF(__pyx_v_setitem);
      __pyx_t_4 = __pyx_v_setitem; __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_k, __pyx_v_v};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_k, __pyx_v_v};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_k);
        __Pyx_GIVEREF(__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_k);
        __Pyx_INCREF(__pyx_v_v);
        __Pyx_GIVEREF(__pyx_v_v);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_v);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "larch/pickle/pickle.pyx":837
 *             v = p.load_object()
 *             setitem(k, v)
 *             k = p.load_object()             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_k, __pyx_t_1);
      __pyx_t_1 = 0;
    }

    /* "larch/pickle/pickle.pyx":832
 * cdef int _load_state_dict(Unpacker *p, obj) except -1:
 *     k = p.load_object()
 *     if k is not _end_item:             # <<<<<<<<<<<<<<
 *         setitem = obj.__setitem__
 *         while k is not _end_item:
 */
  }

  /* "larch/pickle/pickle.pyx":838
 *             setitem(k, v)
 *             k = p.load_object()
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":830
 * 
 * 
 * cdef int _load_state_dict(Unpacker *p, obj) except -1:             # <<<<<<<<<<<<<<
 *     k = p.load_object()
 *     if k is not _end_item:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("larch.pickle.pickle._load_state_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_setitem);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":841
 * 
 * 
 * cdef object _load_object(Unpacker *p, obj):             # <<<<<<<<<<<<<<
 *     state = p.load_object()
 *     _load_state_sequence(p, obj)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle__load_object(Unpacker *__pyx_v_p, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_object", 0);

  /* "larch/pickle/pickle.pyx":842
 * 
 * cdef object _load_object(Unpacker *p, obj):
 *     state = p.load_object()             # <<<<<<<<<<<<<<
 *     _load_state_sequence(p, obj)
 *     _load_state_dict(p, obj)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_state = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":843
 * cdef object _load_object(Unpacker *p, obj):
 *     state = p.load_object()
 *     _load_state_sequence(p, obj)             # <<<<<<<<<<<<<<
 *     _load_state_dict(p, obj)
 *     _load_state(obj, state)
 */
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__load_state_sequence(__pyx_v_p, __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 843, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":844
 *     state = p.load_object()
 *     _load_state_sequence(p, obj)
 *     _load_state_dict(p, obj)             # <<<<<<<<<<<<<<
 *     _load_state(obj, state)
 *     return obj
 */
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__load_state_dict(__pyx_v_p, __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 844, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":845
 *     _load_state_sequence(p, obj)
 *     _load_state_dict(p, obj)
 *     _load_state(obj, state)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__load_state(__pyx_v_obj, __pyx_v_state); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 845, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":846
 *     _load_state_dict(p, obj)
 *     _load_state(obj, state)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":841
 * 
 * 
 * cdef object _load_object(Unpacker *p, obj):             # <<<<<<<<<<<<<<
 *     state = p.load_object()
 *     _load_state_sequence(p, obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle._load_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":849
 * 
 * 
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_object(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_constructor = NULL;
  PyObject *__pyx_v_constructor_args = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_object", 0);

  /* "larch/pickle/pickle.pyx":850
 * 
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     constructor = p.load_object()
 *     constructor_args = p.load_object()
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":851
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()             # <<<<<<<<<<<<<<
 *     constructor_args = p.load_object()
 *     try:
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_constructor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":852
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()
 *     constructor_args = p.load_object()             # <<<<<<<<<<<<<<
 *     try:
 *         obj = constructor(*constructor_args)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_constructor_args = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":853
 *     constructor = p.load_object()
 *     constructor_args = p.load_object()
 *     try:             # <<<<<<<<<<<<<<
 *         obj = constructor(*constructor_args)
 *     except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":854
 *     constructor_args = p.load_object()
 *     try:
 *         obj = constructor(*constructor_args)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         raise UnpicklingError(e, constructor, constructor_args)
 */
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_constructor_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_constructor, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 854, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_obj = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "larch/pickle/pickle.pyx":853
 *     constructor = p.load_object()
 *     constructor_args = p.load_object()
 *     try:             # <<<<<<<<<<<<<<
 *         obj = constructor(*constructor_args)
 *     except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "larch/pickle/pickle.pyx":855
 *     try:
 *         obj = constructor(*constructor_args)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError(e, constructor, constructor_args)
 *     p.stamp(stamp, obj)
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("larch.pickle.pickle.load_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 855, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_e = __pyx_t_1;
      /*try:*/ {

        /* "larch/pickle/pickle.pyx":856
 *         obj = constructor(*constructor_args)
 *     except Exception as e:
 *         raise UnpicklingError(e, constructor, constructor_args)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 856, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_e, __pyx_v_constructor, __pyx_v_constructor_args};
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 856, __pyx_L14_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_e, __pyx_v_constructor, __pyx_v_constructor_args};
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 856, __pyx_L14_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 856, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
          }
          __Pyx_INCREF(__pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_6, __pyx_v_e);
          __Pyx_INCREF(__pyx_v_constructor);
          __Pyx_GIVEREF(__pyx_v_constructor);
          PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_6, __pyx_v_constructor);
          __Pyx_INCREF(__pyx_v_constructor_args);
          __Pyx_GIVEREF(__pyx_v_constructor_args);
          PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_6, __pyx_v_constructor_args);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 856, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 856, __pyx_L14_error)
      }

      /* "larch/pickle/pickle.pyx":855
 *     try:
 *         obj = constructor(*constructor_args)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError(e, constructor, constructor_args)
 *     p.stamp(stamp, obj)
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_6 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":853
 *     constructor = p.load_object()
 *     constructor_args = p.load_object()
 *     try:             # <<<<<<<<<<<<<<
 *         obj = constructor(*constructor_args)
 *     except Exception as e:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":857
 *     except Exception as e:
 *         raise UnpicklingError(e, constructor, constructor_args)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return _load_object(p, obj)
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":858
 *         raise UnpicklingError(e, constructor, constructor_args)
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __pyx_f_5larch_6pickle_6pickle__load_object(__pyx_v_p, __pyx_v_obj); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":849
 * 
 * 
 * cdef object load_object(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     constructor = p.load_object()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle.pickle.load_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_constructor);
  __Pyx_XDECREF(__pyx_v_constructor_args);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":861
 * 
 * 
 * cdef object load_object_new(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t stamp = p.get_stamp()
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_object_new(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_cls_args = 0;
  PyObject *__pyx_v_cls = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_object_new", 0);

  /* "larch/pickle/pickle.pyx":863
 * cdef object load_object_new(Unpacker *p, uint8_t code, size_t size):
 *     cdef:
 *         uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *         tuple cls_args
 * 
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":866
 *         tuple cls_args
 * 
 *     cls_args = p.load_object()             # <<<<<<<<<<<<<<
 *     cls = cls_args[0]
 *     try:
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 866, __pyx_L1_error)
  __pyx_v_cls_args = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":867
 * 
 *     cls_args = p.load_object()
 *     cls = cls_args[0]             # <<<<<<<<<<<<<<
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 */
  if (unlikely(__pyx_v_cls_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 867, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v_cls_args, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cls = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":868
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     try:             # <<<<<<<<<<<<<<
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":869
 *     cls = cls_args[0]
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         raise UnpicklingError(e, cls, cls_args)
 */
      if (unlikely(__pyx_v_cls_args == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 869, __pyx_L3_error)
      }
      __pyx_t_1 = __Pyx_PyTuple_GetSlice(__pyx_v_cls_args, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = GET_NEW(__pyx_v_cls)(((PyTypeObject *)__pyx_v_cls), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 869, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_obj = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "larch/pickle/pickle.pyx":868
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     try:             # <<<<<<<<<<<<<<
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "larch/pickle/pickle.pyx":870
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError(e, cls, cls_args)
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("larch.pickle.pickle.load_object_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 870, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_e = __pyx_t_1;
      /*try:*/ {

        /* "larch/pickle/pickle.pyx":871
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 *         raise UnpicklingError(e, cls, cls_args)             # <<<<<<<<<<<<<<
 * 
 *     p.stamp(stamp, obj)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 871, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_e, __pyx_v_cls, __pyx_v_cls_args};
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 871, __pyx_L14_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_e, __pyx_v_cls, __pyx_v_cls_args};
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 871, __pyx_L14_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 871, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
          }
          __Pyx_INCREF(__pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_6, __pyx_v_e);
          __Pyx_INCREF(__pyx_v_cls);
          __Pyx_GIVEREF(__pyx_v_cls);
          PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_6, __pyx_v_cls);
          __Pyx_INCREF(__pyx_v_cls_args);
          __Pyx_GIVEREF(__pyx_v_cls_args);
          PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_6, __pyx_v_cls_args);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 871, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 871, __pyx_L14_error)
      }

      /* "larch/pickle/pickle.pyx":870
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError(e, cls, cls_args)
 * 
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_6 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":868
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     try:             # <<<<<<<<<<<<<<
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":873
 *         raise UnpicklingError(e, cls, cls_args)
 * 
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return _load_object(p, obj)
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":874
 * 
 *     p.stamp(stamp, obj)
 *     return _load_object(p, obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __pyx_f_5larch_6pickle_6pickle__load_object(__pyx_v_p, __pyx_v_obj); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":861
 * 
 * 
 * cdef object load_object_new(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t stamp = p.get_stamp()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle.pickle.load_object_new", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cls_args);
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":877
 * 
 * 
 * cdef object load_object_fast(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t stamp = p.get_stamp()
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_object_fast(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_cls_args = 0;
  PyObject *__pyx_v_cls = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_object_fast", 0);

  /* "larch/pickle/pickle.pyx":879
 * cdef object load_object_fast(Unpacker *p, uint8_t code, size_t size):
 *     cdef:
 *         uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *         tuple cls_args
 * 
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":882
 *         tuple cls_args
 * 
 *     cls_args = p.load_object()             # <<<<<<<<<<<<<<
 *     cls = cls_args[0]
 *     try:
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_v_cls_args = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":883
 * 
 *     cls_args = p.load_object()
 *     cls = cls_args[0]             # <<<<<<<<<<<<<<
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 */
  if (unlikely(__pyx_v_cls_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 883, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v_cls_args, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cls = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":884
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     try:             # <<<<<<<<<<<<<<
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":885
 *     cls = cls_args[0]
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         raise UnpicklingError(e, cls, cls_args)
 */
      if (unlikely(__pyx_v_cls_args == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 885, __pyx_L3_error)
      }
      __pyx_t_1 = __Pyx_PyTuple_GetSlice(__pyx_v_cls_args, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = GET_NEW(__pyx_v_cls)(((PyTypeObject *)__pyx_v_cls), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 885, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_obj = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "larch/pickle/pickle.pyx":884
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     try:             # <<<<<<<<<<<<<<
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "larch/pickle/pickle.pyx":886
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError(e, cls, cls_args)
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("larch.pickle.pickle.load_object_fast", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 886, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_e = __pyx_t_1;
      /*try:*/ {

        /* "larch/pickle/pickle.pyx":887
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 *         raise UnpicklingError(e, cls, cls_args)             # <<<<<<<<<<<<<<
 * 
 *     p.stamp(stamp, obj)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 887, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_e, __pyx_v_cls, __pyx_v_cls_args};
          __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L14_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_e, __pyx_v_cls, __pyx_v_cls_args};
          __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L14_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_8);
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 887, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
          }
          __Pyx_INCREF(__pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_6, __pyx_v_e);
          __Pyx_INCREF(__pyx_v_cls);
          __Pyx_GIVEREF(__pyx_v_cls);
          PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_6, __pyx_v_cls);
          __Pyx_INCREF(__pyx_v_cls_args);
          __Pyx_GIVEREF(__pyx_v_cls_args);
          PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_6, __pyx_v_cls_args);
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 887, __pyx_L14_error)
      }

      /* "larch/pickle/pickle.pyx":886
 *     try:
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError(e, cls, cls_args)
 * 
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_6 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "larch/pickle/pickle.pyx":884
 *     cls_args = p.load_object()
 *     cls = cls_args[0]
 *     try:             # <<<<<<<<<<<<<<
 *         obj = GET_NEW(cls)(<PyTypeObject*>cls, cls_args[1:], NULL)
 *     except Exception as e:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "larch/pickle/pickle.pyx":889
 *         raise UnpicklingError(e, cls, cls_args)
 * 
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     if size >= 3:
 *         state = p.load_object()
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":890
 * 
 *     p.stamp(stamp, obj)
 *     if size >= 3:             # <<<<<<<<<<<<<<
 *         state = p.load_object()
 *         if size >= 4:
 */
  __pyx_t_20 = ((__pyx_v_size >= 3) != 0);
  if (__pyx_t_20) {

    /* "larch/pickle/pickle.pyx":891
 *     p.stamp(stamp, obj)
 *     if size >= 3:
 *         state = p.load_object()             # <<<<<<<<<<<<<<
 *         if size >= 4:
 *             _load_state_sequence(p, obj)
 */
    __pyx_t_7 = __pyx_v_p->load(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_state = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "larch/pickle/pickle.pyx":892
 *     if size >= 3:
 *         state = p.load_object()
 *         if size >= 4:             # <<<<<<<<<<<<<<
 *             _load_state_sequence(p, obj)
 *             if size >= 5:
 */
    __pyx_t_20 = ((__pyx_v_size >= 4) != 0);
    if (__pyx_t_20) {

      /* "larch/pickle/pickle.pyx":893
 *         state = p.load_object()
 *         if size >= 4:
 *             _load_state_sequence(p, obj)             # <<<<<<<<<<<<<<
 *             if size >= 5:
 *                 _load_state_dict(p, obj)
 */
      __pyx_t_12 = __pyx_f_5larch_6pickle_6pickle__load_state_sequence(__pyx_v_p, __pyx_v_obj); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 893, __pyx_L1_error)

      /* "larch/pickle/pickle.pyx":894
 *         if size >= 4:
 *             _load_state_sequence(p, obj)
 *             if size >= 5:             # <<<<<<<<<<<<<<
 *                 _load_state_dict(p, obj)
 *         _load_state(obj, state)
 */
      __pyx_t_20 = ((__pyx_v_size >= 5) != 0);
      if (__pyx_t_20) {

        /* "larch/pickle/pickle.pyx":895
 *             _load_state_sequence(p, obj)
 *             if size >= 5:
 *                 _load_state_dict(p, obj)             # <<<<<<<<<<<<<<
 *         _load_state(obj, state)
 *     return obj
 */
        __pyx_t_12 = __pyx_f_5larch_6pickle_6pickle__load_state_dict(__pyx_v_p, __pyx_v_obj); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 895, __pyx_L1_error)

        /* "larch/pickle/pickle.pyx":894
 *         if size >= 4:
 *             _load_state_sequence(p, obj)
 *             if size >= 5:             # <<<<<<<<<<<<<<
 *                 _load_state_dict(p, obj)
 *         _load_state(obj, state)
 */
      }

      /* "larch/pickle/pickle.pyx":892
 *     if size >= 3:
 *         state = p.load_object()
 *         if size >= 4:             # <<<<<<<<<<<<<<
 *             _load_state_sequence(p, obj)
 *             if size >= 5:
 */
    }

    /* "larch/pickle/pickle.pyx":896
 *             if size >= 5:
 *                 _load_state_dict(p, obj)
 *         _load_state(obj, state)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
    __pyx_t_12 = __pyx_f_5larch_6pickle_6pickle__load_state(__pyx_v_obj, __pyx_v_state); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 896, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":890
 * 
 *     p.stamp(stamp, obj)
 *     if size >= 3:             # <<<<<<<<<<<<<<
 *         state = p.load_object()
 *         if size >= 4:
 */
  }

  /* "larch/pickle/pickle.pyx":897
 *                 _load_state_dict(p, obj)
 *         _load_state(obj, state)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":877
 * 
 * 
 * cdef object load_object_fast(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t stamp = p.get_stamp()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle.pickle.load_object_fast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cls_args);
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":900
 * 
 * 
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_singleton(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_singleton", 0);

  /* "larch/pickle/pickle.pyx":901
 * 
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     p.stamp(stamp, obj)
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":902
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return obj
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":903
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":904
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     p.stamp(stamp, obj)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":900
 * 
 * 
 * cdef object load_singleton(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.load_singleton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":907
 * 
 * 
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_oldstyle(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_oldstyle", 0);

  /* "larch/pickle/pickle.pyx":908
 * 
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":909
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     obj.__dict__.update(p.load_object())
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":910
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     obj.__dict__.update(p.load_object())
 *     return obj
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":911
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 *     p.stamp(stamp, obj)
 *     obj.__dict__.update(p.load_object())             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_v_p->load(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":912
 *     p.stamp(stamp, obj)
 *     obj.__dict__.update(p.load_object())
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":907
 * 
 * 
 * cdef object load_oldstyle(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.load_oldstyle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":915
 * 
 * 
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_initargs(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_init_args = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_initargs", 0);

  /* "larch/pickle/pickle.pyx":916
 * 
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     init_args = p.load_object()
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":917
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)             # <<<<<<<<<<<<<<
 *     init_args = p.load_object()
 *     obj = obj(*init_args)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":918
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     init_args = p.load_object()             # <<<<<<<<<<<<<<
 *     obj = obj(*init_args)
 *     p.stamp(stamp, obj)
 */
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_init_args = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":919
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     init_args = p.load_object()
 *     obj = obj(*init_args)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return obj
 */
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_init_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_obj, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":920
 *     init_args = p.load_object()
 *     obj = obj(*init_args)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":921
 *     obj = obj(*init_args)
 *     p.stamp(stamp, obj)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":915
 * 
 * 
 * cdef object load_initargs(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.pickle.load_initargs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_init_args);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":924
 * 
 * 
 * cdef object load_end_item(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return _end_item
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_end_item(CYTHON_UNUSED Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_end_item", 0);

  /* "larch/pickle/pickle.pyx":925
 * 
 * cdef object load_end_item(Unpacker *p, uint8_t code, size_t size):
 *     return _end_item             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_5larch_6pickle_6pickle__end_item);
  __pyx_r = __pyx_v_5larch_6pickle_6pickle__end_item;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":924
 * 
 * 
 * cdef object load_end_item(Unpacker *p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return _end_item
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":928
 * 
 * 
 * cdef object load_ref(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t ido
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_ref(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint32_t __pyx_v_ido;
  PyObject *__pyx_v_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_ref", 0);

  /* "larch/pickle/pickle.pyx":933
 *         PyObject* obj
 * 
 *     p.read32(&ido)             # <<<<<<<<<<<<<<
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:
 */
  __pyx_v_p->read32((&__pyx_v_ido));

  /* "larch/pickle/pickle.pyx":934
 * 
 *     p.read32(&ido)
 *     obj = p.get_stamped_ref(ido)             # <<<<<<<<<<<<<<
 *     if obj is NULL:
 *         raise UnpicklingError("Invalid reference")
 */
  __pyx_v_obj = __pyx_v_p->get_stamped_ref(__pyx_v_ido);

  /* "larch/pickle/pickle.pyx":935
 *     p.read32(&ido)
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError("Invalid reference")
 * 
 */
  __pyx_t_1 = ((__pyx_v_obj == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "larch/pickle/pickle.pyx":936
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:
 *         raise UnpicklingError("Invalid reference")             # <<<<<<<<<<<<<<
 * 
 *     return <object>obj
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_u_Invalid_reference) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_Invalid_reference);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 936, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":935
 *     p.read32(&ido)
 *     obj = p.get_stamped_ref(ido)
 *     if obj is NULL:             # <<<<<<<<<<<<<<
 *         raise UnpicklingError("Invalid reference")
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":938
 *         raise UnpicklingError("Invalid reference")
 * 
 *     return <object>obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":928
 * 
 * 
 * cdef object load_ref(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef:
 *         uint32_t ido
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.load_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":941
 * 
 * 
 * cdef object load_global(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return (<Unpickler>p.unpickler).unpack_import(size)
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_global(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_global", 0);

  /* "larch/pickle/pickle.pyx":942
 * 
 * cdef object load_global(Unpacker* p, uint8_t code, size_t size):
 *     return (<Unpickler>p.unpickler).unpack_import(size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":941
 * 
 * 
 * cdef object load_global(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     return (<Unpickler>p.unpickler).unpack_import(size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.load_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":945
 * 
 * 
 * cdef object load_global_object(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_global_object(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, size_t __pyx_v_size) {
  uint32_t __pyx_v_stamp;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_global_object", 0);

  /* "larch/pickle/pickle.pyx":946
 * 
 * cdef object load_global_object(Unpacker* p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()             # <<<<<<<<<<<<<<
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     p.stamp(stamp, obj)
 */
  __pyx_v_stamp = __pyx_v_p->get_stamp();

  /* "larch/pickle/pickle.pyx":947
 * cdef object load_global_object(Unpacker* p, uint8_t code, size_t size):
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)             # <<<<<<<<<<<<<<
 *     p.stamp(stamp, obj)
 *     return obj
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->unpack_import(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":948
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     p.stamp(stamp, obj)             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_p->stamp(__pyx_v_stamp, __pyx_v_obj);

  /* "larch/pickle/pickle.pyx":949
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 *     p.stamp(stamp, obj)
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":945
 * 
 * 
 * cdef object load_global_object(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint32_t stamp = p.get_stamp()
 *     obj = (<Unpickler>p.unpickler).unpack_import(size)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.load_global_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":952
 * 
 * 
 * cdef object load_version(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_version(Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  uint8_t __pyx_v_version;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_version", 0);

  /* "larch/pickle/pickle.pyx":954
 * cdef object load_version(Unpacker* p, uint8_t code, size_t size):
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))             # <<<<<<<<<<<<<<
 *     (<Unpickler>p.unpickler).set_protocol(version)
 *     return p.load_object()
 */
  (void)(__pyx_v_p->read(((char *)(&__pyx_v_version)), (sizeof(__pyx_v_version))));

  /* "larch/pickle/pickle.pyx":955
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))
 *     (<Unpickler>p.unpickler).set_protocol(version)             # <<<<<<<<<<<<<<
 *     return p.load_object()
 * 
 */
  (void)(((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler)->__pyx_vtab)->set_protocol(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_p->unpickler), __pyx_v_version));

  /* "larch/pickle/pickle.pyx":956
 *     p.read(<char*>&version, sizeof(version))
 *     (<Unpickler>p.unpickler).set_protocol(version)
 *     return p.load_object()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_p->load(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":952
 * 
 * 
 * cdef object load_version(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     cdef uint8_t version
 *     p.read(<char*>&version, sizeof(version))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.load_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":959
 * 
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     raise UnpicklingError("Unknown load code")
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_load_wrong_code(CYTHON_UNUSED Unpacker *__pyx_v_p, CYTHON_UNUSED uint8_t __pyx_v_code, CYTHON_UNUSED size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_wrong_code", 0);

  /* "larch/pickle/pickle.pyx":960
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):
 *     raise UnpicklingError("Unknown load code")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_Unknown_load_code) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_Unknown_load_code);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 960, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":959
 * 
 * 
 * cdef object load_wrong_code(Unpacker* p, uint8_t code, size_t size):             # <<<<<<<<<<<<<<
 *     raise UnpicklingError("Unknown load code")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.pickle.load_wrong_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":963
 * 
 * 
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in codes:
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle__register_unpickle(unpack_t __pyx_v_loader, PyObject *__pyx_v_codes, struct __pyx_opt_args_5larch_6pickle_6pickle__register_unpickle *__pyx_optional_args) {
  int __pyx_v_offset = ((int)0);
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_register_unpickle", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_offset = __pyx_optional_args->offset;
    }
  }

  /* "larch/pickle/pickle.pyx":965
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):
 *     cdef size_t i
 *     for i in codes:             # <<<<<<<<<<<<<<
 *         unpickle_registry[i+offset] = loader
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_codes)) || PyTuple_CheckExact(__pyx_v_codes)) {
    __pyx_t_1 = __pyx_v_codes; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_codes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 965, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 965, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 965, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_i = __pyx_t_5;

    /* "larch/pickle/pickle.pyx":966
 *     cdef size_t i
 *     for i in codes:
 *         unpickle_registry[i+offset] = loader             # <<<<<<<<<<<<<<
 * 
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))
 */
    (unpickle_registry[(__pyx_v_i + __pyx_v_offset)]) = __pyx_v_loader;

    /* "larch/pickle/pickle.pyx":965
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):
 *     cdef size_t i
 *     for i in codes:             # <<<<<<<<<<<<<<
 *         unpickle_registry[i+offset] = loader
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":963
 * 
 * 
 * cdef _register_unpickle(unpack_t loader, codes, int offset=0):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in codes:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle._register_unpickle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1021
 * ctypedef object (*find_class_t)(Unpickler unpickler, module, name)
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler.default_find_class(module, name)
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_call_default_find_class(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_unpickler, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_default_find_class", 0);

  /* "larch/pickle/pickle.pyx":1022
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):
 *     return unpickler.default_find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_unpickler->default_find_class(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1021
 * ctypedef object (*find_class_t)(Unpickler unpickler, module, name)
 * 
 * cdef object call_default_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler.default_find_class(module, name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.call_default_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1025
 * 
 * 
 * cdef object call_sub_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler._find_class(module, name)
 * 
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_call_sub_find_class(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_unpickler, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("call_sub_find_class", 0);

  /* "larch/pickle/pickle.pyx":1026
 * 
 * cdef object call_sub_find_class(Unpickler unpickler, module, name):
 *     return unpickler._find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_unpickler->_find_class);
  __pyx_t_2 = __pyx_v_unpickler->_find_class; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_module, __pyx_v_name};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_module, __pyx_v_name};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_module);
    __Pyx_GIVEREF(__pyx_v_module);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_module);
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_name);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1025
 * 
 * 
 * cdef object call_sub_find_class(Unpickler unpickler, module, name):             # <<<<<<<<<<<<<<
 *     return unpickler._find_class(module, name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.pickle.call_sub_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1032
 * 
 * 
 * cdef object simple_find_class(module, name):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_simple_find_class(PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_tmp;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  Py_ssize_t __pyx_t_20;
  PyObject *(*__pyx_t_21)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("simple_find_class", 0);
  __Pyx_INCREF(__pyx_v_module);

  /* "larch/pickle/pickle.pyx":1034
 * cdef object simple_find_class(module, name):
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)             # <<<<<<<<<<<<<<
 *     if tmp is NULL:
 *         try:
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_6pickle_modules;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_1, __pyx_v_module);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1035
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:             # <<<<<<<<<<<<<<
 *         try:
 *             __import__(module)
 */
  __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
  if (__pyx_t_2) {

    /* "larch/pickle/pickle.pyx":1036
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:
 *         try:             # <<<<<<<<<<<<<<
 *             __import__(module)
 *         except TypeError as e:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "larch/pickle/pickle.pyx":1037
 *     if tmp is NULL:
 *         try:
 *             __import__(module)             # <<<<<<<<<<<<<<
 *         except TypeError as e:
 *             e.args += (module, name)
 */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin___import__, __pyx_v_module); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "larch/pickle/pickle.pyx":1036
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:
 *         try:             # <<<<<<<<<<<<<<
 *             __import__(module)
 *         except TypeError as e:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "larch/pickle/pickle.pyx":1038
 *         try:
 *             __import__(module)
 *         except TypeError as e:             # <<<<<<<<<<<<<<
 *             e.args += (module, name)
 *             raise
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("larch.pickle.pickle.simple_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1038, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_v_e = __pyx_t_7;
        /*try:*/ {

          /* "larch/pickle/pickle.pyx":1039
 *             __import__(module)
 *         except TypeError as e:
 *             e.args += (module, name)             # <<<<<<<<<<<<<<
 *             raise
 * 
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1039, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1039, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_v_module);
          __Pyx_GIVEREF(__pyx_v_module);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_module);
          __Pyx_INCREF(__pyx_v_name);
          __Pyx_GIVEREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_name);
          __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1039, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_e, __pyx_n_s_args, __pyx_t_11) < 0) __PYX_ERR(0, 1039, __pyx_L15_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "larch/pickle/pickle.pyx":1040
 *         except TypeError as e:
 *             e.args += (module, name)
 *             raise             # <<<<<<<<<<<<<<
 * 
 *         module = sys.modules[module]
 */
          __Pyx_GIVEREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_7, __pyx_t_8);
          __pyx_t_1 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
          __PYX_ERR(0, 1040, __pyx_L15_error)
        }

        /* "larch/pickle/pickle.pyx":1038
 *         try:
 *             __import__(module)
 *         except TypeError as e:             # <<<<<<<<<<<<<<
 *             e.args += (module, name)
 *             raise
 */
        /*finally:*/ {
          __pyx_L15_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_6 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L6_except_error;
          }
        }
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "larch/pickle/pickle.pyx":1036
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:
 *         try:             # <<<<<<<<<<<<<<
 *             __import__(module)
 *         except TypeError as e:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L9_try_end:;
    }

    /* "larch/pickle/pickle.pyx":1042
 *             raise
 * 
 *         module = sys.modules[module]             # <<<<<<<<<<<<<<
 *     else:
 *         module = <object>tmp
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_sys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_modules); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_v_module); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "larch/pickle/pickle.pyx":1035
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 *     if tmp is NULL:             # <<<<<<<<<<<<<<
 *         try:
 *             __import__(module)
 */
    goto __pyx_L3;
  }

  /* "larch/pickle/pickle.pyx":1044
 *         module = sys.modules[module]
 *     else:
 *         module = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  /*else*/ {
    __pyx_t_8 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_8);
    __pyx_t_8 = 0;
  }
  __pyx_L3:;

  /* "larch/pickle/pickle.pyx":1046
 *         module = <object>tmp
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return getattr(module, name)
 *     except AttributeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "larch/pickle/pickle.pyx":1047
 * 
 *     try:
 *         return getattr(module, name)             # <<<<<<<<<<<<<<
 *     except AttributeError:
 *         for n in name.split("."):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_8 = __Pyx_GetAttr(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1047, __pyx_L21_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L25_try_return;

      /* "larch/pickle/pickle.pyx":1046
 *         module = <object>tmp
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return getattr(module, name)
 *     except AttributeError:
 */
    }
    __pyx_L21_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "larch/pickle/pickle.pyx":1048
 *     try:
 *         return getattr(module, name)
 *     except AttributeError:             # <<<<<<<<<<<<<<
 *         for n in name.split("."):
 *             module = getattr(module, n)
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("larch.pickle.pickle.simple_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_1) < 0) __PYX_ERR(0, 1048, __pyx_L23_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_1);

      /* "larch/pickle/pickle.pyx":1049
 *         return getattr(module, name)
 *     except AttributeError:
 *         for n in name.split("."):             # <<<<<<<<<<<<<<
 *             module = getattr(module, n)
 *         return module
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_split); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_11 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, __pyx_kp_u__2) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_u__2);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
        __pyx_t_10 = __pyx_t_11; __Pyx_INCREF(__pyx_t_10); __pyx_t_20 = 0;
        __pyx_t_21 = NULL;
      } else {
        __pyx_t_20 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_21 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      for (;;) {
        if (likely(!__pyx_t_21)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_20); __Pyx_INCREF(__pyx_t_11); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_20); __Pyx_INCREF(__pyx_t_11); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L23_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_21(__pyx_t_10);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1049, __pyx_L23_except_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "larch/pickle/pickle.pyx":1050
 *     except AttributeError:
 *         for n in name.split("."):
 *             module = getattr(module, n)             # <<<<<<<<<<<<<<
 *         return module
 * 
 */
        __pyx_t_11 = __Pyx_GetAttr(__pyx_v_module, __pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1050, __pyx_L23_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "larch/pickle/pickle.pyx":1049
 *         return getattr(module, name)
 *     except AttributeError:
 *         for n in name.split("."):             # <<<<<<<<<<<<<<
 *             module = getattr(module, n)
 *         return module
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "larch/pickle/pickle.pyx":1051
 *         for n in name.split("."):
 *             module = getattr(module, n)
 *         return module             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_module);
      __pyx_r = __pyx_v_module;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L24_except_return;
    }
    goto __pyx_L23_except_error;
    __pyx_L23_except_error:;

    /* "larch/pickle/pickle.pyx":1046
 *         module = <object>tmp
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return getattr(module, name)
 *     except AttributeError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L25_try_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L24_except_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "larch/pickle/pickle.pyx":1032
 * 
 * 
 * cdef object simple_find_class(module, name):             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmp
 *     tmp = PyDict_GetItem(modules, module)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("larch.pickle.pickle.simple_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1055
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef object mapped_find_class(module, name):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PyObject* tmp
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_mapped_find_class(PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mapped_find_class", 0);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);

  /* "larch/pickle/pickle.pyx":1059
 *             PyObject* tmp
 * 
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module, name = <object>tmp
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_6pickle_name_mapping_2to3;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1060
 * 
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module, name = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":1061
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))
 *         if tmp is not NULL:
 *             module, name = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1061, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1061, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1061, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_name, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":1060
 * 
 *         tmp = PyDict_GetItem(name_mapping_2to3, (module, name))
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module, name = <object>tmp
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":1063
 *             module, name = <object>tmp
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)             # <<<<<<<<<<<<<<
 *         if tmp is not NULL:
 *             module = <object>tmp
 */
  __pyx_t_2 = __pyx_v_5larch_6pickle_6pickle_import_mapping_2to3;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_tmp = PyDict_GetItem(__pyx_t_2, __pyx_v_module);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1064
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module = <object>tmp
 * 
 */
  __pyx_t_3 = ((__pyx_v_tmp != NULL) != 0);
  if (__pyx_t_3) {

    /* "larch/pickle/pickle.pyx":1065
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 *         if tmp is not NULL:
 *             module = <object>tmp             # <<<<<<<<<<<<<<
 * 
 *         return simple_find_class(module, name)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_tmp);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_module, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":1064
 * 
 *         tmp = PyDict_GetItem(import_mapping_2to3, module)
 *         if tmp is not NULL:             # <<<<<<<<<<<<<<
 *             module = <object>tmp
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":1067
 *             module = <object>tmp
 * 
 *         return simple_find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle_simple_find_class(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1055
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     cdef object mapped_find_class(module, name):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PyObject* tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.pickle.mapped_find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1081
 *         public bool secure
 * 
 *     def __init__(self, file=b"", bool secure=False):             # <<<<<<<<<<<<<<
 *         self.unpacker = new Unpacker(self)
 *         self.secure = secure
 */

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_9Unpickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_9Unpickler_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  bool __pyx_v_secure;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_secure,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_b__3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_secure);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1081, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    if (values[1]) {
      __pyx_v_secure = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_secure == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1081, __pyx_L3_error)
    } else {
      __pyx_v_secure = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1081, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler___init__(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self), __pyx_v_file, __pyx_v_secure);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_9Unpickler___init__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_file, bool __pyx_v_secure) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "larch/pickle/pickle.pyx":1082
 * 
 *     def __init__(self, file=b"", bool secure=False):
 *         self.unpacker = new Unpacker(self)             # <<<<<<<<<<<<<<
 *         self.secure = secure
 * 
 */
  __pyx_v_self->unpacker = new Unpacker(((PyObject *)__pyx_v_self));

  /* "larch/pickle/pickle.pyx":1083
 *     def __init__(self, file=b"", bool secure=False):
 *         self.unpacker = new Unpacker(self)
 *         self.secure = secure             # <<<<<<<<<<<<<<
 * 
 *         # this is complicated but faster than ordinary subclassing
 */
  __pyx_v_self->secure = __pyx_v_secure;

  /* "larch/pickle/pickle.pyx":1086
 * 
 *         # this is complicated but faster than ordinary subclassing
 *         if isinstance(self.find_class, types.BuiltinMethodType):             # <<<<<<<<<<<<<<
 *             self.call_find_class = call_default_find_class
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BuiltinMethodType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":1087
 *         # this is complicated but faster than ordinary subclassing
 *         if isinstance(self.find_class, types.BuiltinMethodType):
 *             self.call_find_class = call_default_find_class             # <<<<<<<<<<<<<<
 *         else:
 *             self._find_class = self.find_class
 */
    __pyx_v_self->call_find_class = __pyx_f_5larch_6pickle_6pickle_call_default_find_class;

    /* "larch/pickle/pickle.pyx":1086
 * 
 *         # this is complicated but faster than ordinary subclassing
 *         if isinstance(self.find_class, types.BuiltinMethodType):             # <<<<<<<<<<<<<<
 *             self.call_find_class = call_default_find_class
 *         else:
 */
    goto __pyx_L3;
  }

  /* "larch/pickle/pickle.pyx":1089
 *             self.call_find_class = call_default_find_class
 *         else:
 *             self._find_class = self.find_class             # <<<<<<<<<<<<<<
 *             self.call_find_class = call_sub_find_class
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_find_class);
    __Pyx_DECREF(__pyx_v_self->_find_class);
    __pyx_v_self->_find_class = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":1090
 *         else:
 *             self._find_class = self.find_class
 *             self.call_find_class = call_sub_find_class             # <<<<<<<<<<<<<<
 * 
 *         self.default_find_class = simple_find_class
 */
    __pyx_v_self->call_find_class = __pyx_f_5larch_6pickle_6pickle_call_sub_find_class;
  }
  __pyx_L3:;

  /* "larch/pickle/pickle.pyx":1092
 *             self.call_find_class = call_sub_find_class
 * 
 *         self.default_find_class = simple_find_class             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(file, bytes):
 */
  __pyx_v_self->default_find_class = __pyx_f_5larch_6pickle_6pickle_simple_find_class;

  /* "larch/pickle/pickle.pyx":1094
 *         self.default_find_class = simple_find_class
 * 
 *         if isinstance(file, bytes):             # <<<<<<<<<<<<<<
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer
 */
  __pyx_t_5 = PyBytes_Check(__pyx_v_file); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "larch/pickle/pickle.pyx":1095
 * 
 *         if isinstance(file, bytes):
 *             self.file = _BufferContainer().set(file)             # <<<<<<<<<<<<<<
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle__BufferContainer)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyBytes_CheckExact(__pyx_v_file))||((__pyx_v_file) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_file)->tp_name), 0))) __PYX_ERR(0, 1095, __pyx_L1_error)
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5larch_6pickle_6pickle__BufferContainer *)((struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)__pyx_t_3)->__pyx_vtab)->set(((struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)__pyx_t_3), ((PyObject*)__pyx_v_file))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":1096
 *         if isinstance(file, bytes):
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer             # <<<<<<<<<<<<<<
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 */
    __pyx_v_self->unpacker->do_read = __pyx_f_5larch_6pickle_6pickle_read_buffer;

    /* "larch/pickle/pickle.pyx":1094
 *         self.default_find_class = simple_find_class
 * 
 *         if isinstance(file, bytes):             # <<<<<<<<<<<<<<
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer
 */
    goto __pyx_L4;
  }

  /* "larch/pickle/pickle.pyx":1097
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):             # <<<<<<<<<<<<<<
 *             self.file = file.c_pickle()
 *             self.unpacker.do_read = read_external
 */
  __pyx_t_4 = __Pyx_HasAttr(__pyx_v_file, __pyx_n_u_c_pickle); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1097, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "larch/pickle/pickle.pyx":1098
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()             # <<<<<<<<<<<<<<
 *             self.unpacker.do_read = read_external
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_c_pickle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":1099
 *         elif hasattr(file, "c_pickle"):
 *             self.file = file.c_pickle()
 *             self.unpacker.do_read = read_external             # <<<<<<<<<<<<<<
 *         else:
 *             self.file = _FileLike(file)
 */
    __pyx_v_self->unpacker->do_read = __pyx_f_5larch_6pickle_6pickle_read_external;

    /* "larch/pickle/pickle.pyx":1097
 *             self.file = _BufferContainer().set(file)
 *             self.unpacker.do_read = read_buffer
 *         elif hasattr(file, "c_pickle"):             # <<<<<<<<<<<<<<
 *             self.file = file.c_pickle()
 *             self.unpacker.do_read = read_external
 */
    goto __pyx_L4;
  }

  /* "larch/pickle/pickle.pyx":1101
 *             self.unpacker.do_read = read_external
 *         else:
 *             self.file = _FileLike(file)             # <<<<<<<<<<<<<<
 *             self.unpacker.do_read = read_file
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle__FileLike), __pyx_v_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->file);
    __Pyx_DECREF(__pyx_v_self->file);
    __pyx_v_self->file = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "larch/pickle/pickle.pyx":1102
 *         else:
 *             self.file = _FileLike(file)
 *             self.unpacker.do_read = read_file             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->unpacker->do_read = __pyx_f_5larch_6pickle_6pickle_read_file;
  }
  __pyx_L4:;

  /* "larch/pickle/pickle.pyx":1081
 *         public bool secure
 * 
 *     def __init__(self, file=b"", bool secure=False):             # <<<<<<<<<<<<<<
 *         self.unpacker = new Unpacker(self)
 *         self.secure = secure
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1105
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.unpacker
 * 
 */

/* Python wrapper */
static void __pyx_pw_5larch_6pickle_6pickle_9Unpickler_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5larch_6pickle_6pickle_9Unpickler_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5larch_6pickle_6pickle_9Unpickler_2__dealloc__(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5larch_6pickle_6pickle_9Unpickler_2__dealloc__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "larch/pickle/pickle.pyx":1106
 * 
 *     def __dealloc__(self):
 *         del self.unpacker             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_protocol(self, uint8_t protocol):
 */
  delete __pyx_v_self->unpacker;

  /* "larch/pickle/pickle.pyx":1105
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.unpacker
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "larch/pickle/pickle.pyx":1108
 *         del self.unpacker
 * 
 *     cdef int set_protocol(self, uint8_t protocol):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:
 */

static int __pyx_f_5larch_6pickle_6pickle_9Unpickler_set_protocol(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, uint8_t __pyx_v_protocol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_protocol", 0);

  /* "larch/pickle/pickle.pyx":1110
 *     cdef int set_protocol(self, uint8_t protocol):
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:             # <<<<<<<<<<<<<<
 *                 self.default_find_class = mapped_find_class
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_protocol < 3) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":1111
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:
 *                 self.default_find_class = mapped_find_class             # <<<<<<<<<<<<<<
 *             else:
 *                 self.default_find_class = simple_find_class
 */
    __pyx_v_self->default_find_class = __pyx_f_5larch_6pickle_6pickle_mapped_find_class;

    /* "larch/pickle/pickle.pyx":1110
 *     cdef int set_protocol(self, uint8_t protocol):
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:             # <<<<<<<<<<<<<<
 *                 self.default_find_class = mapped_find_class
 *             else:
 */
    goto __pyx_L3;
  }

  /* "larch/pickle/pickle.pyx":1113
 *                 self.default_find_class = mapped_find_class
 *             else:
 *                 self.default_find_class = simple_find_class             # <<<<<<<<<<<<<<
 *             if protocol < 4:
 *                 self.unpacker.min_string_size_for_ref = 5;
 */
  /*else*/ {
    __pyx_v_self->default_find_class = __pyx_f_5larch_6pickle_6pickle_simple_find_class;
  }
  __pyx_L3:;

  /* "larch/pickle/pickle.pyx":1114
 *             else:
 *                 self.default_find_class = simple_find_class
 *             if protocol < 4:             # <<<<<<<<<<<<<<
 *                 self.unpacker.min_string_size_for_ref = 5;
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_protocol < 4) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":1115
 *                 self.default_find_class = simple_find_class
 *             if protocol < 4:
 *                 self.unpacker.min_string_size_for_ref = 5;             # <<<<<<<<<<<<<<
 *             else:
 *                 self.unpacker.min_string_size_for_ref = 3;
 */
    __pyx_v_self->unpacker->min_string_size_for_ref = 5;

    /* "larch/pickle/pickle.pyx":1114
 *             else:
 *                 self.default_find_class = simple_find_class
 *             if protocol < 4:             # <<<<<<<<<<<<<<
 *                 self.unpacker.min_string_size_for_ref = 5;
 *             else:
 */
    goto __pyx_L4;
  }

  /* "larch/pickle/pickle.pyx":1117
 *                 self.unpacker.min_string_size_for_ref = 5;
 *             else:
 *                 self.unpacker.min_string_size_for_ref = 3;             # <<<<<<<<<<<<<<
 * 
 *     cdef object unpack_import(self, size_t size):
 */
  /*else*/ {
    __pyx_v_self->unpacker->min_string_size_for_ref = 3;
  }
  __pyx_L4:;

  /* "larch/pickle/pickle.pyx":1108
 *         del self.unpacker
 * 
 *     cdef int set_protocol(self, uint8_t protocol):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION > 2:
 *             if protocol < 3:
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1119
 *                 self.unpacker.min_string_size_for_ref = 3;
 * 
 *     cdef object unpack_import(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             uint32_t rcode
 */

static PyObject *__pyx_f_5larch_6pickle_6pickle_9Unpickler_unpack_import(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, size_t __pyx_v_size) {
  uint32_t __pyx_v_rcode;
  PyObject *__pyx_v_key;
  PyObject *__pyx_v_ocode = NULL;
  PyObject *__pyx_v_module = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_v_imported = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpack_import", 0);

  /* "larch/pickle/pickle.pyx":1124
 *             PyObject *key
 * 
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode
 */
  __pyx_t_1 = ((__pyx_v_size == 0) != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":1125
 * 
 *         if size == 0:
 *             self.unpacker.read32(&rcode)             # <<<<<<<<<<<<<<
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)
 */
    __pyx_v_self->unpacker->read32((&__pyx_v_rcode));

    /* "larch/pickle/pickle.pyx":1126
 *         if size == 0:
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode             # <<<<<<<<<<<<<<
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:
 */
    __pyx_t_2 = __Pyx_PyInt_From_uint32_t(((uint32_t)__pyx_v_rcode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_ocode = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":1127
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)             # <<<<<<<<<<<<<<
 *             if key is not NULL:
 *                 return <object>key
 */
    __pyx_t_3 = __pyx_v_5larch_6pickle_6pickle_extension_cache;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_key = PyDict_GetItem(__pyx_t_3, __pyx_v_ocode);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":1128
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:             # <<<<<<<<<<<<<<
 *                 return <object>key
 * 
 */
    __pyx_t_1 = ((__pyx_v_key != NULL) != 0);
    if (__pyx_t_1) {

      /* "larch/pickle/pickle.pyx":1129
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:
 *                 return <object>key             # <<<<<<<<<<<<<<
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_key));
      __pyx_r = ((PyObject *)__pyx_v_key);
      goto __pyx_L0;

      /* "larch/pickle/pickle.pyx":1128
 *             ocode = <object><uint32_t>rcode
 *             key = PyDict_GetItem(extension_cache, ocode)
 *             if key is not NULL:             # <<<<<<<<<<<<<<
 *                 return <object>key
 * 
 */
    }

    /* "larch/pickle/pickle.pyx":1131
 *                 return <object>key
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)             # <<<<<<<<<<<<<<
 *             if key is NULL:
 *                 raise KeyError(rcode)
 */
    __pyx_t_3 = __pyx_v_5larch_6pickle_6pickle_inverted_registry;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_key = PyDict_GetItem(__pyx_t_3, __pyx_v_ocode);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "larch/pickle/pickle.pyx":1132
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)
 *             if key is NULL:             # <<<<<<<<<<<<<<
 *                 raise KeyError(rcode)
 * 
 */
    __pyx_t_1 = ((__pyx_v_key == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "larch/pickle/pickle.pyx":1133
 *             key = PyDict_GetItem(inverted_registry, ocode)
 *             if key is NULL:
 *                 raise KeyError(rcode)             # <<<<<<<<<<<<<<
 * 
 *             module, name = <object>key
 */
      __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_rcode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 1133, __pyx_L1_error)

      /* "larch/pickle/pickle.pyx":1132
 * 
 *             key = PyDict_GetItem(inverted_registry, ocode)
 *             if key is NULL:             # <<<<<<<<<<<<<<
 *                 raise KeyError(rcode)
 * 
 */
    }

    /* "larch/pickle/pickle.pyx":1135
 *                 raise KeyError(rcode)
 * 
 *             module, name = <object>key             # <<<<<<<<<<<<<<
 *             obj = self.call_find_class(self, module, name)
 *             extension_cache[ocode] = obj
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_key);
    __Pyx_INCREF(__pyx_t_2);
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1135, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1135, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1135, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __pyx_v_module = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_name = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "larch/pickle/pickle.pyx":1136
 * 
 *             module, name = <object>key
 *             obj = self.call_find_class(self, module, name)             # <<<<<<<<<<<<<<
 *             extension_cache[ocode] = obj
 *             return obj
 */
    __pyx_t_2 = __pyx_v_self->call_find_class(__pyx_v_self, __pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":1137
 *             module, name = <object>key
 *             obj = self.call_find_class(self, module, name)
 *             extension_cache[ocode] = obj             # <<<<<<<<<<<<<<
 *             return obj
 * 
 */
    if (unlikely(__pyx_v_5larch_6pickle_6pickle_extension_cache == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1137, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_5larch_6pickle_6pickle_extension_cache, __pyx_v_ocode, __pyx_v_obj) < 0)) __PYX_ERR(0, 1137, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":1138
 *             obj = self.call_find_class(self, module, name)
 *             extension_cache[ocode] = obj
 *             return obj             # <<<<<<<<<<<<<<
 * 
 *         module = self.unpacker.load_object()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_obj);
    __pyx_r = __pyx_v_obj;
    goto __pyx_L0;

    /* "larch/pickle/pickle.pyx":1124
 *             PyObject *key
 * 
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             self.unpacker.read32(&rcode)
 *             ocode = <object><uint32_t>rcode
 */
  }

  /* "larch/pickle/pickle.pyx":1140
 *             return obj
 * 
 *         module = self.unpacker.load_object()             # <<<<<<<<<<<<<<
 *         name = self.unpacker.load_object()
 *         imported = self.call_find_class(self, module, name)
 */
  __pyx_t_2 = __pyx_v_self->unpacker->load(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_module = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1141
 * 
 *         module = self.unpacker.load_object()
 *         name = self.unpacker.load_object()             # <<<<<<<<<<<<<<
 *         imported = self.call_find_class(self, module, name)
 *         if self.secure:
 */
  __pyx_t_2 = __pyx_v_self->unpacker->load(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1142
 *         module = self.unpacker.load_object()
 *         name = self.unpacker.load_object()
 *         imported = self.call_find_class(self, module, name)             # <<<<<<<<<<<<<<
 *         if self.secure:
 *             self.verify_object(module, name, imported)
 */
  __pyx_t_2 = __pyx_v_self->call_find_class(__pyx_v_self, __pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_imported = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1143
 *         name = self.unpacker.load_object()
 *         imported = self.call_find_class(self, module, name)
 *         if self.secure:             # <<<<<<<<<<<<<<
 *             self.verify_object(module, name, imported)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->secure != 0);
  if (__pyx_t_1) {

    /* "larch/pickle/pickle.pyx":1144
 *         imported = self.call_find_class(self, module, name)
 *         if self.secure:
 *             self.verify_object(module, name, imported)             # <<<<<<<<<<<<<<
 * 
 *         return imported
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self->__pyx_vtab)->verify_object(__pyx_v_self, __pyx_v_module, __pyx_v_name, __pyx_v_imported, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "larch/pickle/pickle.pyx":1143
 *         name = self.unpacker.load_object()
 *         imported = self.call_find_class(self, module, name)
 *         if self.secure:             # <<<<<<<<<<<<<<
 *             self.verify_object(module, name, imported)
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":1146
 *             self.verify_object(module, name, imported)
 * 
 *         return imported             # <<<<<<<<<<<<<<
 * 
 *     cdef int check_init(self) except -1:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_imported);
  __pyx_r = __pyx_v_imported;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1119
 *                 self.unpacker.min_string_size_for_ref = 3;
 * 
 *     cdef object unpack_import(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             uint32_t rcode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.unpack_import", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ocode);
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_imported);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1148
 *         return imported
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise UnpicklingError(
 */

static int __pyx_f_5larch_6pickle_6pickle_9Unpickler_check_init(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_init", 0);

  /* "larch/pickle/pickle.pyx":1149
 * 
 *     cdef int check_init(self) except -1:
 *         if self.file is None:             # <<<<<<<<<<<<<<
 *             raise UnpicklingError(
 *                 "Unpickler.__init__() was not called by "
 */
  __pyx_t_1 = (__pyx_v_self->file == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "larch/pickle/pickle.pyx":1150
 *     cdef int check_init(self) except -1:
 *         if self.file is None:
 *             raise UnpicklingError(             # <<<<<<<<<<<<<<
 *                 "Unpickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "larch/pickle/pickle.pyx":1152
 *             raise UnpicklingError(
 *                 "Unpickler.__init__() was not called by "
 *                 "{}.__init__()".format((self.__class__.__name__,)))             # <<<<<<<<<<<<<<
 * 
 *     def find_class(self, str module, str name):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Unpickler___init___was_not_calle, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1150, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":1149
 * 
 *     cdef int check_init(self) except -1:
 *         if self.file is None:             # <<<<<<<<<<<<<<
 *             raise UnpicklingError(
 *                 "Unpickler.__init__() was not called by "
 */
  }

  /* "larch/pickle/pickle.pyx":1148
 *         return imported
 * 
 *     cdef int check_init(self) except -1:             # <<<<<<<<<<<<<<
 *         if self.file is None:
 *             raise UnpicklingError(
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.check_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1154
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 * 
 *     def find_class(self, str module, str name):             # <<<<<<<<<<<<<<
 *         return self.default_find_class(module, name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_5find_class(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_5find_class(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_module = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_class (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_module_2,&__pyx_n_s_name_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_module_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("find_class", 1, 2, 2, 1); __PYX_ERR(0, 1154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_class") < 0)) __PYX_ERR(0, 1154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_module = ((PyObject*)values[0]);
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_class", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_module), (&PyUnicode_Type), 1, "module", 1))) __PYX_ERR(0, 1154, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 1154, __pyx_L1_error)
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_4find_class(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self), __pyx_v_module, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_4find_class(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_class", 0);

  /* "larch/pickle/pickle.pyx":1155
 * 
 *     def find_class(self, str module, str name):
 *         return self.default_find_class(module, name)             # <<<<<<<<<<<<<<
 * 
 *     def load(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->default_find_class(__pyx_v_module, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1154
 *                 "{}.__init__()".format((self.__class__.__name__,)))
 * 
 *     def find_class(self, str module, str name):             # <<<<<<<<<<<<<<
 *         return self.default_find_class(module, name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.find_class", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1157
 *         return self.default_find_class(module, name)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_7load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_7load(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_6load(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_6load(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "larch/pickle/pickle.pyx":1158
 * 
 *     def load(self):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         try:
 *             return <object>self.unpacker.first_load()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1158, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":1159
 *     def load(self):
 *         self.check_init()
 *         try:             # <<<<<<<<<<<<<<
 *             return <object>self.unpacker.first_load()
 *         finally:
 */
  /*try:*/ {

    /* "larch/pickle/pickle.pyx":1160
 *         self.check_init()
 *         try:
 *             return <object>self.unpacker.first_load()             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.unpacker.reset()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->unpacker->first_load(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_t_2));
    __pyx_r = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "larch/pickle/pickle.pyx":1162
 *             return <object>self.unpacker.first_load()
 *         finally:
 *             self.last_refcount = self.unpacker.reset()             # <<<<<<<<<<<<<<
 * 
 *     def loads(self, bytes obj):
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_10 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      __pyx_r = __pyx_t_10;
      __pyx_t_10 = 0;
      goto __pyx_L0;
    }
  }

  /* "larch/pickle/pickle.pyx":1157
 *         return self.default_find_class(module, name)
 * 
 *     def load(self):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1164
 *             self.last_refcount = self.unpacker.reset()
 * 
 *     def loads(self, bytes obj):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_9loads(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_9loads(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), (&PyBytes_Type), 1, "obj", 1))) __PYX_ERR(0, 1164, __pyx_L1_error)
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_8loads(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self), ((PyObject*)__pyx_v_obj));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_8loads(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);

  /* "larch/pickle/pickle.pyx":1165
 * 
 *     def loads(self, bytes obj):
 *         self.check_init()             # <<<<<<<<<<<<<<
 *         (<_BufferContainer>self.file).set(obj)
 *         try:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self->__pyx_vtab)->check_init(__pyx_v_self); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1165, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":1166
 *     def loads(self, bytes obj):
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)             # <<<<<<<<<<<<<<
 *         try:
 *             return <object>self.unpacker.first_load()
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_5larch_6pickle_6pickle__BufferContainer *)((struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)__pyx_v_self->file)->__pyx_vtab)->set(((struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)__pyx_v_self->file), __pyx_v_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1167
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)
 *         try:             # <<<<<<<<<<<<<<
 *             return <object>self.unpacker.first_load()
 *         finally:
 */
  /*try:*/ {

    /* "larch/pickle/pickle.pyx":1168
 *         (<_BufferContainer>self.file).set(obj)
 *         try:
 *             return <object>self.unpacker.first_load()             # <<<<<<<<<<<<<<
 *         finally:
 *             self.last_refcount = self.unpacker.reset()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->unpacker->first_load(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1168, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_t_2));
    __pyx_r = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "larch/pickle/pickle.pyx":1170
 *             return <object>self.unpacker.first_load()
 *         finally:
 *             self.last_refcount = self.unpacker.reset()             # <<<<<<<<<<<<<<
 * 
 *     cpdef verify_object(self, module, name, obj):
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __pyx_t_1 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_4 = __pyx_filename;
      {
        __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_4;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_10 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->last_refcount = __pyx_v_self->unpacker->reset();
      __pyx_r = __pyx_t_10;
      __pyx_t_10 = 0;
      goto __pyx_L0;
    }
  }

  /* "larch/pickle/pickle.pyx":1164
 *             self.last_refcount = self.unpacker.reset()
 * 
 *     def loads(self, bytes obj):             # <<<<<<<<<<<<<<
 *         self.check_init()
 *         (<_BufferContainer>self.file).set(obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1172
 *             self.last_refcount = self.unpacker.reset()
 * 
 *     cpdef verify_object(self, module, name, obj):             # <<<<<<<<<<<<<<
 *         if (module not in secure_modules and obj not in secure_objects
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 */

static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_11verify_object(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_9Unpickler_verify_object(CYTHON_UNUSED struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name, PyObject *__pyx_v_obj, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_add_module = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("verify_object", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_verify_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_5larch_6pickle_6pickle_9Unpickler_11verify_object)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_module, __pyx_v_name, __pyx_v_obj};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1172, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_module, __pyx_v_name, __pyx_v_obj};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1172, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1172, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_module);
          __Pyx_GIVEREF(__pyx_v_module);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_module);
          __Pyx_INCREF(__pyx_v_name);
          __Pyx_GIVEREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_name);
          __Pyx_INCREF(__pyx_v_obj);
          __Pyx_GIVEREF(__pyx_v_obj);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_obj);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1172, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "larch/pickle/pickle.pyx":1173
 * 
 *     cpdef verify_object(self, module, name, obj):
 *         if (module not in secure_modules and obj not in secure_objects             # <<<<<<<<<<<<<<
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 * 
 */
  if (unlikely(__pyx_v_5larch_6pickle_6pickle_secure_modules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1173, __pyx_L1_error)
  }
  __pyx_t_8 = (__Pyx_PySet_ContainsTF(__pyx_v_module, __pyx_v_5larch_6pickle_6pickle_secure_modules, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1173, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }

  /* "larch/pickle/pickle.pyx":1174
 *     cpdef verify_object(self, module, name, obj):
 *         if (module not in secure_modules and obj not in secure_objects
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):             # <<<<<<<<<<<<<<
 * 
 *             if getattr(obj, "__pickle_secure__", False):
 */
  if (unlikely(__pyx_v_5larch_6pickle_6pickle_secure_objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1173, __pyx_L1_error)
  }
  __pyx_t_9 = (__Pyx_PySet_ContainsTF(__pyx_v_obj, __pyx_v_5larch_6pickle_6pickle_secure_objects, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1173, __pyx_L1_error)

  /* "larch/pickle/pickle.pyx":1173
 * 
 *     cpdef verify_object(self, module, name, obj):
 *         if (module not in secure_modules and obj not in secure_objects             # <<<<<<<<<<<<<<
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 * 
 */
  __pyx_t_8 = (__pyx_t_9 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }

  /* "larch/pickle/pickle.pyx":1174
 *     cpdef verify_object(self, module, name, obj):
 *         if (module not in secure_modules and obj not in secure_objects
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):             # <<<<<<<<<<<<<<
 * 
 *             if getattr(obj, "__pickle_secure__", False):
 */
  __pyx_t_1 = __pyx_v_5larch_6pickle_6pickle_extension_registry;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_module);
  __Pyx_GIVEREF(__pyx_v_module);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __pyx_t_8 = ((PyDict_GetItem(__pyx_t_1, __pyx_t_2) == NULL) != 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;

  /* "larch/pickle/pickle.pyx":1173
 * 
 *     cpdef verify_object(self, module, name, obj):
 *         if (module not in secure_modules and obj not in secure_objects             # <<<<<<<<<<<<<<
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 * 
 */
  if (__pyx_t_7) {

    /* "larch/pickle/pickle.pyx":1176
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 * 
 *             if getattr(obj, "__pickle_secure__", False):             # <<<<<<<<<<<<<<
 *                 try:
 *                     secure_objects.add(obj)
 */
    __pyx_t_2 = __Pyx_GetAttr3(__pyx_v_obj, __pyx_n_u_pickle_secure, Py_False); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {

      /* "larch/pickle/pickle.pyx":1177
 * 
 *             if getattr(obj, "__pickle_secure__", False):
 *                 try:             # <<<<<<<<<<<<<<
 *                     secure_objects.add(obj)
 *                 except TypeError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "larch/pickle/pickle.pyx":1178
 *             if getattr(obj, "__pickle_secure__", False):
 *                 try:
 *                     secure_objects.add(obj)             # <<<<<<<<<<<<<<
 *                 except TypeError:
 *                     pass
 */
          if (unlikely(__pyx_v_5larch_6pickle_6pickle_secure_objects == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
            __PYX_ERR(0, 1178, __pyx_L8_error)
          }
          __pyx_t_13 = PySet_Add(__pyx_v_5larch_6pickle_6pickle_secure_objects, __pyx_v_obj); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1178, __pyx_L8_error)

          /* "larch/pickle/pickle.pyx":1177
 * 
 *             if getattr(obj, "__pickle_secure__", False):
 *                 try:             # <<<<<<<<<<<<<<
 *                     secure_objects.add(obj)
 *                 except TypeError:
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "larch/pickle/pickle.pyx":1179
 *                 try:
 *                     secure_objects.add(obj)
 *                 except TypeError:             # <<<<<<<<<<<<<<
 *                     pass
 *                 return
 */
        __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
        if (__pyx_t_5) {
          __Pyx_ErrRestore(0,0,0);
          goto __pyx_L9_exception_handled;
        }
        goto __pyx_L10_except_error;
        __pyx_L10_except_error:;

        /* "larch/pickle/pickle.pyx":1177
 * 
 *             if getattr(obj, "__pickle_secure__", False):
 *                 try:             # <<<<<<<<<<<<<<
 *                     secure_objects.add(obj)
 *                 except TypeError:
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L13_try_end:;
      }

      /* "larch/pickle/pickle.pyx":1181
 *                 except TypeError:
 *                     pass
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "larch/pickle/pickle.pyx":1176
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 * 
 *             if getattr(obj, "__pickle_secure__", False):             # <<<<<<<<<<<<<<
 *                 try:
 *                     secure_objects.add(obj)
 */
    }

    /* "larch/pickle/pickle.pyx":1183
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 add_module = getattr(pickle_register, "add_"+module.replace(".", "_"))
 *             except AttributeError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "larch/pickle/pickle.pyx":1184
 * 
 *             try:
 *                 add_module = getattr(pickle_register, "add_"+module.replace(".", "_"))             # <<<<<<<<<<<<<<
 *             except AttributeError:
 *                 pass
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1184, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_module, __pyx_n_s_replace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_n_u_add, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_GetAttr(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_add_module = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "larch/pickle/pickle.pyx":1183
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 add_module = getattr(pickle_register, "add_"+module.replace(".", "_"))
 *             except AttributeError:
 */
      }

      /* "larch/pickle/pickle.pyx":1188
 *                 pass
 *             else:
 *                 add_module()             # <<<<<<<<<<<<<<
 *                 if obj in secure_objects:
 *                     return
 */
      /*else:*/ {
        __Pyx_INCREF(__pyx_v_add_module);
        __pyx_t_1 = __pyx_v_add_module; __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1188, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "larch/pickle/pickle.pyx":1189
 *             else:
 *                 add_module()
 *                 if obj in secure_objects:             # <<<<<<<<<<<<<<
 *                     return
 * 
 */
        if (unlikely(__pyx_v_5larch_6pickle_6pickle_secure_objects == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 1189, __pyx_L16_except_error)
        }
        __pyx_t_7 = (__Pyx_PySet_ContainsTF(__pyx_v_obj, __pyx_v_5larch_6pickle_6pickle_secure_objects, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1189, __pyx_L16_except_error)
        __pyx_t_8 = (__pyx_t_7 != 0);
        if (__pyx_t_8) {

          /* "larch/pickle/pickle.pyx":1190
 *                 add_module()
 *                 if obj in secure_objects:
 *                     return             # <<<<<<<<<<<<<<
 * 
 *             logger.error("SecurityError %r %r", obj, module, stack_info=True)
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          goto __pyx_L17_except_return;

          /* "larch/pickle/pickle.pyx":1189
 *             else:
 *                 add_module()
 *                 if obj in secure_objects:             # <<<<<<<<<<<<<<
 *                     return
 * 
 */
        }
      }
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L19_try_end;
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "larch/pickle/pickle.pyx":1185
 *             try:
 *                 add_module = getattr(pickle_register, "add_"+module.replace(".", "_"))
 *             except AttributeError:             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
      if (__pyx_t_5) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L15_exception_handled;
      }
      goto __pyx_L16_except_error;
      __pyx_L16_except_error:;

      /* "larch/pickle/pickle.pyx":1183
 *                 return
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 add_module = getattr(pickle_register, "add_"+module.replace(".", "_"))
 *             except AttributeError:
 */
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L17_except_return:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      goto __pyx_L0;
      __pyx_L15_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      __pyx_L19_try_end:;
    }

    /* "larch/pickle/pickle.pyx":1192
 *                     return
 * 
 *             logger.error("SecurityError %r %r", obj, module, stack_info=True)             # <<<<<<<<<<<<<<
 *             raise SecurityError("object not save for loading", obj, module)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_SecurityError_r_r);
    __Pyx_GIVEREF(__pyx_kp_u_SecurityError_r_r);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_SecurityError_r_r);
    __Pyx_INCREF(__pyx_v_obj);
    __Pyx_GIVEREF(__pyx_v_obj);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_obj);
    __Pyx_INCREF(__pyx_v_module);
    __Pyx_GIVEREF(__pyx_v_module);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_module);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_stack_info, Py_True) < 0) __PYX_ERR(0, 1192, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "larch/pickle/pickle.pyx":1193
 * 
 *             logger.error("SecurityError %r %r", obj, module, stack_info=True)
 *             raise SecurityError("object not save for loading", obj, module)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SecurityError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_kp_u_object_not_save_for_loading, __pyx_v_obj, __pyx_v_module};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_kp_u_object_not_save_for_loading, __pyx_v_obj, __pyx_v_module};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1193, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_u_object_not_save_for_loading);
      __Pyx_GIVEREF(__pyx_kp_u_object_not_save_for_loading);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_5, __pyx_kp_u_object_not_save_for_loading);
      __Pyx_INCREF(__pyx_v_obj);
      __Pyx_GIVEREF(__pyx_v_obj);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_5, __pyx_v_obj);
      __Pyx_INCREF(__pyx_v_module);
      __Pyx_GIVEREF(__pyx_v_module);
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_5, __pyx_v_module);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1193, __pyx_L1_error)

    /* "larch/pickle/pickle.pyx":1173
 * 
 *     cpdef verify_object(self, module, name, obj):
 *         if (module not in secure_modules and obj not in secure_objects             # <<<<<<<<<<<<<<
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 * 
 */
  }

  /* "larch/pickle/pickle.pyx":1172
 *             self.last_refcount = self.unpacker.reset()
 * 
 *     cpdef verify_object(self, module, name, obj):             # <<<<<<<<<<<<<<
 *         if (module not in secure_modules and obj not in secure_objects
 *                 and PyDict_GetItem(extension_registry, (module, name)) is NULL):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.verify_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_add_module);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_11verify_object(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_11verify_object(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_module = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_obj = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("verify_object (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_module_2,&__pyx_n_s_name_2,&__pyx_n_s_obj,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_module_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("verify_object", 1, 3, 3, 1); __PYX_ERR(0, 1172, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("verify_object", 1, 3, 3, 2); __PYX_ERR(0, 1172, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "verify_object") < 0)) __PYX_ERR(0, 1172, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_module = values[0];
    __pyx_v_name = values[1];
    __pyx_v_obj = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("verify_object", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1172, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.verify_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_10verify_object(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self), __pyx_v_module, __pyx_v_name, __pyx_v_obj);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_10verify_object(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_module, PyObject *__pyx_v_name, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("verify_object", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle_9Unpickler_verify_object(__pyx_v_self, __pyx_v_module, __pyx_v_name, __pyx_v_obj, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.verify_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1078
 *         find_class_t call_find_class
 *         default_find_class_t default_find_class
 *         public uint32_t last_refcount             # <<<<<<<<<<<<<<
 *         public bool secure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_13last_refcount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_13last_refcount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_13last_refcount___get__(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_13last_refcount___get__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->last_refcount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.last_refcount.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_9Unpickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_9Unpickler_13last_refcount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_13last_refcount_2__set__(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_9Unpickler_13last_refcount_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_v_self->last_refcount = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.last_refcount.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1079
 *         default_find_class_t default_find_class
 *         public uint32_t last_refcount
 *         public bool secure             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, file=b"", bool secure=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_6secure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_9Unpickler_6secure_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_6secure___get__(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_9Unpickler_6secure___get__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->secure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.secure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5larch_6pickle_6pickle_9Unpickler_6secure_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5larch_6pickle_6pickle_9Unpickler_6secure_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_9Unpickler_6secure_2__set__(((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5larch_6pickle_6pickle_9Unpickler_6secure_2__set__(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1079, __pyx_L1_error)
  __pyx_v_self->secure = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.Unpickler.secure.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1196
 * 
 * 
 * cpdef dumps(obj, protocol=-1, with_refs=True):             # <<<<<<<<<<<<<<
 *     return Pickler(protocol=protocol, with_refs=with_refs)\
 *         .dump(obj).get_output_string()
 */

static PyObject *__pyx_pw_5larch_6pickle_6pickle_1dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_dumps(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_dumps *__pyx_optional_args) {
  PyObject *__pyx_v_protocol = ((PyObject *)__pyx_int_neg_1);
  PyObject *__pyx_v_with_refs = ((PyObject *)Py_True);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_protocol = __pyx_optional_args->protocol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_with_refs = __pyx_optional_args->with_refs;
      }
    }
  }

  /* "larch/pickle/pickle.pyx":1197
 * 
 * cpdef dumps(obj, protocol=-1, with_refs=True):
 *     return Pickler(protocol=protocol, with_refs=with_refs)\             # <<<<<<<<<<<<<<
 *         .dump(obj).get_output_string()
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "larch/pickle/pickle.pyx":1198
 * cpdef dumps(obj, protocol=-1, with_refs=True):
 *     return Pickler(protocol=protocol, with_refs=with_refs)\
 *         .dump(obj).get_output_string()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "larch/pickle/pickle.pyx":1197
 * 
 * cpdef dumps(obj, protocol=-1, with_refs=True):
 *     return Pickler(protocol=protocol, with_refs=with_refs)\             # <<<<<<<<<<<<<<
 *         .dump(obj).get_output_string()
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_protocol, __pyx_v_protocol) < 0) __PYX_ERR(0, 1197, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_with_refs, __pyx_v_with_refs) < 0) __PYX_ERR(0, 1197, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle_Pickler), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "larch/pickle/pickle.pyx":1198
 * cpdef dumps(obj, protocol=-1, with_refs=True):
 *     return Pickler(protocol=protocol, with_refs=with_refs)\
 *         .dump(obj).get_output_string()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dump); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_obj);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_output_string); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1196
 * 
 * 
 * cpdef dumps(obj, protocol=-1, with_refs=True):             # <<<<<<<<<<<<<<
 *     return Pickler(protocol=protocol, with_refs=with_refs)\
 *         .dump(obj).get_output_string()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_1dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_1dumps(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_protocol = 0;
  PyObject *__pyx_v_with_refs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_protocol,&__pyx_n_s_with_refs,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_neg_1);
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_protocol);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_with_refs);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dumps") < 0)) __PYX_ERR(0, 1196, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_protocol = values[1];
    __pyx_v_with_refs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dumps", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_dumps(__pyx_self, __pyx_v_obj, __pyx_v_protocol, __pyx_v_with_refs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_protocol, PyObject *__pyx_v_with_refs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5larch_6pickle_6pickle_dumps __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.protocol = __pyx_v_protocol;
  __pyx_t_2.with_refs = __pyx_v_with_refs;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle_dumps(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1201
 * 
 * 
 * cpdef dump(obj, file, protocol=-1):             # <<<<<<<<<<<<<<
 *     Pickler(file, protocol=protocol).dump(obj)
 * 
 */

static PyObject *__pyx_pw_5larch_6pickle_6pickle_3dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_dump(PyObject *__pyx_v_obj, PyObject *__pyx_v_file, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_dump *__pyx_optional_args) {
  PyObject *__pyx_v_protocol = ((PyObject *)__pyx_int_neg_1);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_protocol = __pyx_optional_args->protocol;
    }
  }

  /* "larch/pickle/pickle.pyx":1202
 * 
 * cpdef dump(obj, file, protocol=-1):
 *     Pickler(file, protocol=protocol).dump(obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_file);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_protocol, __pyx_v_protocol) < 0) __PYX_ERR(0, 1202, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle_Pickler), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dump); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_obj);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1201
 * 
 * 
 * cpdef dump(obj, file, protocol=-1):             # <<<<<<<<<<<<<<
 *     Pickler(file, protocol=protocol).dump(obj)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("larch.pickle.pickle.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_3dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_3dump(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_protocol = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_file,&__pyx_n_s_protocol,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_neg_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dump", 0, 2, 3, 1); __PYX_ERR(0, 1201, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_protocol);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump") < 0)) __PYX_ERR(0, 1201, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_file = values[1];
    __pyx_v_protocol = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_2dump(__pyx_self, __pyx_v_obj, __pyx_v_file, __pyx_v_protocol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_2dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_file, PyObject *__pyx_v_protocol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5larch_6pickle_6pickle_dump __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.protocol = __pyx_v_protocol;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle_dump(__pyx_v_obj, __pyx_v_file, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1205
 * 
 * 
 * cpdef load(file, secure=False):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(file, secure=secure)
 *     return unpickler.load()
 */

static PyObject *__pyx_pw_5larch_6pickle_6pickle_5load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_load(PyObject *__pyx_v_file, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_load *__pyx_optional_args) {
  PyObject *__pyx_v_secure = ((PyObject *)Py_False);
  struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_unpickler = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_secure = __pyx_optional_args->secure;
    }
  }

  /* "larch/pickle/pickle.pyx":1206
 * 
 * cpdef load(file, secure=False):
 *     cdef Unpickler unpickler = Unpickler(file, secure=secure)             # <<<<<<<<<<<<<<
 *     return unpickler.load()
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_secure, __pyx_v_secure) < 0) __PYX_ERR(0, 1206, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle_Unpickler), __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_unpickler = ((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "larch/pickle/pickle.pyx":1207
 * cpdef load(file, secure=False):
 *     cdef Unpickler unpickler = Unpickler(file, secure=secure)
 *     return unpickler.load()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_unpickler), __pyx_n_s_load); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1205
 * 
 * 
 * cpdef load(file, secure=False):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(file, secure=secure)
 *     return unpickler.load()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.pickle.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_unpickler);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_5load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_5load(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  PyObject *__pyx_v_secure = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,&__pyx_n_s_secure,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_secure);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load") < 0)) __PYX_ERR(0, 1205, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
    __pyx_v_secure = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1205, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_4load(__pyx_self, __pyx_v_file, __pyx_v_secure);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_4load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file, PyObject *__pyx_v_secure) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5larch_6pickle_6pickle_load __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.secure = __pyx_v_secure;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle_load(__pyx_v_file, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "larch/pickle/pickle.pyx":1210
 * 
 * 
 * cpdef loads(bytes obj, secure=False):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(obj, secure=secure)
 *     return unpickler.load()
 */

static PyObject *__pyx_pw_5larch_6pickle_6pickle_7loads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_5larch_6pickle_6pickle_loads(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5larch_6pickle_6pickle_loads *__pyx_optional_args) {
  PyObject *__pyx_v_secure = ((PyObject *)Py_False);
  struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *__pyx_v_unpickler = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_secure = __pyx_optional_args->secure;
    }
  }

  /* "larch/pickle/pickle.pyx":1211
 * 
 * cpdef loads(bytes obj, secure=False):
 *     cdef Unpickler unpickler = Unpickler(obj, secure=secure)             # <<<<<<<<<<<<<<
 *     return unpickler.load()
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_secure, __pyx_v_secure) < 0) __PYX_ERR(0, 1211, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5larch_6pickle_6pickle_Unpickler), __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_unpickler = ((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "larch/pickle/pickle.pyx":1212
 * cpdef loads(bytes obj, secure=False):
 *     cdef Unpickler unpickler = Unpickler(obj, secure=secure)
 *     return unpickler.load()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_unpickler), __pyx_n_s_load); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "larch/pickle/pickle.pyx":1210
 * 
 * 
 * cpdef loads(bytes obj, secure=False):             # <<<<<<<<<<<<<<
 *     cdef Unpickler unpickler = Unpickler(obj, secure=secure)
 *     return unpickler.load()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("larch.pickle.pickle.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_unpickler);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7loads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5larch_6pickle_6pickle_7loads(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_secure = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_secure,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_secure);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loads") < 0)) __PYX_ERR(0, 1210, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = ((PyObject*)values[0]);
    __pyx_v_secure = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loads", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1210, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("larch.pickle.pickle.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), (&PyBytes_Type), 1, "obj", 1))) __PYX_ERR(0, 1210, __pyx_L1_error)
  __pyx_r = __pyx_pf_5larch_6pickle_6pickle_6loads(__pyx_self, __pyx_v_obj, __pyx_v_secure);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5larch_6pickle_6pickle_6loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_secure) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5larch_6pickle_6pickle_loads __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.secure = __pyx_v_secure;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle_loads(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("larch.pickle.pickle.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5larch_6pickle_6pickle_Pickler __pyx_vtable_5larch_6pickle_6pickle_Pickler;

static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_Pickler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_6pickle_Pickler *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_6pickle_Pickler;
  p->file = Py_None; Py_INCREF(Py_None);
  p->dispatch_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_6pickle_Pickler(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_6pickle_Pickler *p = (struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5larch_6pickle_6pickle_7Pickler_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->file);
  Py_CLEAR(p->dispatch_table);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_6pickle_Pickler(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_6pickle_Pickler *p = (struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)o;
  if (p->file) {
    e = (*v)(p->file, a); if (e) return e;
  }
  if (p->dispatch_table) {
    e = (*v)(p->dispatch_table, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_6pickle_Pickler(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_6pickle_Pickler *p = (struct __pyx_obj_5larch_6pickle_6pickle_Pickler *)o;
  tmp = ((PyObject*)p->file);
  p->file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dispatch_table);
  p->dispatch_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5larch_6pickle_6pickle_7Pickler_dispatch_table(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_6pickle_7Pickler_dispatch_table(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_3__set__(o, v);
  }
  else {
    return __pyx_pw_5larch_6pickle_6pickle_7Pickler_14dispatch_table_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5larch_6pickle_6pickle_7Pickler_last_refcount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_6pickle_7Pickler_13last_refcount_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_6pickle_7Pickler_last_refcount(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_6pickle_7Pickler_13last_refcount_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5larch_6pickle_6pickle_Pickler[] = {
  {"dump", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_7Pickler_5dump, METH_VARARGS|METH_KEYWORDS, 0},
  {"dumps", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_7Pickler_7dumps, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_output_string", (PyCFunction)__pyx_pw_5larch_6pickle_6pickle_7Pickler_9get_output_string, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5larch_6pickle_6pickle_Pickler[] = {
  {(char *)"dispatch_table", __pyx_getprop_5larch_6pickle_6pickle_7Pickler_dispatch_table, __pyx_setprop_5larch_6pickle_6pickle_7Pickler_dispatch_table, (char *)0, 0},
  {(char *)"last_refcount", __pyx_getprop_5larch_6pickle_6pickle_7Pickler_last_refcount, __pyx_setprop_5larch_6pickle_6pickle_7Pickler_last_refcount, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_6pickle_Pickler = {
  PyVarObject_HEAD_INIT(0, 0)
  "larch.pickle.pickle.Pickler", /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_6pickle_Pickler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_6pickle_Pickler, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_6pickle_Pickler, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_6pickle_Pickler, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_6pickle_Pickler, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5larch_6pickle_6pickle_Pickler, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_6pickle_7Pickler_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_6pickle_Pickler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle_Unpickler __pyx_vtable_5larch_6pickle_6pickle_Unpickler;

static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_Unpickler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_6pickle_Unpickler;
  p->file = Py_None; Py_INCREF(Py_None);
  p->_find_class = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_6pickle_Unpickler(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *p = (struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5larch_6pickle_6pickle_9Unpickler_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->file);
  Py_CLEAR(p->_find_class);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_6pickle_Unpickler(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *p = (struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)o;
  if (p->file) {
    e = (*v)(p->file, a); if (e) return e;
  }
  if (p->_find_class) {
    e = (*v)(p->_find_class, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_6pickle_Unpickler(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *p = (struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *)o;
  tmp = ((PyObject*)p->file);
  p->file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_find_class);
  p->_find_class = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5larch_6pickle_6pickle_9Unpickler_last_refcount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_6pickle_9Unpickler_13last_refcount_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_6pickle_9Unpickler_last_refcount(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_6pickle_9Unpickler_13last_refcount_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5larch_6pickle_6pickle_9Unpickler_secure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5larch_6pickle_6pickle_9Unpickler_6secure_1__get__(o);
}

static int __pyx_setprop_5larch_6pickle_6pickle_9Unpickler_secure(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5larch_6pickle_6pickle_9Unpickler_6secure_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5larch_6pickle_6pickle_Unpickler[] = {
  {"find_class", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_9Unpickler_5find_class, METH_VARARGS|METH_KEYWORDS, 0},
  {"load", (PyCFunction)__pyx_pw_5larch_6pickle_6pickle_9Unpickler_7load, METH_NOARGS, 0},
  {"loads", (PyCFunction)__pyx_pw_5larch_6pickle_6pickle_9Unpickler_9loads, METH_O, 0},
  {"verify_object", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_9Unpickler_11verify_object, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5larch_6pickle_6pickle_Unpickler[] = {
  {(char *)"last_refcount", __pyx_getprop_5larch_6pickle_6pickle_9Unpickler_last_refcount, __pyx_setprop_5larch_6pickle_6pickle_9Unpickler_last_refcount, (char *)0, 0},
  {(char *)"secure", __pyx_getprop_5larch_6pickle_6pickle_9Unpickler_secure, __pyx_setprop_5larch_6pickle_6pickle_9Unpickler_secure, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_6pickle_Unpickler = {
  PyVarObject_HEAD_INIT(0, 0)
  "larch.pickle.pickle.Unpickler", /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_6pickle_Unpickler, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_6pickle_Unpickler, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_6pickle_Unpickler, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_6pickle_Unpickler, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5larch_6pickle_6pickle_Unpickler, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_6pickle_9Unpickler_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_6pickle_Unpickler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle_OutputBuffer __pyx_vtable_5larch_6pickle_6pickle_OutputBuffer;

static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_OutputBuffer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_6pickle_OutputBuffer;
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_6pickle_OutputBuffer(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5larch_6pickle_6pickle_12OutputBuffer_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5larch_6pickle_6pickle_OutputBuffer[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_6pickle_OutputBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "larch.pickle.pickle.OutputBuffer", /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_6pickle_OutputBuffer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_6pickle_OutputBuffer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_6pickle_12OutputBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_6pickle_OutputBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_5larch_6pickle_6pickle__BufferContainer __pyx_vtable_5larch_6pickle_6pickle__BufferContainer;

static PyObject *__pyx_tp_new_5larch_6pickle_6pickle__BufferContainer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)o);
  p->__pyx_vtab = __pyx_vtabptr_5larch_6pickle_6pickle__BufferContainer;
  new((void*)&(p->sreader)) StringReader();
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_6pickle__BufferContainer(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *p = (struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->sreader);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_5larch_6pickle_6pickle__BufferContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  "larch.pickle.pickle._BufferContainer", /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_6pickle__BufferContainer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_6pickle__BufferContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_5larch_6pickle_6pickle__FileLike(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_6pickle__FileLike *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)o);
  p->write = Py_None; Py_INCREF(Py_None);
  p->read = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_6pickle__FileLike(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_6pickle__FileLike *p = (struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->write);
  Py_CLEAR(p->read);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_6pickle__FileLike(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_6pickle__FileLike *p = (struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)o;
  if (p->write) {
    e = (*v)(p->write, a); if (e) return e;
  }
  if (p->read) {
    e = (*v)(p->read, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_6pickle__FileLike(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_6pickle__FileLike *p = (struct __pyx_obj_5larch_6pickle_6pickle__FileLike *)o;
  tmp = ((PyObject*)p->write);
  p->write = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->read);
  p->read = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5larch_6pickle_6pickle__FileLike[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5larch_6pickle_6pickle__FileLike = {
  PyVarObject_HEAD_INIT(0, 0)
  "larch.pickle.pickle._FileLike", /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_6pickle__FileLike), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_6pickle__FileLike, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_6pickle__FileLike, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_6pickle__FileLike, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5larch_6pickle_6pickle__FileLike, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5larch_6pickle_6pickle_9_FileLike_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_6pickle__FileLike, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_5larch_6pickle_6pickle_ExternFileLike(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *)o);
  p->file = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5larch_6pickle_6pickle_ExternFileLike(PyObject *o) {
  struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *p = (struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->file);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5larch_6pickle_6pickle_ExternFileLike(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *p = (struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *)o;
  if (p->file) {
    e = (*v)(p->file, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5larch_6pickle_6pickle_ExternFileLike(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *p = (struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike *)o;
  tmp = ((PyObject*)p->file);
  p->file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5larch_6pickle_6pickle_ExternFileLike = {
  PyVarObject_HEAD_INIT(0, 0)
  "larch.pickle.pickle.ExternFileLike", /*tp_name*/
  sizeof(struct __pyx_obj_5larch_6pickle_6pickle_ExternFileLike), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5larch_6pickle_6pickle_ExternFileLike, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5larch_6pickle_6pickle_ExternFileLike, /*tp_traverse*/
  __pyx_tp_clear_5larch_6pickle_6pickle_ExternFileLike, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5larch_6pickle_6pickle_ExternFileLike, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"dumps", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_1dumps, METH_VARARGS|METH_KEYWORDS, 0},
  {"dump", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_3dump, METH_VARARGS|METH_KEYWORDS, 0},
  {"load", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_5load, METH_VARARGS|METH_KEYWORDS, 0},
  {"loads", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5larch_6pickle_6pickle_7loads, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pickle(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pickle},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pickle",
    __pyx_k_Difference_to_python_pickle_no, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_BufferContainer, __pyx_k_BufferContainer, sizeof(__pyx_k_BufferContainer), 0, 0, 1, 1},
  {&__pyx_n_s_BuiltinMethodType, __pyx_k_BuiltinMethodType, sizeof(__pyx_k_BuiltinMethodType), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_pickle_object_with_more_t, __pyx_k_Cannot_pickle_object_with_more_t, sizeof(__pyx_k_Cannot_pickle_object_with_more_t), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_save_r, __pyx_k_Cannot_save_r, sizeof(__pyx_k_Cannot_save_r), 0, 1, 0, 0},
  {&__pyx_n_s_EOFError, __pyx_k_EOFError, sizeof(__pyx_k_EOFError), 0, 0, 1, 1},
  {&__pyx_n_s_ExternFileLike, __pyx_k_ExternFileLike, sizeof(__pyx_k_ExternFileLike), 0, 0, 1, 1},
  {&__pyx_n_s_FileLike, __pyx_k_FileLike, sizeof(__pyx_k_FileLike), 0, 0, 1, 1},
  {&__pyx_n_s_GeneratorType, __pyx_k_GeneratorType, sizeof(__pyx_k_GeneratorType), 0, 0, 1, 1},
  {&__pyx_n_s_IMPORT_MAPPING, __pyx_k_IMPORT_MAPPING, sizeof(__pyx_k_IMPORT_MAPPING), 0, 0, 1, 1},
  {&__pyx_kp_u_Invalid_reference, __pyx_k_Invalid_reference, sizeof(__pyx_k_Invalid_reference), 0, 1, 0, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_NAME_MAPPING, __pyx_k_NAME_MAPPING, sizeof(__pyx_k_NAME_MAPPING), 0, 0, 1, 1},
  {&__pyx_n_u_NULL, __pyx_k_NULL, sizeof(__pyx_k_NULL), 0, 1, 0, 1},
  {&__pyx_n_s_OutputBuffer, __pyx_k_OutputBuffer, sizeof(__pyx_k_OutputBuffer), 0, 0, 1, 1},
  {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Pickler, __pyx_k_Pickler, sizeof(__pyx_k_Pickler), 0, 0, 1, 1},
  {&__pyx_kp_u_Pickler___init___was_not_called, __pyx_k_Pickler___init___was_not_called, sizeof(__pyx_k_Pickler___init___was_not_called), 0, 1, 0, 0},
  {&__pyx_n_s_PicklingError, __pyx_k_PicklingError, sizeof(__pyx_k_PicklingError), 0, 0, 1, 1},
  {&__pyx_n_s_REVERSE_IMPORT_MAPPING, __pyx_k_REVERSE_IMPORT_MAPPING, sizeof(__pyx_k_REVERSE_IMPORT_MAPPING), 0, 0, 1, 1},
  {&__pyx_n_s_REVERSE_NAME_MAPPING, __pyx_k_REVERSE_NAME_MAPPING, sizeof(__pyx_k_REVERSE_NAME_MAPPING), 0, 0, 1, 1},
  {&__pyx_n_s_SecurityError, __pyx_k_SecurityError, sizeof(__pyx_k_SecurityError), 0, 0, 1, 1},
  {&__pyx_kp_u_SecurityError_r_r, __pyx_k_SecurityError_r_r, sizeof(__pyx_k_SecurityError_r_r), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unknown_load_code, __pyx_k_Unknown_load_code, sizeof(__pyx_k_Unknown_load_code), 0, 1, 0, 0},
  {&__pyx_n_s_Unpickler, __pyx_k_Unpickler, sizeof(__pyx_k_Unpickler), 0, 0, 1, 1},
  {&__pyx_kp_u_Unpickler___init___was_not_calle, __pyx_k_Unpickler___init___was_not_calle, sizeof(__pyx_k_Unpickler___init___was_not_calle), 0, 1, 0, 0},
  {&__pyx_n_s_UnpicklingError, __pyx_k_UnpicklingError, sizeof(__pyx_k_UnpicklingError), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_n_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},
  {&__pyx_kp_b__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 1},
  {&__pyx_n_u_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 1, 0, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_c_pickle, __pyx_k_c_pickle, sizeof(__pyx_k_c_pickle), 0, 0, 1, 1},
  {&__pyx_n_u_c_pickle, __pyx_k_c_pickle, sizeof(__pyx_k_c_pickle), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compat_pickle, __pyx_k_compat_pickle, sizeof(__pyx_k_compat_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_copyreg, __pyx_k_copyreg, sizeof(__pyx_k_copyreg), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dispatch_table, __pyx_k_dispatch_table, sizeof(__pyx_k_dispatch_table), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_s_extension_cache, __pyx_k_extension_cache, sizeof(__pyx_k_extension_cache), 0, 0, 1, 1},
  {&__pyx_n_s_extension_registry, __pyx_k_extension_registry, sizeof(__pyx_k_extension_registry), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_file_like, __pyx_k_file_like, sizeof(__pyx_k_file_like), 0, 0, 1, 1},
  {&__pyx_n_s_find_class, __pyx_k_find_class, sizeof(__pyx_k_find_class), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_output_string, __pyx_k_get_output_string, sizeof(__pyx_k_get_output_string), 0, 0, 1, 1},
  {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inverted_registry, __pyx_k_inverted_registry, sizeof(__pyx_k_inverted_registry), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_kp_u_larch_pickle, __pyx_k_larch_pickle, sizeof(__pyx_k_larch_pickle), 0, 1, 0, 0},
  {&__pyx_n_s_larch_pickle_pickle, __pyx_k_larch_pickle_pickle, sizeof(__pyx_k_larch_pickle_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_module_2, __pyx_k_module_2, sizeof(__pyx_k_module_2), 0, 0, 1, 1},
  {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_newobj, __pyx_k_newobj, sizeof(__pyx_k_newobj), 0, 1, 0, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_kp_u_object_not_save_for_loading, __pyx_k_object_not_save_for_loading, sizeof(__pyx_k_object_not_save_for_loading), 0, 1, 0, 0},
  {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
  {&__pyx_n_s_pickle_register, __pyx_k_pickle_register, sizeof(__pyx_k_pickle_register), 0, 0, 1, 1},
  {&__pyx_n_u_pickle_secure, __pyx_k_pickle_secure, sizeof(__pyx_k_pickle_secure), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_protocol, __pyx_k_protocol, sizeof(__pyx_k_protocol), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_secure, __pyx_k_secure, sizeof(__pyx_k_secure), 0, 0, 1, 1},
  {&__pyx_n_s_secure_modules, __pyx_k_secure_modules, sizeof(__pyx_k_secure_modules), 0, 0, 1, 1},
  {&__pyx_n_s_secure_objects, __pyx_k_secure_objects, sizeof(__pyx_k_secure_objects), 0, 0, 1, 1},
  {&__pyx_n_s_secure_unpickle, __pyx_k_secure_unpickle, sizeof(__pyx_k_secure_unpickle), 0, 0, 1, 1},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_u_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 1, 0, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stack_info, __pyx_k_stack_info, sizeof(__pyx_k_stack_info), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_verify_object, __pyx_k_verify_object, sizeof(__pyx_k_verify_object), 0, 0, 1, 1},
  {&__pyx_n_s_with_refs, __pyx_k_with_refs, sizeof(__pyx_k_with_refs), 0, 0, 1, 1},
  {&__pyx_n_s_with_version, __pyx_k_with_version, sizeof(__pyx_k_with_version), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_builtin_hex = __Pyx_GetBuiltinName(__pyx_n_s_hex); if (!__pyx_builtin_hex) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_builtin_EOFError = __Pyx_GetBuiltinName(__pyx_n_s_EOFError); if (!__pyx_builtin_EOFError) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(0, 416, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 591, __pyx_L1_error)
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_n_s_import); if (!__pyx_builtin___import__) __PYX_ERR(0, 1037, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 1048, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 1133, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "larch/pickle/pickle.pyx":1184
 * 
 *             try:
 *                 add_module = getattr(pickle_register, "add_"+module.replace(".", "_"))             # <<<<<<<<<<<<<<
 *             except AttributeError:
 *                 pass
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_kp_u__2, __pyx_n_u__4); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "larch/pickle/pickle.pyx":69
 * cdef set secure_modules = pickle_register.secure_modules
 * 
 * logger = logging.getLogger("larch.pickle")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_larch_pickle); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "larch/pickle/pickle.pyx":968
 *         unpickle_registry[i+offset] = loader
 * 
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_512); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "larch/pickle/pickle.pyx":969
 * 
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))
 * _register_unpickle(load_uint4, range(0x80))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_128); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "larch/pickle/pickle.pyx":970
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_int_224, __pyx_int_256); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "larch/pickle/pickle.pyx":980
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_int_128, __pyx_int_144); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "larch/pickle/pickle.pyx":986
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_int_160, __pyx_int_192); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "larch/pickle/pickle.pyx":993
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_int_144, __pyx_int_160); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_160 = PyInt_FromLong(160); if (unlikely(!__pyx_int_160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_192 = PyInt_FromLong(192); if (unlikely(!__pyx_int_192)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_193 = PyInt_FromLong(193); if (unlikely(!__pyx_int_193)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_194 = PyInt_FromLong(194); if (unlikely(!__pyx_int_194)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_195 = PyInt_FromLong(195); if (unlikely(!__pyx_int_195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_196 = PyInt_FromLong(196); if (unlikely(!__pyx_int_196)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_197 = PyInt_FromLong(197); if (unlikely(!__pyx_int_197)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_198 = PyInt_FromLong(198); if (unlikely(!__pyx_int_198)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_199 = PyInt_FromLong(199); if (unlikely(!__pyx_int_199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201 = PyInt_FromLong(201); if (unlikely(!__pyx_int_201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_203 = PyInt_FromLong(203); if (unlikely(!__pyx_int_203)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_204 = PyInt_FromLong(204); if (unlikely(!__pyx_int_204)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_205 = PyInt_FromLong(205); if (unlikely(!__pyx_int_205)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_206 = PyInt_FromLong(206); if (unlikely(!__pyx_int_206)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_207 = PyInt_FromLong(207); if (unlikely(!__pyx_int_207)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_208 = PyInt_FromLong(208); if (unlikely(!__pyx_int_208)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_209 = PyInt_FromLong(209); if (unlikely(!__pyx_int_209)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_210 = PyInt_FromLong(210); if (unlikely(!__pyx_int_210)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_211 = PyInt_FromLong(211); if (unlikely(!__pyx_int_211)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_212 = PyInt_FromLong(212); if (unlikely(!__pyx_int_212)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_213 = PyInt_FromLong(213); if (unlikely(!__pyx_int_213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_214 = PyInt_FromLong(214); if (unlikely(!__pyx_int_214)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_215 = PyInt_FromLong(215); if (unlikely(!__pyx_int_215)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_216 = PyInt_FromLong(216); if (unlikely(!__pyx_int_216)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_217 = PyInt_FromLong(217); if (unlikely(!__pyx_int_217)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_218 = PyInt_FromLong(218); if (unlikely(!__pyx_int_218)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_219 = PyInt_FromLong(219); if (unlikely(!__pyx_int_219)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_220 = PyInt_FromLong(220); if (unlikely(!__pyx_int_220)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_221 = PyInt_FromLong(221); if (unlikely(!__pyx_int_221)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222 = PyInt_FromLong(222); if (unlikely(!__pyx_int_222)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_223 = PyInt_FromLong(223); if (unlikely(!__pyx_int_223)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_224 = PyInt_FromLong(224); if (unlikely(!__pyx_int_224)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1L = PyLong_FromString((char *)"1", 0, 0); if (unlikely(!__pyx_int_1L)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_5larch_6pickle_6pickle_secure_objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_secure_modules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_name_mapping_2to3 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_import_mapping_2to3 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_name_mapping_3to2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_import_mapping_3to2 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL = Py_None; Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION = Py_None; Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_dispatch_table = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_extension_registry = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_inverted_registry = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_extension_cache = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle_modules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle__end_item = Py_None; Py_INCREF(Py_None);
  __pyx_v_5larch_6pickle_6pickle__string_type = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5larch_6pickle_6pickle_Pickler = &__pyx_vtable_5larch_6pickle_6pickle_Pickler;
  __pyx_vtable_5larch_6pickle_6pickle_Pickler.pack_import1 = (int (*)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *, uint8_t, PyObject *))__pyx_f_5larch_6pickle_6pickle_7Pickler_pack_import1;
  __pyx_vtable_5larch_6pickle_6pickle_Pickler.pack_import2 = (int (*)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *, uint8_t, PyObject *, PyObject *))__pyx_f_5larch_6pickle_6pickle_7Pickler_pack_import2;
  __pyx_vtable_5larch_6pickle_6pickle_Pickler.check_init = (int (*)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *))__pyx_f_5larch_6pickle_6pickle_7Pickler_check_init;
  __pyx_vtable_5larch_6pickle_6pickle_Pickler.get_output_string = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_6pickle_Pickler *, int __pyx_skip_dispatch))__pyx_f_5larch_6pickle_6pickle_7Pickler_get_output_string;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_6pickle_Pickler) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5larch_6pickle_6pickle_Pickler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5larch_6pickle_6pickle_Pickler.tp_dictoffset && __pyx_type_5larch_6pickle_6pickle_Pickler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5larch_6pickle_6pickle_Pickler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_6pickle_Pickler.tp_dict, __pyx_vtabptr_5larch_6pickle_6pickle_Pickler) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Pickler, (PyObject *)&__pyx_type_5larch_6pickle_6pickle_Pickler) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_ptype_5larch_6pickle_6pickle_Pickler = &__pyx_type_5larch_6pickle_6pickle_Pickler;
  __pyx_vtabptr_5larch_6pickle_6pickle_Unpickler = &__pyx_vtable_5larch_6pickle_6pickle_Unpickler;
  __pyx_vtable_5larch_6pickle_6pickle_Unpickler.set_protocol = (int (*)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, uint8_t))__pyx_f_5larch_6pickle_6pickle_9Unpickler_set_protocol;
  __pyx_vtable_5larch_6pickle_6pickle_Unpickler.unpack_import = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, size_t))__pyx_f_5larch_6pickle_6pickle_9Unpickler_unpack_import;
  __pyx_vtable_5larch_6pickle_6pickle_Unpickler.check_init = (int (*)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *))__pyx_f_5larch_6pickle_6pickle_9Unpickler_check_init;
  __pyx_vtable_5larch_6pickle_6pickle_Unpickler.verify_object = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_6pickle_Unpickler *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5larch_6pickle_6pickle_9Unpickler_verify_object;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_6pickle_Unpickler) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5larch_6pickle_6pickle_Unpickler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5larch_6pickle_6pickle_Unpickler.tp_dictoffset && __pyx_type_5larch_6pickle_6pickle_Unpickler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5larch_6pickle_6pickle_Unpickler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_6pickle_Unpickler.tp_dict, __pyx_vtabptr_5larch_6pickle_6pickle_Unpickler) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Unpickler, (PyObject *)&__pyx_type_5larch_6pickle_6pickle_Unpickler) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_ptype_5larch_6pickle_6pickle_Unpickler = &__pyx_type_5larch_6pickle_6pickle_Unpickler;
  __pyx_vtabptr_5larch_6pickle_6pickle_OutputBuffer = &__pyx_vtable_5larch_6pickle_6pickle_OutputBuffer;
  __pyx_vtable_5larch_6pickle_6pickle_OutputBuffer.reset = (void (*)(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *))__pyx_f_5larch_6pickle_6pickle_12OutputBuffer_reset;
  __pyx_vtable_5larch_6pickle_6pickle_OutputBuffer.result = (PyObject *(*)(struct __pyx_obj_5larch_6pickle_6pickle_OutputBuffer *))__pyx_f_5larch_6pickle_6pickle_12OutputBuffer_result;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_6pickle_OutputBuffer) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5larch_6pickle_6pickle_OutputBuffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5larch_6pickle_6pickle_OutputBuffer.tp_dictoffset && __pyx_type_5larch_6pickle_6pickle_OutputBuffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5larch_6pickle_6pickle_OutputBuffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_6pickle_OutputBuffer.tp_dict, __pyx_vtabptr_5larch_6pickle_6pickle_OutputBuffer) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OutputBuffer, (PyObject *)&__pyx_type_5larch_6pickle_6pickle_OutputBuffer) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __pyx_ptype_5larch_6pickle_6pickle_OutputBuffer = &__pyx_type_5larch_6pickle_6pickle_OutputBuffer;
  __pyx_vtabptr_5larch_6pickle_6pickle__BufferContainer = &__pyx_vtable_5larch_6pickle_6pickle__BufferContainer;
  __pyx_vtable_5larch_6pickle_6pickle__BufferContainer.set = (struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *(*)(struct __pyx_obj_5larch_6pickle_6pickle__BufferContainer *, PyObject *))__pyx_f_5larch_6pickle_6pickle_16_BufferContainer_set;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_6pickle__BufferContainer) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5larch_6pickle_6pickle__BufferContainer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5larch_6pickle_6pickle__BufferContainer.tp_dictoffset && __pyx_type_5larch_6pickle_6pickle__BufferContainer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5larch_6pickle_6pickle__BufferContainer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5larch_6pickle_6pickle__BufferContainer.tp_dict, __pyx_vtabptr_5larch_6pickle_6pickle__BufferContainer) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferContainer, (PyObject *)&__pyx_type_5larch_6pickle_6pickle__BufferContainer) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_ptype_5larch_6pickle_6pickle__BufferContainer = &__pyx_type_5larch_6pickle_6pickle__BufferContainer;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_6pickle__FileLike) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5larch_6pickle_6pickle__FileLike.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5larch_6pickle_6pickle__FileLike.tp_dictoffset && __pyx_type_5larch_6pickle_6pickle__FileLike.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5larch_6pickle_6pickle__FileLike.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FileLike, (PyObject *)&__pyx_type_5larch_6pickle_6pickle__FileLike) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
  __pyx_ptype_5larch_6pickle_6pickle__FileLike = &__pyx_type_5larch_6pickle_6pickle__FileLike;
  if (PyType_Ready(&__pyx_type_5larch_6pickle_6pickle_ExternFileLike) < 0) __PYX_ERR(0, 350, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5larch_6pickle_6pickle_ExternFileLike.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5larch_6pickle_6pickle_ExternFileLike.tp_dictoffset && __pyx_type_5larch_6pickle_6pickle_ExternFileLike.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5larch_6pickle_6pickle_ExternFileLike.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExternFileLike, (PyObject *)&__pyx_type_5larch_6pickle_6pickle_ExternFileLike) < 0) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_ptype_5larch_6pickle_6pickle_ExternFileLike = &__pyx_type_5larch_6pickle_6pickle_ExternFileLike;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpickle(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpickle(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pickle(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pickle(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pickle(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  struct __pyx_opt_args_5larch_6pickle_6pickle__register_unpickle __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pickle' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pickle(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pickle", __pyx_methods, __pyx_k_Difference_to_python_pickle_no, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_larch__pickle__pickle) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "larch.pickle.pickle")) {
      if (unlikely(PyDict_SetItemString(modules, "larch.pickle.pickle", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "larch/pickle/pickle.pyx":46
 * Type FAST_NEW is introduced and a slighly smaller footprint und loads faster
 * """
 * import sys             # <<<<<<<<<<<<<<
 * import types
 * import cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":47
 * """
 * import sys
 * import types             # <<<<<<<<<<<<<<
 * import cython
 * import builtins
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_types, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":49
 * import types
 * import cython
 * import builtins             # <<<<<<<<<<<<<<
 * import operator
 * import logging
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_builtins, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_builtins, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":50
 * import cython
 * import builtins
 * import operator             # <<<<<<<<<<<<<<
 * import logging
 * from libc.string cimport memcpy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_operator, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_operator, __pyx_t_1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":51
 * import builtins
 * import operator
 * import logging             # <<<<<<<<<<<<<<
 * from libc.string cimport memcpy
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":63
 * from cpython.ref cimport Py_DECREF, Py_INCREF, Py_CLEAR, PyTypeObject
 * from cpython.exc cimport PyErr_Clear, PyErr_SetString, PyErr_Restore
 * from . import register as pickle_register             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_register);
  __Pyx_GIVEREF(__pyx_n_s_register);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_register);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s__3, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pickle_register, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":66
 * 
 * 
 * cdef set secure_objects = pickle_register.secure_objects             # <<<<<<<<<<<<<<
 * cdef set secure_modules = pickle_register.secure_modules
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_secure_objects); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PySet_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_secure_objects);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_secure_objects, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":67
 * 
 * cdef set secure_objects = pickle_register.secure_objects
 * cdef set secure_modules = pickle_register.secure_modules             # <<<<<<<<<<<<<<
 * 
 * logger = logging.getLogger("larch.pickle")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_secure_modules); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PySet_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_secure_modules);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_secure_modules, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":69
 * cdef set secure_modules = pickle_register.secure_modules
 * 
 * logger = logging.getLogger("larch.pickle")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":73
 * 
 * IF PY_MAJOR_VERSION > 2:
 *     import copyreg             # <<<<<<<<<<<<<<
 *     import _compat_pickle
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_copyreg, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyreg, __pyx_t_2) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":74
 * IF PY_MAJOR_VERSION > 2:
 *     import copyreg
 *     import _compat_pickle             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_compat_pickle, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compat_pickle, __pyx_t_2) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":77
 * 
 *     cdef:
 *         dict name_mapping_2to3 = _compat_pickle.NAME_MAPPING             # <<<<<<<<<<<<<<
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_NAME_MAPPING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_name_mapping_2to3);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_name_mapping_2to3, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":78
 *     cdef:
 *         dict name_mapping_2to3 = _compat_pickle.NAME_MAPPING
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING             # <<<<<<<<<<<<<<
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING
 *         dict import_mapping_3to2 = _compat_pickle.REVERSE_IMPORT_MAPPING
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_IMPORT_MAPPING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_import_mapping_2to3);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_import_mapping_2to3, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":79
 *         dict name_mapping_2to3 = _compat_pickle.NAME_MAPPING
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING             # <<<<<<<<<<<<<<
 *         dict import_mapping_3to2 = _compat_pickle.REVERSE_IMPORT_MAPPING
 * ELSE:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_REVERSE_NAME_MAPPING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_name_mapping_3to2);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_name_mapping_3to2, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":80
 *         dict import_mapping_2to3 = _compat_pickle.IMPORT_MAPPING
 *         dict name_mapping_3to2 = _compat_pickle.REVERSE_NAME_MAPPING
 *         dict import_mapping_3to2 = _compat_pickle.REVERSE_IMPORT_MAPPING             # <<<<<<<<<<<<<<
 * ELSE:
 *     import copy_reg as copyreg
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compat_pickle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_REVERSE_IMPORT_MAPPING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_import_mapping_3to2);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_import_mapping_3to2, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":84
 *     import copy_reg as copyreg
 * 
 * cdef object REDUCE_PROTOCOL = 4             # <<<<<<<<<<<<<<
 * cdef MAX_PROTOCOL_VERSION = 4
 * 
 */
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_REDUCE_PROTOCOL, __pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);

  /* "larch/pickle/pickle.pyx":85
 * 
 * cdef object REDUCE_PROTOCOL = 4
 * cdef MAX_PROTOCOL_VERSION = 4             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION, __pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);

  /* "larch/pickle/pickle.pyx":132
 *             print(msg, hex(v), repr(o), hex(<size_t><PyObject*>o), (<PyObject*>o).ob_refcnt)
 * 
 *     debug = <debug_t>show_debug             # <<<<<<<<<<<<<<
 * 
 * 
 */
  debug = ((debug_t)__pyx_f_5larch_6pickle_6pickle_show_debug);

  /* "larch/pickle/pickle.pyx":259
 * 
 * cdef:
 *     dict dispatch_table = copyreg.dispatch_table             # <<<<<<<<<<<<<<
 *     dict extension_registry = copyreg._extension_registry
 *     dict inverted_registry = copyreg._inverted_registry
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copyreg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dispatch_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_dispatch_table);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_dispatch_table, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":260
 * cdef:
 *     dict dispatch_table = copyreg.dispatch_table
 *     dict extension_registry = copyreg._extension_registry             # <<<<<<<<<<<<<<
 *     dict inverted_registry = copyreg._inverted_registry
 *     dict extension_cache = copyreg._extension_cache
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_copyreg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_extension_registry); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_extension_registry);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_extension_registry, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":261
 *     dict dispatch_table = copyreg.dispatch_table
 *     dict extension_registry = copyreg._extension_registry
 *     dict inverted_registry = copyreg._inverted_registry             # <<<<<<<<<<<<<<
 *     dict extension_cache = copyreg._extension_cache
 *     dict modules = sys.modules
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copyreg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inverted_registry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_inverted_registry);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_inverted_registry, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":262
 *     dict extension_registry = copyreg._extension_registry
 *     dict inverted_registry = copyreg._inverted_registry
 *     dict extension_cache = copyreg._extension_cache             # <<<<<<<<<<<<<<
 *     dict modules = sys.modules
 *     _end_item = object()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_copyreg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_extension_cache); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_extension_cache);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_extension_cache, ((PyObject*)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":263
 *     dict inverted_registry = copyreg._inverted_registry
 *     dict extension_cache = copyreg._extension_cache
 *     dict modules = sys.modules             # <<<<<<<<<<<<<<
 *     _end_item = object()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_modules); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle_modules);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle_modules, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":264
 *     dict extension_cache = copyreg._extension_cache
 *     dict modules = sys.modules
 *     _end_item = object()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle__end_item);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle__end_item, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":367
 * 
 * @pickle_register.secure_unpickle
 * class PickleError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_PickleError, __pyx_n_s_PickleError, (PyObject *) NULL, __pyx_n_s_larch_pickle_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "larch/pickle/pickle.pyx":366
 * 
 * 
 * @pickle_register.secure_unpickle             # <<<<<<<<<<<<<<
 * class PickleError(Exception):
 *     pass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_secure_unpickle); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "larch/pickle/pickle.pyx":367
 * 
 * @pickle_register.secure_unpickle
 * class PickleError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_PickleError, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PickleError, __pyx_t_4) < 0) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":372
 * 
 * @pickle_register.secure_unpickle
 * class PicklingError(PickleError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_PicklingError, __pyx_n_s_PicklingError, (PyObject *) NULL, __pyx_n_s_larch_pickle_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "larch/pickle/pickle.pyx":371
 * 
 * 
 * @pickle_register.secure_unpickle             # <<<<<<<<<<<<<<
 * class PicklingError(PickleError):
 *     pass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_secure_unpickle); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "larch/pickle/pickle.pyx":372
 * 
 * @pickle_register.secure_unpickle
 * class PicklingError(PickleError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_PicklingError, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PicklingError, __pyx_t_4) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":377
 * 
 * @pickle_register.secure_unpickle
 * class UnpicklingError(PickleError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_UnpicklingError, __pyx_n_s_UnpicklingError, (PyObject *) NULL, __pyx_n_s_larch_pickle_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "larch/pickle/pickle.pyx":376
 * 
 * 
 * @pickle_register.secure_unpickle             # <<<<<<<<<<<<<<
 * class UnpicklingError(PickleError):
 *     pass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_secure_unpickle); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "larch/pickle/pickle.pyx":377
 * 
 * @pickle_register.secure_unpickle
 * class UnpicklingError(PickleError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_UnpicklingError, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnpicklingError, __pyx_t_4) < 0) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":382
 * 
 * @pickle_register.secure_unpickle
 * class SecurityError(UnpicklingError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_UnpicklingError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_SecurityError, __pyx_n_s_SecurityError, (PyObject *) NULL, __pyx_n_s_larch_pickle_pickle, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "larch/pickle/pickle.pyx":381
 * 
 * 
 * @pickle_register.secure_unpickle             # <<<<<<<<<<<<<<
 * class SecurityError(UnpicklingError):
 *     pass
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pickle_register); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_secure_unpickle); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "larch/pickle/pickle.pyx":382
 * 
 * @pickle_register.secure_unpickle
 * class SecurityError(UnpicklingError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_SecurityError, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SecurityError, __pyx_t_4) < 0) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":627
 *         reraise()
 * 
 * save_object_ptr = save_object             # <<<<<<<<<<<<<<
 * 
 * 
 */
  save_object_ptr = __pyx_f_5larch_6pickle_6pickle_save_object;

  /* "larch/pickle/pickle.pyx":647
 * 
 * 
 * register_type(1, save_int)             # <<<<<<<<<<<<<<
 * register_type(1L, save_long)
 * register_type(True, save_bool)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_int_1, save_int);

  /* "larch/pickle/pickle.pyx":648
 * 
 * register_type(1, save_int)
 * register_type(1L, save_long)             # <<<<<<<<<<<<<<
 * register_type(True, save_bool)
 * register_type(None, save_none)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_int_1L, __pyx_f_5larch_6pickle_6pickle_save_long);

  /* "larch/pickle/pickle.pyx":649
 * register_type(1, save_int)
 * register_type(1L, save_long)
 * register_type(True, save_bool)             # <<<<<<<<<<<<<<
 * register_type(None, save_none)
 * register_type(1.0, save_float)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(Py_True, save_bool);

  /* "larch/pickle/pickle.pyx":650
 * register_type(1L, save_long)
 * register_type(True, save_bool)
 * register_type(None, save_none)             # <<<<<<<<<<<<<<
 * register_type(1.0, save_float)
 * register_type((), save_tuple)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(Py_None, save_none);

  /* "larch/pickle/pickle.pyx":651
 * register_type(True, save_bool)
 * register_type(None, save_none)
 * register_type(1.0, save_float)             # <<<<<<<<<<<<<<
 * register_type((), save_tuple)
 * register_type([], save_list)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_float_1_0, save_float);

  /* "larch/pickle/pickle.pyx":652
 * register_type(None, save_none)
 * register_type(1.0, save_float)
 * register_type((), save_tuple)             # <<<<<<<<<<<<<<
 * register_type([], save_list)
 * register_type({}, save_dict)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_empty_tuple, save_tuple);

  /* "larch/pickle/pickle.pyx":653
 * register_type(1.0, save_float)
 * register_type((), save_tuple)
 * register_type([], save_list)             # <<<<<<<<<<<<<<
 * register_type({}, save_dict)
 * register_type(type, save_global)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_t_2, save_list);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":654
 * register_type((), save_tuple)
 * register_type([], save_list)
 * register_type({}, save_dict)             # <<<<<<<<<<<<<<
 * register_type(type, save_global)
 * register_type(iter([]), save_impossible)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_t_2, save_dict);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":655
 * register_type([], save_list)
 * register_type({}, save_dict)
 * register_type(type, save_global)             # <<<<<<<<<<<<<<
 * register_type(iter([]), save_impossible)
 * register_type(iter(()), save_impossible)
 */
  __pyx_f_5larch_6pickle_6pickle_register_type(((PyObject *)(&PyType_Type)), __pyx_f_5larch_6pickle_6pickle_save_global);

  /* "larch/pickle/pickle.pyx":656
 * register_type({}, save_dict)
 * register_type(type, save_global)
 * register_type(iter([]), save_impossible)             # <<<<<<<<<<<<<<
 * register_type(iter(()), save_impossible)
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_t_1, __pyx_f_5larch_6pickle_6pickle_save_impossible);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":657
 * register_type(type, save_global)
 * register_type(iter([]), save_impossible)
 * register_type(iter(()), save_impossible)             # <<<<<<<<<<<<<<
 * pickle_registry.register_type(types.GeneratorType, save_impossible)
 * 
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_t_1, __pyx_f_5larch_6pickle_6pickle_save_impossible);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":658
 * register_type(iter([]), save_impossible)
 * register_type(iter(()), save_impossible)
 * pickle_registry.register_type(types.GeneratorType, save_impossible)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_GeneratorType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  pickle_registry.register_type(__pyx_t_2, __pyx_f_5larch_6pickle_6pickle_save_impossible);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":663
 * IF PY_MAJOR_VERSION > 2:
 *     #the string type will be used as first dump candidate!
 *     cdef _string_type = type(unicode())             # <<<<<<<<<<<<<<
 *     string_type = <void*>_string_type
 *     save_string_ptr = save_str3
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_kp_u__3)));
  __Pyx_XGOTREF(__pyx_v_5larch_6pickle_6pickle__string_type);
  __Pyx_DECREF_SET(__pyx_v_5larch_6pickle_6pickle__string_type, ((PyObject *)Py_TYPE(__pyx_kp_u__3)));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_kp_u__3)));

  /* "larch/pickle/pickle.pyx":664
 *     #the string type will be used as first dump candidate!
 *     cdef _string_type = type(unicode())
 *     string_type = <void*>_string_type             # <<<<<<<<<<<<<<
 *     save_string_ptr = save_str3
 *     register_type(bytes(), save_bytes)
 */
  string_type = ((void *)__pyx_v_5larch_6pickle_6pickle__string_type);

  /* "larch/pickle/pickle.pyx":665
 *     cdef _string_type = type(unicode())
 *     string_type = <void*>_string_type
 *     save_string_ptr = save_str3             # <<<<<<<<<<<<<<
 *     register_type(bytes(), save_bytes)
 * ELSE:
 */
  save_string_ptr = save_str3;

  /* "larch/pickle/pickle.pyx":666
 *     string_type = <void*>_string_type
 *     save_string_ptr = save_str3
 *     register_type(bytes(), save_bytes)             # <<<<<<<<<<<<<<
 * ELSE:
 *     cdef _string_type = type(bytes())
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)(&PyBytes_Type))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_f_5larch_6pickle_6pickle_register_type(__pyx_t_2, save_bytes);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":709
 * 
 *     def __init__(
 *             self, file=None, protocol=MAX_PROTOCOL_VERSION, with_refs=True):             # <<<<<<<<<<<<<<
 *         IF PY_MAJOR_VERSION < 3:
 *             self.protocol = 2
 */
  __Pyx_INCREF(__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION);
  __pyx_k_ = __pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION;
  __Pyx_GIVEREF(__pyx_v_5larch_6pickle_6pickle_MAX_PROTOCOL_VERSION);

  /* "larch/pickle/pickle.pyx":968
 *         unpickle_registry[i+offset] = loader
 * 
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_wrong_code), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":969
 * 
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))
 * _register_unpickle(load_uint4, range(0x80))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_uint4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":970
 * _register_unpickle(<unpack_t>load_wrong_code, range(0, 0x200))
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_int4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":971
 * _register_unpickle(load_uint4, range(0x80))
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint8, [0xcc])
 * _register_unpickle(load_uint16, [0xcd])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_193);
  __Pyx_GIVEREF(__pyx_int_193);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_193);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_ref), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":972
 * _register_unpickle(load_int4, range(0xe0, 0x100))
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint16, [0xcd])
 * _register_unpickle(load_uint32, [0xce])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_204);
  __Pyx_GIVEREF(__pyx_int_204);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_204);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_uint8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":973
 * _register_unpickle(<unpack_t>load_ref, [0xc1])
 * _register_unpickle(load_uint8, [0xcc])
 * _register_unpickle(load_uint16, [0xcd])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint32, [0xce])
 * _register_unpickle(load_uint64, [0xcf])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_205);
  __Pyx_GIVEREF(__pyx_int_205);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_205);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_uint16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":974
 * _register_unpickle(load_uint8, [0xcc])
 * _register_unpickle(load_uint16, [0xcd])
 * _register_unpickle(load_uint32, [0xce])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_uint64, [0xcf])
 * _register_unpickle(load_int8, [0xd0])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_206);
  __Pyx_GIVEREF(__pyx_int_206);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_206);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_uint32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":975
 * _register_unpickle(load_uint16, [0xcd])
 * _register_unpickle(load_uint32, [0xce])
 * _register_unpickle(load_uint64, [0xcf])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int8, [0xd0])
 * _register_unpickle(load_int16, [0xd1])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_207);
  __Pyx_GIVEREF(__pyx_int_207);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_207);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_uint64, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":976
 * _register_unpickle(load_uint32, [0xce])
 * _register_unpickle(load_uint64, [0xcf])
 * _register_unpickle(load_int8, [0xd0])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int16, [0xd1])
 * _register_unpickle(load_int32, [0xd2])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_208);
  __Pyx_GIVEREF(__pyx_int_208);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_208);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_int8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":977
 * _register_unpickle(load_uint64, [0xcf])
 * _register_unpickle(load_int8, [0xd0])
 * _register_unpickle(load_int16, [0xd1])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_209);
  __Pyx_GIVEREF(__pyx_int_209);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_209);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_int16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":978
 * _register_unpickle(load_int8, [0xd0])
 * _register_unpickle(load_int16, [0xd1])
 * _register_unpickle(load_int32, [0xd2])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_210);
  __Pyx_GIVEREF(__pyx_int_210);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_210);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_int32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":979
 * _register_unpickle(load_int16, [0xd1])
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map4, range(0x80, 0x90))
 * _register_unpickle(load_map16,[0xde])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_211);
  __Pyx_GIVEREF(__pyx_int_211);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_211);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_int64, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":980
 * _register_unpickle(load_int32, [0xd2])
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_map4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":981
 * _register_unpickle(load_int64, [0xd3])
 * _register_unpickle(load_map4, range(0x80, 0x90))
 * _register_unpickle(load_map16,[0xde])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_map32, [0xdf])
 * _register_unpickle(load_nil, [0xc0])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_222);
  __Pyx_GIVEREF(__pyx_int_222);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_222);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_map16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":982
 * _register_unpickle(load_map4, range(0x80, 0x90))
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_nil, [0xc0])
 * _register_unpickle(load_false, [0xc2])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_223);
  __Pyx_GIVEREF(__pyx_int_223);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_223);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_map32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":983
 * _register_unpickle(load_map16,[0xde])
 * _register_unpickle(load_map32, [0xdf])
 * _register_unpickle(load_nil, [0xc0])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_192);
  __Pyx_GIVEREF(__pyx_int_192);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_192);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_nil, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":984
 * _register_unpickle(load_map32, [0xdf])
 * _register_unpickle(load_nil, [0xc0])
 * _register_unpickle(load_false, [0xc2])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_194);
  __Pyx_GIVEREF(__pyx_int_194);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_194);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_false, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":985
 * _register_unpickle(load_nil, [0xc0])
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 * _register_unpickle(load_str8, [0xd9])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_195);
  __Pyx_GIVEREF(__pyx_int_195);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_195);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_true, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":986
 * _register_unpickle(load_false, [0xc2])
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_str4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":987
 * _register_unpickle(load_true, [0xc3])
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 * _register_unpickle(load_str8, [0xd9])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str16, [0xda])
 * _register_unpickle(load_str32, [0xdb])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_217);
  __Pyx_GIVEREF(__pyx_int_217);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_217);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_str8, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":988
 * _register_unpickle(load_str4, range(0xa0, 0xc0))
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_str32, [0xdb])
 * _register_unpickle(load_bin8, [0xc4])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_218);
  __Pyx_GIVEREF(__pyx_int_218);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_218);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_str16, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":989
 * _register_unpickle(load_str8, [0xd9])
 * _register_unpickle(load_str16, [0xda])
 * _register_unpickle(load_str32, [0xdb])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bin8, [0xc4])
 * _register_unpickle(load_bin16, [0xc5])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_219);
  __Pyx_GIVEREF(__pyx_int_219);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_219);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_str32, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":990
 * _register_unpickle(load_str16, [0xda])
 * _register_unpickle(load_str32, [0xdb])
 * _register_unpickle(load_bin8, [0xc4])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_196);
  __Pyx_GIVEREF(__pyx_int_196);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_196);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_bin8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":991
 * _register_unpickle(load_str32, [0xdb])
 * _register_unpickle(load_bin8, [0xc4])
 * _register_unpickle(load_bin16, [0xc5])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_197);
  __Pyx_GIVEREF(__pyx_int_197);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_197);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_bin16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":992
 * _register_unpickle(load_bin8, [0xc4])
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 * _register_unpickle(load_array16, [0xdc])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_198);
  __Pyx_GIVEREF(__pyx_int_198);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_198);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_bin32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":993
 * _register_unpickle(load_bin16, [0xc5])
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_array4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":994
 * _register_unpickle(load_bin32, [0xc6])
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 * _register_unpickle(load_array16, [0xdc])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_array32, [0xdd])
 * _register_unpickle(load_float, [0xcb])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_220);
  __Pyx_GIVEREF(__pyx_int_220);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_220);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_array16, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":995
 * _register_unpickle(load_array4, range(0x90, 0xa0))
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_float, [0xcb])
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_221);
  __Pyx_GIVEREF(__pyx_int_221);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_221);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_array32, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":996
 * _register_unpickle(load_array16, [0xdc])
 * _register_unpickle(load_array32, [0xdd])
 * _register_unpickle(load_float, [0xcb])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 * _register_unpickle(load_ext8, [0xc7])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_203);
  __Pyx_GIVEREF(__pyx_int_203);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_203);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_float, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":997
 * _register_unpickle(load_array32, [0xdd])
 * _register_unpickle(load_float, [0xcb])
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_ext8, [0xc7])
 * _register_unpickle(load_ext16, [0xc8])
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_212);
  __Pyx_GIVEREF(__pyx_int_212);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_212);
  __Pyx_INCREF(__pyx_int_213);
  __Pyx_GIVEREF(__pyx_int_213);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_213);
  __Pyx_INCREF(__pyx_int_214);
  __Pyx_GIVEREF(__pyx_int_214);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_214);
  __Pyx_INCREF(__pyx_int_215);
  __Pyx_GIVEREF(__pyx_int_215);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_215);
  __Pyx_INCREF(__pyx_int_216);
  __Pyx_GIVEREF(__pyx_int_216);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_216);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_extf, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":998
 * _register_unpickle(load_float, [0xcb])
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 * _register_unpickle(load_ext8, [0xc7])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_ext16, [0xc8])
 * _register_unpickle(load_ext32, [0xc9])
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_199);
  __Pyx_GIVEREF(__pyx_int_199);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_199);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_ext8, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":999
 * _register_unpickle(load_extf, [0xd4, 0xd5, 0xd6, 0xd7, 0xd8])
 * _register_unpickle(load_ext8, [0xc7])
 * _register_unpickle(load_ext16, [0xc8])             # <<<<<<<<<<<<<<
 * _register_unpickle(load_ext32, [0xc9])
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_200);
  __Pyx_GIVEREF(__pyx_int_200);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_200);
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_ext16, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1000
 * _register_unpickle(load_ext8, [0xc7])
 * _register_unpickle(load_ext16, [0xc8])
 * _register_unpickle(load_ext32, [0xc9])             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 * _register_unpickle(load_long, [LONG], 0x100)
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_201);
  __Pyx_GIVEREF(__pyx_int_201);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_201);
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_ext32, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1001
 * _register_unpickle(load_ext16, [0xc8])
 * _register_unpickle(load_ext32, [0xc9])
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_long, [LONG], 0x100)
 * _register_unpickle(load_list, [LIST], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_version), __pyx_t_2, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1002
 * _register_unpickle(load_ext32, [0xc9])
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 * _register_unpickle(load_long, [LONG], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_list, [LIST], 0x100)
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(LONG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_long, __pyx_t_2, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1003
 * _register_unpickle(<unpack_t>load_version, [VERSION], 0x100)
 * _register_unpickle(load_long, [LONG], 0x100)
 * _register_unpickle(load_list, [LIST], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 * _register_unpickle(<unpack_t>load_global_object, [GLOBAL_OBJECT], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(LIST); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_list, __pyx_t_2, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1004
 * _register_unpickle(load_long, [LONG], 0x100)
 * _register_unpickle(load_list, [LIST], 0x100)
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_global_object, [GLOBAL_OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(GLOBAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_global), __pyx_t_2, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1005
 * _register_unpickle(load_list, [LIST], 0x100)
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 * _register_unpickle(<unpack_t>load_global_object, [GLOBAL_OBJECT], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW, OBJECT_NEW_CUSTOM], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(GLOBAL_OBJECT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_global_object), __pyx_t_2, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1006
 * _register_unpickle(<unpack_t>load_global, [GLOBAL], 0x100)
 * _register_unpickle(<unpack_t>load_global_object, [GLOBAL_OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW, OBJECT_NEW_CUSTOM], 0x100)
 * _register_unpickle(<unpack_t>load_object_fast, [FAST_NEW], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(OBJECT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_1 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_object), __pyx_t_2, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "larch/pickle/pickle.pyx":1007
 * _register_unpickle(<unpack_t>load_global_object, [GLOBAL_OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW, OBJECT_NEW_CUSTOM], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_object_fast, [FAST_NEW], 0x100)
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EXT_TYPES(OBJECT_NEW); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(OBJECT_NEW_CUSTOM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_object_new), __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1008
 * _register_unpickle(<unpack_t>load_object, [OBJECT], 0x100)
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW, OBJECT_NEW_CUSTOM], 0x100)
 * _register_unpickle(<unpack_t>load_object_fast, [FAST_NEW], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(FAST_NEW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_object_fast), __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1009
 * _register_unpickle(<unpack_t>load_object_new, [OBJECT_NEW, OBJECT_NEW_CUSTOM], 0x100)
 * _register_unpickle(<unpack_t>load_object_fast, [FAST_NEW], 0x100)
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(SINGLETON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_singleton), __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1010
 * _register_unpickle(<unpack_t>load_object_fast, [FAST_NEW], 0x100)
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(OLD_STYLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_oldstyle), __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1011
 * _register_unpickle(<unpack_t>load_singleton, [SINGLETON], 0x100)
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(INIT_ARGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_initargs), __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1012
 * _register_unpickle(<unpack_t>load_oldstyle, [OLD_STYLE], 0x100)
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 * _register_unpickle(load_unicode, [UNISTR], 0x100)
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(END_OBJECT_ITEMS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(((unpack_t)__pyx_f_5larch_6pickle_6pickle_load_end_item), __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1013
 * _register_unpickle(<unpack_t>load_initargs, [INIT_ARGS], 0x100)
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 * _register_unpickle(load_bytes, [BYTES], 0x100)             # <<<<<<<<<<<<<<
 * _register_unpickle(load_unicode, [UNISTR], 0x100)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(BYTES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_bytes, __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1014
 * _register_unpickle(<unpack_t>load_end_item, [END_OBJECT_ITEMS], 0x100)
 * _register_unpickle(load_bytes, [BYTES], 0x100)
 * _register_unpickle(load_unicode, [UNISTR], 0x100)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum__EXT_TYPES(UNISTR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_8.__pyx_n = 1;
  __pyx_t_8.offset = 0x100;
  __pyx_t_2 = __pyx_f_5larch_6pickle_6pickle__register_unpickle(load_unicode, __pyx_t_3, &__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "larch/pickle/pickle.pyx":1
 * #cython: boundscheck=False, always_allow_keywords=False, language_level=3, profile=False             # <<<<<<<<<<<<<<
 * """
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init larch.pickle.pickle", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init larch.pickle.pickle");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__EXT_TYPES(enum EXT_TYPES value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum EXT_TYPES neg_one = (enum EXT_TYPES) -1, const_zero = (enum EXT_TYPES) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum EXT_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum EXT_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum EXT_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum EXT_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum EXT_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum EXT_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint8_t neg_one = (uint8_t) -1, const_zero = (uint8_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 2 * PyLong_SHIFT) {
                            return (uint8_t) (((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 3 * PyLong_SHIFT) {
                            return (uint8_t) (((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 4 * PyLong_SHIFT) {
                            return (uint8_t) (((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint8_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint8_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint8_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) ((((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint8_t");
    return (uint8_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint8_t");
    return (uint8_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
